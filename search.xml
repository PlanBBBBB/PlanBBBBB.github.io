<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零碎面试题</title>
      <link href="/2023/10/13/%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/10/13/%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="finally语句块什么时候不会执行"><a href="#finally语句块什么时候不会执行" class="headerlink" title="finally语句块什么时候不会执行"></a>finally语句块什么时候不会执行</h2><p>finally语句块在两种情况下不会执行:</p><ol><li>程序没有进入到try语句块因为异常导致程序终止,这个问题主要是开发人员在编写代码的时候,异常捕获的范围不够</li><li>在try或者cache语句块中,执行了System.exit(0)语句,导致JVM直接退出</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM学习</title>
      <link href="/2023/10/03/SSM/"/>
      <url>/2023/10/03/SSM/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2023/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2023/10/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>用数组去构造二叉树的时候，都是遵循一个规则类似于左闭右闭，然后用索引去切割数组，而不是真的去浪费时间和空间去切割数组。</p><p>在找到结点后，想找其父节点时，可以在全局变量中定义一个<code>TreeNode pre</code>来记录前一个结点，这个前一个结点可以用来当他的父节点，也可以在二叉搜索树中记录中序遍历的前一个小于他的结点。</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>在二叉搜索树上求什么最值啊，差值之类的，就把它想成在一个有序数组（即对二叉搜索树做中序遍历）上求最值，求差值。</p><p>对于二叉搜索树的添加删除操作可以用TreeNode的返回值，让其返回值传递给上一层递归，让上一层递归去接住这个结果，比如在下一层返回到上一层可以清晰地知道上一层是左边还是右边的孩子应该去接住这个返回上来的结果。</p><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p><strong>做题关键</strong>：回溯都可以画成一颗树，画成树层结构就好懂了</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ul><li>组合中最重要的是startIndex（下一次遍历的起始位置）</li></ul><p>如果是一个集合来求组合的话，就需要startIndex，</p><p>如果是多个集合取组合，各个集合之间相互不影响，那么就不用startIndex</p><p>组合模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        back(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= k) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n-(k-list.size())+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            back(n, k, i + <span class="number">1</span>);</span><br><span class="line">            list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剪枝优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;&#x3D; 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;&#x3D; n - (k - path.size()) + 1，开始遍历</li></ol><h3 id="树层去重"><a href="#树层去重" class="headerlink" title="树层去重"></a>树层去重</h3><p>同一树层上不能取相同的值，否则就与之前的重复了</p><ul><li><strong>利用used数组做树层去重</strong>：这是要将<strong>数组进行排序后</strong>，前一个数和当前数相同，且前一个数没被使用过的情况（前一个数被使用了不能去，因为这是树枝上的，树枝不用去重）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;!used[i-<span class="number">1</span>]&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>利用HashSet做树层去重</strong>：当<strong>数组不能被排序时</strong>，例如递增子序列那题，本质上其实都是为了保证当前树层上不能取到同样的数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hashSet.contains(nums[i]))&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用HashSet做树层去重是<strong>通用方法</strong>，但是时间和空间复杂度上去了</p></blockquote><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><p>分割的本质还是组合</p><p>例如对于字符串abcdef：</p><ul><li>组合问题：选取一个a之后，在bcdef中再去选取第二个，选取b之后在cdef中再选取第三个…..。</li><li>切割问题：切割一个a之后，在bcdef中再去切割第二段，切割b之后在cdef中再切割第三段…..。</li></ul><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231016103652105.png" alt="image-20231016103652105"></p><p>写法习惯：在for循环中遇到不符合条件的就直接continue跳过了</p><p>模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        back(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(String s, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.length()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isPalindrome(s, startIndex, i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);</span><br><span class="line">            list.add(str);</span><br><span class="line">            back(s, i + <span class="number">1</span>);</span><br><span class="line">            list.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) != s.charAt(right)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>如果把 子集问题、组合问题、分割问题都抽象为一棵树的话，<strong>那么组合问题和分割问题都是收集树的叶子节点，而子集问题是找树的所有节点！</strong></p><p>模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        back(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            back(nums, i + <span class="number">1</span>);</span><br><span class="line">            list.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>上面三种其实都可以称为组合，排列不需要startIndex去规定遍历的起始位置，因为排列中每次都是从i&#x3D;0开始遍历完所有<strong>未被使用</strong>的数，这里的未被使用需要使用到used数组去判断，所以排列的题都需要有used数组</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用设计模式</title>
      <link href="/2023/10/03/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/03/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/10/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习</title>
      <link href="/2023/10/03/SpringBoot/"/>
      <url>/2023/10/03/SpringBoot/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2023/09/05/Java%E9%9B%86%E5%90%88/"/>
      <url>/2023/09/05/Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>Java集合学习总览图：</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905215900101.png" alt="Java集合学习总览图"></p><h1 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h1><ol><li>单列集合</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905221342150.png" alt="单列集合"></p><ol start="2"><li>双列集合</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905221800749.png" alt="双列集合"></p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Colection接口常用方法"><a href="#Colection接口常用方法" class="headerlink" title="Colection接口常用方法"></a>Colection接口常用方法</h2><ol><li>add:添加单个元素</li><li>remove:删除指定元素</li><li>contains:查找元素是否存在</li><li>size:获取元素个数</li><li>isEmpty:判断是否为空</li><li>clear:清空</li><li>addAIl:添加多个元素</li><li>containsAll:查找多个元素是否都存在</li><li>removeAll: 删除多个元素</li></ol><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><ol><li>迭代器：iterator，遍历完还想遍历要重置迭代器，否则会抛异常</li><li>集合的增强for：底层原理还是迭代器</li></ol><blockquote><p>关于JVM学习后的补充：</p><ul><li><p>对于集合的增强for的底层实现，通过编译期得到的字节码文件得知是使用的迭代器；</p></li><li><p>但是对于普通数组的增强for，他的底层实现其实是最普通的带索引的for循环；</p></li><li><p>所以不能说增强for的底层是迭代器，是要分情况的。</p></li></ul></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="List接口基本介绍"><a href="#List接口基本介绍" class="headerlink" title="List接口基本介绍"></a>List接口基本介绍</h3><p>List 接口是 Collection 接口的子接口 </p><ol><li><p>List .javaList集合类中元素有序(即添加顺序和取出顺序一致)、且可重复[案例]</p></li><li><p>List集合中的每个元素都有其对应的顺序索引，即支持索引。</p></li><li><p>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</p></li></ol><h3 id="List接口常用方法"><a href="#List接口常用方法" class="headerlink" title="List接口常用方法"></a>List接口常用方法</h3><ol><li>void add(int index, Object ele):在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li><li>Object get(int index):获取指定index位置的元素</li><li>int indexOf(Object obi):返回obi在集合中首次出现的位置</li><li>int lastlndexof(Object obj):返回obj在当前集合中末次出现的位置</li><li>Object remove(int index):移除指定index位置的元素，并返回此元素</li><li>Object set(int index, Object ele):设置指定index位置的元素为ele相当于是替换</li><li>List subList(int fromlndex, int tolndex):返回从fromIndex到tolndex位置的子集合</li></ol><h3 id="ArrayList源码分析⭐⭐⭐"><a href="#ArrayList源码分析⭐⭐⭐" class="headerlink" title="ArrayList源码分析⭐⭐⭐"></a>ArrayList源码分析⭐⭐⭐</h3><ol><li>ArrayList中维护了一个Object类型的<strong>数组</strong>elementData<br><strong>transient</strong> Objectll elementData:</li></ol><blockquote><p>transient：被该关键字修饰的对象等，表示该属性<strong>不会被序列化</strong></p></blockquote><ol><li>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData为1.5倍。</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230906150045877.png" alt="三种构造器"></p><ol start="3"><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容则直接扩容elementData为1.5倍</li></ol><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li><p>Vector底层也是一个对象数组，protected Objectp[ ] elementData;</p></li><li><p>Vector是线程同步的，即线程安全，Vector类的操作方法带有<strong>synchronized</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在开发中，需要线程同步安全时，考虑使用Vector</li></ul><blockquote><p>ArrayList是线程不安全的，没有加synchronized，在多线程的情况下不建议使用ArrayList，而是使用Vector</p></blockquote><table><thead><tr><th>类型</th><th>底层结构</th><th>线程安全（同步） 效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>不安全，效率高</td><td>无参默认0个，第一次扩容10个，后续1.5倍扩</td></tr><tr><td>Vector</td><td>可变数组</td><td>安全，效率不高</td><td>无参默认10个，后续2倍扩</td></tr></tbody></table><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>LinkedList底层实现了<strong>双向链表</strong>和<strong>双端队列</strong>特点</li><li>可以添加任意元素(元素可以重复)，包括null</li><li><strong>线程不安全</strong>，没有实现同步</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="Set接口基本介绍"><a href="#Set接口基本介绍" class="headerlink" title="Set接口基本介绍"></a>Set接口基本介绍</h3><ul><li><p>无序 (添加和取出的顺序不一致)，没有索引</p></li><li><p>不允许重复无素，所以最多包含一个null</p></li></ul><blockquote><p>注意：虽然取出元素时是无序的，但每次取出却都是固定的。</p></blockquote><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet底层其实就是HashMap，而HashMap底层又是<strong>邻接链表</strong>，当效率不够时会变为<strong>红黑树</strong></p><p>构造器源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>HashSet不保证元素是有序的，取决于hash后，再确定索引的结果</p></blockquote><h4 id="总体结论"><a href="#总体结论" class="headerlink" title="总体结论"></a>总体结论</h4><ol><li>添加一个元素时，先得到hash值，会转成索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放的有元素</li><li>如果没有，直接加入</li><li>如果有，调用 equals 比较，如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在Java8中,如果一条链表的元素个数到达<code>TREEIFY THRESHOLD</code>(默认是 8)，并且table的大小 &gt;&#x3D;<code>MIN TREEIFY CAPACITY</code>(默认64)就会进行树化(红黑树)</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907160829758.png" alt="image-20230907160829758"></p><hr><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907225342640.png" alt="image-20230907225342640"></p><h4 id="源码详细解释：⭐⭐⭐⭐⭐"><a href="#源码详细解释：⭐⭐⭐⭐⭐" class="headerlink" title="源码详细解释：⭐⭐⭐⭐⭐"></a>源码详细解释：⭐⭐⭐⭐⭐</h4><ol><li><p>HashSet底层就是HashMap，所以会以值为key，然后一个通用的占位符为value进行调用map的put方法</p></li><li><p>在put方法调用后进入putVaule方法中</p></li><li><p>在该方法中根据key得到的hash值并不是最终结果，还要经过计算得到一个h的常量，最终再通过h来判断出索引位</p></li><li><p>然后先对存放在数组中的元素进行等值判断，若该处没元素则直接存入，若存在且相同则退出</p></li><li><p>第二个if就是如果数组中存放的是红黑树，则进行红黑树的添加</p></li><li><p>第三种情况就是数组中存放的是链表，那么将进入for循环依次对比各个元素，要么链表中全部元素都不相同则排到链表末尾，如果碰到有一个相同的就直接退出</p></li><li><p>在末尾添加时会统计该链表的长度，若到达8则会考虑树化，树化的条件不仅是链表长度到达8，而且表长度要到达64</p></li></ol><hr><p><strong>看源码写注释理解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//这里都是定义一些需要的变量</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="comment">//如果数组（table）为空，就去调用resize扩容方法</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">//如果得到的索引值处的位置为空，则直接将Node结点存入该处</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">//否则第一种情况：如果此时hash值相同且equal比较后相同，那么就会替换value值</span></span><br><span class="line">            <span class="comment">//在HashMap中是替换value值，在HashSet中也是替换value值，只不过值相同而已</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//第二种情况：发现数组中存放的红黑树结构，则进行红黑树的后续添加操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">//第三种情况：剩下的情况就是在链表中查看是否有hash值相同且equal比较后相同的</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//一直循环遍历整条链表，只会有下面两种情况退出</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//第一种情况：找到最后都没有找到，直接把元素添加到链表末尾</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//添加后要判断链表长度是不是到达8，可能进行相应的树化操作</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) </span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//第二种情况：找到了相同的，那么就替换值即可</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里是替换值的操作</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; </span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//如果此时添加</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐"><a href="#HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐" class="headerlink" title="HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐"></a>HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐</h4><ol><li>HashSet底层是HashMap，第一次添加时，table 数组扩容到 16， 临界值<code>threshold</code>是 16乘以加载因子<code>loadFactor</code>0.75 &#x3D; 12</li><li>如果table数组使用到了临界值 12,就会扩容到16* 2 &#x3D; 32，新的临界值就是32*0.75 &#x3D; 24，依次类推</li></ol><blockquote><p>补充：根据下面的源码可知，每添加一个元素都算是size加一，而不是要等到表中每个位置到达临界值，即包括链表中的元素在内的元素个数到达临界值就会扩容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure><p>举例：就算全部元素都加到同一个链表中，只要元素个数到达临界值就要扩容</p></blockquote><ol><li>在Java8中，如果一条链表的元素个数到达 <code>TREEIFY THRESHOLD</code>（默认是 8）并且table的大小 &gt;&#x3D;<code>MIN TREEIFY CAPACITY</code>（默认64）就会进行树化（红黑树）,否则仍然采用数组扩容机制</li></ol><p>利用下面这段代码进行debug查看：</p><blockquote><p>因为要hash值相同才会挂到同一个地方，所以重写了他们的hashCode都返回一样的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;A&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            hashSet.add(<span class="keyword">new</span> <span class="title class_">A</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直遍历到i&#x3D;8时（包括i&#x3D;8），此时都是存放在一条链表上的</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231345653.png" alt="image-20230907231345653"></p><p>此时到i&#x3D;9时，因为链表长度到达了8，此时就出发了扩容机制，表长度就会变为16*2&#x3D;32，而第9个元素会被存放在原链表的末尾，此时长度为9，且<strong>索引值会重新进行hash计算，不一定还是原来的索引值了</strong>。</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231658335.png" alt="image-20230907231658335"></p><p>此时运行到i&#x3D;10的时候，会再次触发扩容机制，则第10个元素会再次被添加到链表末尾，链表长度为10，然后表再次扩容为64</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907232000347.png" alt="image-20230907232000347"></p><p>此时到i&#x3D;11的时候，再次添加元素就同时满足链表长度到达8且表长度到达64的两个条件了，则会将链表转换为红黑树</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231052305.png" alt="image-20230907231052305"></p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><ol><li><p>LinkedHashSet 是 HashSet 的子类</p></li><li><p>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个 <strong>数组+ 双向链表</strong></p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时<strong>使用链表维护元素的次序</strong>(图)，这使得元素看起来是以插入顺序保存的。</p></li><li><p>LinkedHashSet 不允许添重复元素</p></li></ol><p>执行下面代码，所维护的双向链表如图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;刘&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br></pre></td></tr></table></figure><hr><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908154435929.png" alt="image-20230908154435929"></p><hr><p>在LinkedHashSet中的table中存放的是LinkedHashMap$Entry，他继承了HashMap$Node</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908160006697.png" alt="image-20230908160006697"></p><blockquote><p>总结：其实只是增加了一个双向链表而已，其他什么都没变HashSet，包括原来的next也是保留了的</p></blockquote><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ol><li><p>TreeSet底层其实是TreeMap</p></li><li><p>key不能为null</p></li><li><p>底层维护了一个红黑树</p></li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908224358603.png" alt="image-20230908224358603"></p><hr><p>在发现比较相同的时候，会重置value的值，在TreeSet情况下，相对于key来说，其实是<strong>加不进去的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cpr != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parent = t;</span><br><span class="line">        cmp = cpr.compare(key, t.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            t = t.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">            t = t.right;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//在发现比较相同的时候，会重置value的值，但是相对于key来说，其实是加不进去的</span></span><br><span class="line">            <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">    &#125;<span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>比如在运行下面这段代码时字符串<code>php</code>其实是加不进去的，比较判断逻辑是比较字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1, o2) -&gt; o1.length() - o2.length());</span><br><span class="line">        treeSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;c++&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c++, java, python]</span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Map接口特点"><a href="#Map接口特点" class="headerlink" title="Map接口特点"></a>Map接口特点</h2><ol><li>Map与Collection并列存在，用于保存具有映射关系的数据：Key-Value</li><li>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到HashMap$Node对象中</li><li>Map 中的 key 不允许重复，原因和HashSet 一样，前面分析过源码</li><li>Map 中的 value 可以重复</li><li>Map 的key 可以为 null，value 也可以为null，注意 key 为null，只能有一个value为null，可以多个。</li><li>常用String类作为Map的 key</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</li></ol><ol start="8"><li>一对 k-v 是放在一个HashMap$Node中的，又因为Node实现了Entry 接口，有些书上也说 一对k-v就是一个Entry</li></ol><blockquote><p>第8点补充：其实就是为了<strong>方便遍历</strong>，所以把Node类型的数据转成entry类型的数据，在使用一个entrySet集合来进行保存各个entry。</p></blockquote><h2 id="Map接口常用方法"><a href="#Map接口常用方法" class="headerlink" title="Map接口常用方法"></a>Map接口常用方法</h2><ol><li>put:添加</li><li>remove:根据键删除映射关系</li><li>get: 根据键获取值</li><li>size:获取元素个数</li><li>isEmpty:判断个数是否为0</li><li>clear:清除</li><li>containsKey:查找键是否存在</li></ol><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>HashMap是线程不安全的</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>key相同是<strong>值替换</strong>，而不是整个键值对替换</li></ul><p>查看源码可知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">    <span class="keyword">if</span>(!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">        e.value = value;</span><br><span class="line">    afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体源码分析</li></ul><blockquote><p>具体可看上面的HashSet讲解，因为HashSet底层就是HashMap</p></blockquote><ol><li>HashMap底层维护了Node类型的数组table，默认为null当创建对象时，将加载因子<code>loadfactor</code>初始化为0.75</li><li>当添加key-val时，通过key的哈希值得到在table的索引，然后判断该索引处是否有元素</li><li>如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key和准备加入的key相是否等，如果相等，则直接替换val；如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容。</li><li>第1次添加，则需要扩容table容量为16，临界值<code>threshold</code>为12（16*0.75）</li><li>以后再扩容，则需要扩容table容量为原来的2倍（32），临界值为原来的2倍,即24,依次类推</li><li>在Java8中,如果一条链表的元素个数超过<code>TREEIFY_THRESHOLD</code>（默认是 8），并且table的大小 &gt;&#x3D; <code>MIN TREEIFY CAPACITY</code>（默认64），就会进行树化（红黑树）</li></ol><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ol><li>线程安全，因为方法上有加synchronized</li><li>Hashtable中key和value都不能是null，否则会抛异常</li><li>底层是Hashtable&amp;Entry[ ] 数组，第一次扩容大小为11</li><li>加载因子<code>loadfactor</code>初始化为0.75</li><li>第一次临界值<code>threshold</code>为8（11*0.75）</li><li>进行扩容时是按两倍加一来扩容，例如11*2+1&#x3D;23，第二次扩容大小就为23</li></ol><h2 id="Propoties"><a href="#Propoties" class="headerlink" title="Propoties"></a>Propoties</h2><ol><li>Propoties是Hashtable的子类</li><li>Properties 还可以用于从<code>xxx.properties</code>文件中，加载数据到Properties类对象并进行读取和修改</li></ol><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ol><li><p>底层维护了一个红黑树</p></li><li><p>key不能为null</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Object, Object&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        treeMap.put(<span class="string">&quot;java&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        treeMap.put(<span class="literal">null</span>,<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>在发现比较相同的时候，会重置value的值，因为key会被认为是同一个对象，所以只会重置value值</li></ol><blockquote><p>例如下面例子中<code>c++</code>先被添加，再添加<code>php</code>时因为字符串长度一致所以被认为是同一个对象，所以只会修改值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;     </span><br><span class="line">        TreeMap&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; o1.length() - o2.length());</span><br><span class="line">        treeMap.put(<span class="string">&quot;java&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;c++&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;python&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;php&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;c++=<span class="number">2</span>, java=<span class="number">1</span>, python=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol><li>reverse(List): 反转 List 中元素的顺序</li><li>shuffle(List): 对 List 集合元素进行随机排序</li><li>sort(List): 根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator): 根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int): 将指定 list 集合中的i 处元素和j处元素进行交换</li><li>Object max(Collection): 根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection,Comparator): 根据 Comparator 指定的顺序返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection，Object): 返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src): 将src中的内容复制到dest中</li><li>boolean replaceAll(List list,Object oldVal，object newVal): 使用新值替换 List 对象的所有旧值</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程</title>
      <link href="/2023/08/28/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/08/28/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230828164359091.png" alt="image-20230828164359091"></p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230828164436283.png" alt="image-20230828164436283"></p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><ol><li>进程</li></ol><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 <strong>进程就可以视为程序的一个实例。</strong>大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等） </p><ol start="2"><li>线程</li></ol><p><strong>一个进程之内可以分为一到多个线程。</strong> 一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</p><ol start="3"><li>二者对比</li></ol><ul><li><p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集 </p></li><li><p>进程拥有共享的资源，如内存空间等，供其内部的线程共享 </p></li><li><p>进程间通信较为复杂，同一台计算机的进程通信称为 IPC， 不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP 线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 </p></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>引用 Rob Pike 的一段描述： </p><blockquote><p>并发（concurrent）是同一时间应对（dealing with）多件事情的能力 </p><p>并行（parallel）是同一时间动手做（doing）多件事情的能力 </p></blockquote><hr><p>例子：</p><ol><li><p>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发 </p></li><li><p>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一 个人用锅时，另一个人就得等待）</p></li><li><p>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</p></li></ol><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>同步：需要等待结果返回，才能继续运行</p><p>异步：不需要等待结果返回，就能继续运行</p><hr><p><strong>多线程可以让方法执行变为异步的</strong>（即不要巴巴干等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如果没有线程调度机制，这 5 秒 cpu 什么都做不了，其它代码都得暂停…</p><h2 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h2><p>充分利用多核 cpu 的优势，提高运行效率。想象下面的场景，执行 3 个计算，最后将计算结果汇总。 </p><table><thead><tr><th>计算 1 花费 10 ms</th></tr></thead><tbody><tr><td>计算 2 花费 11 ms</td></tr><tr><td>计算 3 花费 9 ms</td></tr><tr><td>汇总需要 1 ms</td></tr></tbody></table><hr><p>如果是串行执行，那么总共花费的时间是 10 + 11 + 9 + 1 &#x3D; 31ms 但如果是四核 cpu，各个核心分别使用线程 1 执行计算 1，线程 2 执行计算 2，线程 3 执行计算 3，那么 3 个 线程是并行的，花费时间只取决于最长的那个线程运行的时间，即 11ms 最后加上汇总时间只会花费 12ms </p><blockquote><p><strong>注意</strong>：需要在多核 cpu 才能提高效率，单核仍然时是轮流执行</p></blockquote><p><strong>结论：</strong> </p><ol><li><p>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu ，不至于一个线程总占用 cpu，别的线程没法干活 </p></li><li><p>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</p></li></ol><ul><li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率</li><li>但不是所有计算任务都能拆分（参考后文的【阿姆达尔定律】） </li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li></ul><ol start="3"><li>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但需要一 直等待 IO 结束，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化</li></ol><h1 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h1><h2 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h2><ol><li>创建Runnable接口对象配合Thread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> () -&gt; log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><blockquote><p>用 Runnable 更容易与线程池等高级 API 配合 </p><p>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</p></blockquote><hr><ol start="2"><li>FutureTask 配合 Thread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hhhhhhhhhhh&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p></blockquote><h2 id="观察多个线程同时运行"><a href="#观察多个线程同时运行" class="headerlink" title="观察多个线程同时运行"></a>观察多个线程同时运行</h2><p>两个线程交替执行，谁先谁后不受我们控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>在Windows环境下，可以通过任务管理器来查看进程和线程数，也可以用来杀死进程<ul><li>tasklist 查看进程</li><li>taskkill 杀死进程</li></ul></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>Linux环境下有关进程的指令<ul><li><code>ps -ef</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写H切换是否显示进程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li></ul></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>jps命令查看所有Java进程</li><li>jstack 查看某个Java进程(PID)的所有线程状态</li><li>jconsole 查看某个Java进程中线程的运行情况(图形界面)</li></ul><hr><p>jconsole 远程监控配置：</p><p>需要以如下方式运行你的 java 类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure><h2 id="原理之线程运行"><a href="#原理之线程运行" class="headerlink" title="原理之线程运行"></a>原理之线程运行</h2><h3 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h3><ol><li><p>虚拟机栈：<strong>线程</strong>运行需要的内存空间</p></li><li><p>栈帧：每个<strong>方法</strong>运行时需要的内存</p></li></ol><p>结合JVM学习知识</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230903213826052.png" alt="线程运行图解"></p><blockquote><p>多线程的情况下，每个线程有自己独立的栈内存，互不干扰</p></blockquote><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>因为以下一些原因导致 <strong>cpu 不再执行当前的线程，转而执行另一个线程的代码</strong> </p><ul><li>线程的 cpu 时间片用完 </li><li>垃圾回收 </li><li>有更高优先级的线程需要运行 </li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</li></ul><p>当线程上下文切换发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是<strong>程序计数器</strong>（Program Counter Register），它的作用是<strong>记住下一条 jvm 指令的执行地址，是线程私有的</strong> </p><ul><li>状态包括<strong>程序计数器</strong>、<strong>虚拟机栈中每个栈帧的信息</strong>，如局部变量、操作数栈、返回地址等 </li><li>线程上下文切换<strong>频繁</strong>发生会<strong>影响性能</strong></li></ul><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th><th align="center">注意</th></tr></thead><tbody><tr><td align="center">start()</td><td align="center"></td><td align="center">启动一个新线程，在新的线程运行run方法中的代码</td><td align="center">start方法只是让线程进入就绪，里面代码不一定立刻运行（CPU的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException的错误</td></tr><tr><td align="center">run()</td><td align="center"></td><td align="center">新线程启动后会调用的方法</td><td align="center">如果在构造Thread对象时传递了Runnable参数，则线程启动后会调用Runnable中的run方法，否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td></tr><tr><td align="center">join()</td><td align="center"></td><td align="center">等待线程运行结束</td><td align="center"></td></tr><tr><td align="center">join(long n)</td><td align="center"></td><td align="center">等待线程运行结束，最多等待n毫秒</td><td align="center"></td></tr><tr><td align="center">getId()</td><td align="center"></td><td align="center">获取线程长整型的id</td><td align="center">id唯一</td></tr><tr><td align="center">getName()</td><td align="center"></td><td align="center">获取线程名</td><td align="center"></td></tr><tr><td align="center">setName(String)</td><td align="center"></td><td align="center">修改线程名</td><td align="center"></td></tr><tr><td align="center">getPriority()</td><td align="center"></td><td align="center">获取线程优先级</td><td align="center"></td></tr><tr><td align="center">setPriority(int)</td><td align="center"></td><td align="center">修改线程优先级</td><td align="center">Java中规定线程优先级是1~10的整数，较大的优先级能提高该线程被CPU调度的机率</td></tr><tr><td align="center">getState()</td><td align="center"></td><td align="center">获取线程状态</td><td align="center">Java中线程状态是用6个enum表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</td></tr><tr><td align="center">isInterrupted()</td><td align="center">static</td><td align="center">判断是否被打断</td><td align="center"><strong>不会清除打断标记</strong></td></tr><tr><td align="center">isAlive()</td><td align="center">static</td><td align="center">线程是否存活（还没有运行完毕）</td><td align="center"></td></tr><tr><td align="center">interrupt()</td><td align="center">static</td><td align="center">打断线程</td><td align="center">如果被打断线程正在sleep、wait、join会导致被打断的线程抛出InterruptedException，并清除打断标记；如果打断的正在运行的线程，则会设置打断标记；park的线程被打断，也会设置打断标记</td></tr><tr><td align="center">interrupted()</td><td align="center">static</td><td align="center">判断当前线程是否被打断</td><td align="center"><strong>会清除打断标记</strong></td></tr></tbody></table><h2 id="start与run"><a href="#start与run" class="headerlink" title="start与run"></a>start与run</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                read(MP4_FULL_PATH);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).run();</span><br><span class="line">        log.debug(<span class="string">&quot;do other things ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">59</span> [main] c.Sync - main</span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> [main] c.Sync - 读取文件耗时：3925ms</span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> [main] c.Sync - <span class="keyword">do</span> other things ...</span><br></pre></td></tr></table></figure><p>可以看见使用run方法去执行一个线程时是单线程的，并不会异步地去调用新线程<code>t1</code>。</p><p>将run方法改为start方法后，执行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [main] c.Sync - <span class="keyword">do</span> other things ...</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [t1] c.Sync - t1</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">17</span> [t1] c.Sync - 读取文件耗时：3844ms</span><br></pre></td></tr></table></figure><p>可以看到线程异步调用。</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><ul><li>直接调用run()是在主线程中执行了run()，并没有直接启动新线程</li><li>使用start是启动新的线程，通过新的线程间接执行run()中的代码</li></ul></blockquote><h2 id="sleep与yield"><a href="#sleep与yield" class="headerlink" title="sleep与yield"></a>sleep与yield</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><ol><li>调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞） </li><li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException </li><li>睡眠结束后的线程未必会立刻得到执行，也就是就绪态，因为操作系统未必会给予cpu进行执行</li><li>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性，例如<code>TimeUnit.SECONDS.sleep(1)</code>表示线程休眠1秒</li></ol><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ol><li>调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程 </li><li>具体的实现依赖于操作系统的任务调度器</li></ol><h3 id="二者区别⭐⭐⭐"><a href="#二者区别⭐⭐⭐" class="headerlink" title="二者区别⭐⭐⭐"></a>二者区别⭐⭐⭐</h3><ul><li><code>sleep</code>方法将线程从运行状态转移到阻塞状态，线程在指定的时间后返回到就绪状态。</li><li><code>yield</code>方法将线程从运行状态转移到就绪状态，线程愿意让出CPU时间片给其他线程。</li></ul><ul><li>线程只有在就绪状态下才能获得时间片，而在阻塞状态不会分配时间片。</li></ul><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.setPriority(Thread.MIN_PRIORITY);</span><br></pre></td></tr></table></figure><p>该方法有十个优先级，从1到10，默认为5，数字越大优先级越大</p><blockquote><p>需注意：yield和这个线程优先级都是作为提示功能，具体还是看任务调度器分配的时间片</p></blockquote><h3 id="sleep实用案例"><a href="#sleep实用案例" class="headerlink" title="sleep实用案例"></a>sleep实用案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">50</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，为防止无限死循环一直占用cpu，可使用sleep或yield方法进行休眠，不让这个程序一直占用cpu</p><h2 id="join方法详解"><a href="#join方法详解" class="headerlink" title="join方法详解"></a>join方法详解</h2><h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;t1开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">        log.debug(<span class="string">&quot;t1结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, r);</span><br><span class="line">    log.debug(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中主线程会等待t1线程运行结束后才执行后续的操作，如下为图解：</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904132856038.png" alt="image-20230904132856038"></p><h3 id="等待多个结果"><a href="#等待多个结果" class="headerlink" title="等待多个结果"></a>等待多个结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠1s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r1 = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 休眠2s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r2 = <span class="number">20</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r1：&#123;&#125;，r2：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>, r1, r2, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中有t1线程和t2线程，即使颠倒两个join方法的执行顺序，等待时间依然是两秒，如下为图解：</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904133129345.png" alt="image-20230904133129345"></p><h3 id="有时效的join方法"><a href="#有时效的join方法" class="headerlink" title="有时效的join方法"></a>有时效的join方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.join(<span class="number">500</span>);<span class="comment">//最多等0.5s</span></span><br></pre></td></tr></table></figure><ul><li><p>如果线程超过这个时间还未结束，则就不等待了。</p></li><li><p>如果线程在这个时间内提前结束，那么也直接结束了，并不会一直等够那么多时间。</p></li></ul><h2 id="interrupt方法详解"><a href="#interrupt方法详解" class="headerlink" title="interrupt方法详解"></a>interrupt方法详解</h2><blockquote><p>这里说的打断并不是真的直接打断，也只是起到一个<strong>提示</strong>的作用而已</p></blockquote><h3 id="打断-sleep，wait，join-的线程"><a href="#打断-sleep，wait，join-的线程" class="headerlink" title="打断 sleep，wait，join 的线程"></a>打断 sleep，wait，join 的线程</h3><p>这几个方法都会让线程进入<strong>阻塞状态</strong></p><p>打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> sleep(<span class="number">1</span>);</span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> t1.start();</span><br><span class="line"> sleep(<span class="number">0.5</span>);</span><br><span class="line"> t1.interrupt();</span><br><span class="line"> log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line"> at java.lang.Thread.sleep(Native Method)</span><br><span class="line"> at java.lang.Thread.sleep(Thread.java:<span class="number">340</span>)</span><br><span class="line"> at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:<span class="number">386</span>)</span><br><span class="line"> at cn.itcast.n2.util.Sleeper.sleep(Sleeper.java:<span class="number">8</span>)</span><br><span class="line"> at cn.itcast.n4.TestInterrupt.lambda$test1$<span class="number">3</span>(TestInterrupt.java:<span class="number">59</span>)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"><span class="number">21</span>:<span class="number">18</span>:<span class="number">10.374</span> [main] c.TestInterrupt - 打断状态: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h3><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"> <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line"> <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line"> log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, interrupted);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"> t2.start();</span><br><span class="line"> sleep(<span class="number">0.5</span>);</span><br><span class="line"> t2.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">57</span>:<span class="number">37.964</span> [t2] c.TestInterrupt - 打断状态: <span class="literal">true</span> </span><br></pre></td></tr></table></figure><h3 id="两阶段终止模式（通过interrupt实现）⭐⭐⭐"><a href="#两阶段终止模式（通过interrupt实现）⭐⭐⭐" class="headerlink" title="两阶段终止模式（通过interrupt实现）⭐⭐⭐"></a>两阶段终止模式（通过interrupt实现）⭐⭐⭐</h3><blockquote><p>两阶段终止模式是软件工程领域中的一种设计模式，通常用于确保在终止程序或系统时执行必要的清理工作，以防止资源泄漏或其他不良影响。这个模式分为两个阶段：</p><ol><li>第一阶段（准备阶段）：</li></ol><ul><li>在这个阶段，程序或系统开始准备关闭操作。它可能包括以下任务：<ul><li>停止接受新的请求或事务。</li><li>完成正在进行的任务或事务。</li><li>确保不再分配或使用新的资源。</li></ul></li></ul><ol start="2"><li>第二阶段（终止阶段）：</li></ol><ul><li>在这个阶段，程序或系统执行实际的关闭操作。这通常包括以下任务：<ul><li>释放已分配的资源，如内存、文件句柄、数据库连接等。</li><li>执行清理工作，例如关闭打开的文件、断开网络连接、保存状态信息等。</li><li>发送终止通知或事件，以便其他组件或系统可以做出相应的响应。</li></ul></li></ul><p>两阶段终止模式的目标是确保程序或系统在关闭时能够安全地释放资源并维护数据的完整性。这有助于避免资源泄漏和不稳定的状态。</p></blockquote><blockquote><p>在一个线程T1中如何优雅的终止线程T2？这里的优雅指的是给T2一个料理后事的机会</p></blockquote><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904215106648.png" alt="实现思路"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TPTInterrupt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span> (current.isInterrupted()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;将结果保存&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    current.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 执行监控操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;监控线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TPTInterrupt</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TPTInterrupt</span>();</span><br><span class="line">t.start();</span><br><span class="line">Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">log.debug(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">t.stop();</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">42.915</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">43.919</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">44.919</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">45.413</span> c.TestTwoPhaseTermination [main] - stop</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">45.413</span> c.TwoPhaseTermination [监控线程] - 料理后事</span><br></pre></td></tr></table></figure><h3 id="打断park线程"><a href="#打断park线程" class="headerlink" title="打断park线程"></a>打断park线程</h3><p>使用如下代码，执行park命令时，线程会暂停在那里，只有当interrupt为假时才会暂停在那里，当interrupt为真时线程就不会因该条语句而暂停，会跳过这行代码而进行下面的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.park();</span><br></pre></td></tr></table></figure><blockquote><p>park的线程被打断，也会设置打断标记，所以在一个线程中进行park打断后，此时的interrupt就为真了，只有在后面手动修改interrupt为假才能继续使用park打断。</p></blockquote><h2 id="不推荐的方法"><a href="#不推荐的方法" class="headerlink" title="不推荐的方法"></a>不推荐的方法</h2><p>这三个方法已经过时，而且容易破坏同步代码块，造成线程死锁</p><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">stop()</td><td align="center"></td><td align="center">停止线程运行</td></tr><tr><td align="center">suspend()</td><td align="center"></td><td align="center">挂起（暂停）线程运行</td></tr><tr><td align="center">resume()</td><td align="center"></td><td align="center">恢复线程运行</td></tr></tbody></table><h2 id="主线程与守护线程"><a href="#主线程与守护线程" class="headerlink" title="主线程与守护线程"></a>主线程与守护线程</h2><p>默认情况下，Java线程需要等待所有线程都运行结束，才会结束。</p><p>有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程执行结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="literal">true</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;非守护线程执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，因为t1线程被设置为了守护线程，因为其他非守护线程，即这里的主线程停止了，即使t1里面有个死循环也要强制停止。</p><hr><ul><li>垃圾回收线程就是一种守护线程</li><li>Tomcat中的Acceptor和Poller线程都是守护线程，所以Tomcat接收到shutdown命令后秒回等待它们处理完当前请求</li></ul><h2 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h2><p>五种状态是从<strong>操作系统层面</strong>考虑的</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904222706849.png" alt="五种状态"></p><ul><li><p><code>初始状态</code>仅是在语言层面创建了线程对象，还未与操作系统线程关联 </p></li><li><p><code>可运行状态</code>（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行 </p></li><li><p><code>运行状态</code>指获取了 CPU 时间片运行中的状态 当 CPU 时间片用完，会从<code>运行状态</code>转换至<code>可运行状态</code>，会导致线程的上下文切换<code>阻塞状态</code></p><ul><li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入<code>阻塞状态</code> </li><li>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换<code>运行状态</code> </li><li>与<code>可运行状态</code>的区别是，对<code>阻塞状态</code>的线程来说只要它们一直不唤醒，调度器就一直不会考虑 调度它们</li></ul></li><li><p><code>终止状态</code>表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></li></ul><h2 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h2><p>六种状态是从 Java API 层面来描述的</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904223924307.png" alt="六种状态"></p><ul><li><p><code>NEW</code>：线程刚被创建，但还没有调用start()方法</p></li><li><p><code>RUNNABLE</code>：当调用了start()方法后</p><blockquote><p>注意：Java API层面的RUNNABLE状态涵盖了操作系统层面的<strong>可运行状态、运行状态和阻塞状态</strong></p></blockquote></li><li><p><code>BLOCKED</code>、<code>WAITINT</code>、<code>TIMED_WAITING</code>都是Java API层面对阻塞状态的细分，后面会在状态转换一节详细描述</p></li><li><p><code>TERMINATED</code>：当线程代码运行结束</p></li></ul><hr><ul><li>代码展示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestState&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. t1线程刚被创建，还未调用start()方法，此时状态为 NEW</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. t2线程已被创建，并且调用了start()方法，空循坏会保证t2线程不会结束，此时状态为RUNNABLE</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t2&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>) &#123; <span class="comment">// runnable</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. t3线程只是打印一条日志，由于主线程中调用了sleep()，故当我们查看t3线程状态时，t3已经执行完毕，状态为TERMINATED</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t3&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. t4线程中调用了sleep()方法，状态为timed_waiting，即有时限的等待，注意此时t4还拿到了一把锁，后面要用</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t4&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>); <span class="comment">// timed_waiting</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. t5线程中调用了t2.join()，需要等待t2线程结束，故状态为waiting，即无时限的等待</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t5&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t2.join(); <span class="comment">// waiting</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 由于t4线程拿到了锁，但由于t4在sleep，故t6线程拿不到锁，会被阻塞，状态为blocked</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t6&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123; <span class="comment">// blocked</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t6.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;t1 state &#123;&#125;&quot;</span>, t1.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t2 state &#123;&#125;&quot;</span>, t2.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t3 state &#123;&#125;&quot;</span>, t3.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t4 state &#123;&#125;&quot;</span>, t4.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t5 state &#123;&#125;&quot;</span>, t5.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t6 state &#123;&#125;&quot;</span>, t6.getState());</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">48.753</span> c.TestState [t3] - running...</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.264</span> c.TestState [main] - t1 state NEW</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t2 state RUNNABLE</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t3 state TERMINATED</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t4 state TIMED_WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t5 state WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t6 state BLOCKED</span><br></pre></td></tr></table></figure><h3 id="统筹（烧水泡茶）"><a href="#统筹（烧水泡茶）" class="headerlink" title="统筹（烧水泡茶）"></a>统筹（烧水泡茶）</h3><p>其实就是个多线程的问题，开四个线程太浪费了所以就开两个线程实现即可。</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904231936646.png" alt="烧水泡茶"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;洗茶壶&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;烧开水&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">15</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;洗茶壶,洗茶杯,拿茶叶&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种解法的缺陷</p><ul><li>上面模拟的是Lucy等Kyle的水烧开了，Lucy泡茶，如果现在要让Kyle等Lucy把茶叶拿过来，由Kyle泡茶呢？</li><li>上面两个线程其实是各执行各的，如果要模拟Kyle把水壶交给Lucy泡茶，或者模拟Lucy把茶叶交给Kyle泡茶呢？</li></ul><p>这个缺陷后面会解决</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>本章的重点在于掌握 </p><ul><li><p>线程创建 </p></li><li><p>线程重要 api，如 start，run，sleep，join，interrupt 等 </p></li><li><p>线程状态 </p></li><li><p>应用方面 </p><ul><li>异步调用：主线程执行期间，其它线程异步执行耗时操作 </li><li>提高效率：并行计算，缩短运算时间 </li><li>同步等待：join </li><li>统筹规划：合理使用线程，得到最优效果</li></ul></li><li><p>原理方面 </p><ul><li>线程运行流程：栈、栈帧、上下文切换、程序计数器 </li><li>Thread 两种创建方式的源码</li></ul></li><li><p>模式方面 </p><ul><li>终止模式之两阶段终止</li></ul></li></ul><h1 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h1><h2 id="共享带来的问题"><a href="#共享带来的问题" class="headerlink" title="共享带来的问题"></a>共享带来的问题</h2><p>在下面这段代码中，运行得到的结果并不是0，这就是线程共享所带来的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized解决方案"><a href="#synchronized解决方案" class="headerlink" title="synchronized解决方案"></a>synchronized解决方案</h2><h2 id="方法上的synchronized"><a href="#方法上的synchronized" class="headerlink" title="方法上的synchronized"></a>方法上的synchronized</h2><h2 id="变量的线程安全分析"><a href="#变量的线程安全分析" class="headerlink" title="变量的线程安全分析"></a>变量的线程安全分析</h2><h2 id="Monitor概念"><a href="#Monitor概念" class="headerlink" title="Monitor概念"></a>Monitor概念</h2><h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h2><h2 id="Park-Unpark"><a href="#Park-Unpark" class="headerlink" title="Park &amp; Unpark"></a>Park &amp; Unpark</h2><h2 id="重新理解线程状态转换"><a href="#重新理解线程状态转换" class="headerlink" title="重新理解线程状态转换"></a>重新理解线程状态转换</h2><h2 id="多把锁"><a href="#多把锁" class="headerlink" title="多把锁"></a>多把锁</h2><h2 id="活跃性"><a href="#活跃性" class="headerlink" title="活跃性"></a>活跃性</h2><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2023/08/27/JVM/"/>
      <url>/2023/08/27/JVM/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>🚗本篇文章参考自以下学习资料：</p><p><a href="https://cyborg2077.github.io/">Kyle’s Blog</a></p><p><a href="https://javaguide.cn/">JavaGuide</a></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ol><li>JVM，JRE，JDK之间的区别</li></ol><ul><li><code>JVM</code>（Java Virtual Machine），Java虚拟机</li><li><code>JRE</code>（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</li><li><code>JDK</code>（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</li></ul><p><img src="/../assets/JVM/image-20230827213038167.png" alt="image-20230827213038167"></p><hr><ol start="2"><li>学习路线</li></ol><p><img src="/../assets/JVM/image-20230827212904317.png" alt="image-20230827212904317"></p><h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><p>文章参考自：<a href="https://cyborg2077.github.io/2023/03/27/JvmPart2/">https://cyborg2077.github.io/2023/03/27/JvmPart2/</a></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器的作用就是<strong>记住下一条jvm指令的执行地址</strong></p><ul><li><p>线程私有：每个线程都有独立的程序计数器，用于保存当前执行指令的地址 ，一旦指令执行，程序计数器将被下一条指令更新</p></li><li><p>不会存在内存溢出</p></li></ul><p><img src="/../assets/JVM/image-20230828100657668.png" alt="image-20230828100657668"></p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>虚拟机栈：<strong>线程</strong>运行需要的内存空间</p></li><li><p>栈帧：每个<strong>方法</strong>运行时需要的内存</p></li></ol><blockquote><p>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</p><p>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</p></blockquote><p><img src="/../assets/JVM/image-20230828101229662.png" alt="image-20230828101229662"></p><hr><blockquote><p>例：方法一调用方法二，方法二调用方法三，方法三结束才能让方法二和方法一依次返回</p></blockquote><p><img src="/../assets/JVM/image-20230828101315797.png" alt="image-20230828101315797"></p><hr><ol><li>垃圾回收是否涉及栈内存？</li></ol><blockquote><p>不涉及，栈中的栈帧在调用完后会自动弹出栈，垃圾回收只用于堆。</p></blockquote><ol start="2"><li>栈内存分配越大越好吗？</li></ol><blockquote><p>不是越大越好，一般来说使用系统默认的就好，因为物理内存是一定的，栈内存分配多了反而线程数就少了，并发量也下降了，只是每个栈中能进行方法间的调用多了而已。</p></blockquote><ol start="3"><li>方法内的局部变量是否线程安全？</li></ol><blockquote><p>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</p><p>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的三个线程互不影响，x不受影响每个都是5000</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">4</span>);</span><br><span class="line">        sb.append(<span class="number">5</span>);</span><br><span class="line">        sb.append(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            m2(sb);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的m2和m3就是所谓的逃离方法的作用范围，因为其他线程都有可能通过方法参数或者返回值去得到方法内的局部变量，就要考虑线程安全问题了</p></blockquote><h3 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h3><ol><li>栈帧过多导致栈内存溢出</li></ol><p><img src="/../assets/JVM/image-20230828104644939.png" alt="image-20230828104644939"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出现StackOverFlowError的错误</p></blockquote><ol start="2"><li>栈帧过大导致栈内存溢出</li></ol><p><img src="/../assets/JVM/image-20230828104711119.png" alt="image-20230828104711119"></p><hr><p>下面这个例子中，Emp中引入了Dept，而Dept中又引入了Emp，他们现在在循环引用，导致json解析时会出现StackOverFlow</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">        d.setName(<span class="string">&quot;Market&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        e1.setName(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        e1.setDept(d);</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        e2.setName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        e2.setDept(d);</span><br><span class="line"></span><br><span class="line">        d.setEmps(Arrays.asList(e1, e2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123; name: &#x27;Market&#x27;, emps: [&#123; name:&#x27;zhang&#x27;, dept:&#123; name:&#x27;&#x27;, emps: [ &#123;&#125;]&#125; &#125;,] &#125;</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        System.out.println(mapper.writeValueAsString(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">getEmps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmps</span><span class="params">(List&lt;Emp&gt; emps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程运行诊断⭐⭐⭐⭐⭐⭐⭐"><a href="#线程运行诊断⭐⭐⭐⭐⭐⭐⭐" class="headerlink" title="线程运行诊断⭐⭐⭐⭐⭐⭐⭐"></a>线程运行诊断⭐⭐⭐⭐⭐⭐⭐</h3><p>案例1： cpu 占用过多 </p><ol><li><p>定位 用top定位哪个进程对cpu的占用过高 </p></li><li><p>ps H -eo pid,tid,%cpu | grep 进程id （用ps命令进一步定位是哪个线程引起的cpu占用过高） </p></li><li><p>jstack 进程id 可以根据线程id 找到有问题的线程，进一步定位到问题代码的源码行号</p></li></ol><p>案例2：程序运行很长时间没有结果（死锁）</p><blockquote><p>查错能力，补充top命令到Linux中……⭐⭐⭐⭐⭐⭐⭐⭐</p></blockquote><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><blockquote><p><strong>一个栈帧中存放的有局部变量表和操作数栈</strong></p></blockquote><p><strong>局部变量表</strong>（Local Variable Table）是Java虚拟机（JVM）中的一个数据结构，<strong>用于存储方法在执行过程中所使用的局部变量</strong>。每个方法在运行时都会创建一个局部变量表，用于存储该方法内部定义的局部变量，这些局部变量通常包括方法参数以及在方法内部声明的临时变量。</p><p>以下是局部变量表的主要特点和作用：</p><ol><li><p>存储局部变量：局部变量表用于存储方法内部定义的局部变量，这些变量的生命周期仅限于方法的执行过程中。局部变量通常包括方法参数、临时变量和方法内部的其他局部变量。</p></li><li><p>助于方法执行：局部变量表中的局部变量存储了方法的输入和中间计算结果，这些值被用于方法的执行过程中。例如，在一个方法中，你可以声明一个局部变量来存储一个整数值，然后在方法中进行计算和操作。</p></li><li><p>类型检查：局部变量表会根据变量的声明类型进行类型检查，确保在方法中正确使用这些变量。这有助于Java编译器捕获类型错误。</p></li><li><p>提供方法调用信息：局部变量表还包含了方法调用时所需的信息，如方法的参数和返回值。这些信息有助于调用方法和返回结果。</p></li><li><p>运行时内存分配：局部变量表中的局部变量在方法的运行时被分配内存空间，以便存储数据。这些变量在方法执行结束后会被销毁，释放内存。</p></li></ol><p>总之，局部变量表是Java虚拟机中用于存储方法内部局部变量的数据结构，它在方法的执行过程中起到重要作用，包括存储数据、进行类型检查、提供方法调用信息等。局部变量表的大小和内容是由编译器在编译时确定的，并在方法的执行过程中被动态使用。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><ul><li>本地方法是指由非Java语言编写的代码，如C或C++，并被编译为本地二进制代码。</li><li>本地方法栈就是本地方法的内存空间。</li></ul><p>因为<code>JAVA</code>没法直接和操作系统底层交互，所以需要用到本地方法栈来调用本地的C或C++的方法</p><ul><li>例如Object类的源码中就有本地方法，用<code>native</code>关键字修饰本地方法（例如notifyAll等）<ul><li>本地方法只有函数声明，没有函数体，因为函数体是C或C++写的，通常是通过JNI（Java Native Interface）技术来实现的。</li></ul></li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li><p>Heap 堆</p><ul><li>通过 new 关键字，创建对象都会使用堆内存</li></ul></li><li><p>特点 </p><ul><li>它是线程共享的，堆中对象都需要考虑线程安全的问题 </li><li>有垃圾回收机制</li></ul></li></ul><h3 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h3><blockquote><p>错误：java.lang.OutOfMemoryError：Java heap space</p></blockquote><p>垃圾回收会回收不用的对象，但是一直使用的就不会回收，所以还是会有堆内存溢出的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示堆内存溢出：java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//Hello, HelloHello, HelloHelloHelloHello ···</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                list.add(a);</span><br><span class="line">                a = a + a;  <span class="comment">// HelloHelloHelloHello</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h3><ol><li><p>jps工具</p><ul><li>查看当前系统中有哪些Java进程</li></ul></li><li><p>jmap工具</p><ul><li><p>查看堆内存占用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap 进程<span class="built_in">id</span> <span class="comment"># 进程id就是jps查出来的进程</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>jconsole工具</p><ul><li>图形化界面的多功能监测工具，可以连续监测</li></ul></li><li><p>jvisualvm工具</p></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote><p>在堆内存的定义下，新生代和老年代是什么意思？</p></blockquote><p>在Java等编程语言中，堆内存（Heap Memory）是用于存储对象实例的一块内存区域。在堆内存中，对象实例被动态地分配和回收，这使得堆内存成为垃圾回收的主要场所。</p><p>在堆内存中，一般会根据对象的生命周期将其分为不同的区域，其中最常见的划分是“新生代”（Young Generation）和“老年代”（Old Generation），这有助于进行更有效的垃圾回收。以下是它们的解释：</p><ol><li><p>新生代（Young Generation）：<br>新生代是堆内存的一部分，用于存储新创建的对象。由于大部分对象在创建后很快就变得不再使用，因此将它们放在新生代中。新生代又分为三个区域：Eden区域和两个Survivor区域（通常称为From区和To区）。</p><ul><li>Eden区域：这是对象最初被创建的地方。当Eden区域满了之后，将触发一次“Minor GC”（新生代垃圾回收），这时会把仍然存活的对象移到Survivor区域。</li><li>Survivor区域：这两个区域用来存放在Eden区域中存活下来的对象。在Minor GC后，存活的对象会从Eden区域移动到一个Survivor区域。在不断的Minor GC中，对象可能会在不同的Survivor区域之间来回移动，最终达到一定的年龄后，会被移动到老年代。</li></ul></li><li><p>老年代（Old Generation）：<br>老年代用于存储长时间存活的对象，这些对象经过一定数量的Minor GC后仍然存活下来。老年代中的垃圾回收通常被称为“Major GC”或“Full GC”（全堆垃圾回收），因为它涉及整个堆内存的清理。Major GC发生的频率相对较低，因为老年代中的对象生命周期较长，所以它们不会频繁地触发垃圾回收。</p></li></ol><p>通过将堆内存划分为新生代和老年代，可以针对不同生命周期的对象采用不同的垃圾回收策略，以提高系统性能和内存利用率。这种划分能够减少垃圾回收对整个应用程序性能的影响，使得垃圾回收变得更加高效。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ol><li><p>在JVM中，方法区是一块用于存储类信息、常量、静态变量、即时编译器编译后的代码（<code>ClassLoader</code>）等数据的内存区域，它是Java虚拟机规范中的一个概念。<code>Java SE 7</code>及之前版本中，方法区的实现被称为<code>永久代</code>，但在<code>Java SE 8</code>之后的版本中，<code>永久代</code>被废弃了，被<code>元空间</code>所替代。</p></li><li><p>与永久代不同的是，元空间使用的是<code>本地内存（Native Memory）</code>，而不是<code>虚拟机内存（堆内存）</code>，这样就避免了OutOfMemoryError错误，因为在使用本地内存时，可以动态地调整大小，而且可以使用操作系统的虚拟内存机制，使得Java应用程序不会被限制在固定的内存大小中。</p></li></ol><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="/../assets/JVM/image-20230919155327596.png" alt="1.6以前"></p><hr><p><img src="/../assets/JVM/image-20230919155353326.png" alt="1.8以后"></p><h3 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h3><ol><li>永久代内存溢出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: PermGen space</span><br></pre></td></tr></table></figure><ol start="2"><li>元空间内存溢出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Metaspace</span><br></pre></td></tr></table></figure><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>常量池就是一行表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><ul><li>常量池是 *.class 文件中的<code>Constant pool</code>中的内容，存在二进制字节码文件中</li><li>而运行时常量池是当该类被加载时，将常量池信息放入运行时常量池，并把里面的符号地址(#2、#3)变为内存地址</li></ul><h3 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h3><p>StringTable类似于是一个HashTable</p><p>在下面这段Demo_08代码中，进行编译后的类的信息在常量池中，当该类被加载时，信息就被加载到了运行时常量池，此时的<code>a</code>，<code>b</code>，<code>ab</code>都没变为Java的字符串对象，当运行到该语句时才会转换。</p><p>而对于第7行代码而言，实质上是做了下面的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(<span class="string">&quot;a&quot;</span>).append(<span class="string">&quot;b&quot;</span>).toSting()</span><br></pre></td></tr></table></figure><p>而在<code>StringBuilder</code>中的<code>toString</code>方法中是创建了一个新的字符串对象，所以，s3是在常量池中的，而s4是在堆中的，所以这里打印为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编译期优化"><a href="#编译期优化" class="headerlink" title="编译期优化"></a>编译期优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码与最初的代码相比，就是用常量代替了变量去拼接，在编译期间，jvm认为常量不会再变化，所以在编译时就完成了拼接，这里的拼接是在StringTable串池中去寻找，找到了<code>ab</code>的字符串，就不会重新创建一个<code>ab</code>字符串了，所以第5行和第6行在底层存入的都是串池中的<code>ab</code>对象，故这里会打印True</p><h4 id="字符串延迟加载"><a href="#字符串延迟加载" class="headerlink" title="字符串延迟加载"></a>字符串延迟加载</h4><p>常量池中的字符串仅是符号，第一次用到时才变为对象</p><h4 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h4><p>可以使用intern方法，主动将串池中还没有的字符串对象放入串池</p><p>1.8中，将这个字符串对象尝试放入串池</p><ul><li>如果串池中已有，则不会放入</li><li>如果串池中没有，则放入串池，并将串池中的结果返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;            <span class="comment">// 常量池：[&quot;a&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;            <span class="comment">// 常量池：[&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;      <span class="comment">// 常量池：[&quot;a&quot;, &quot;b&quot;, &quot;ab&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;        <span class="comment">// 堆：new String(&quot;ab&quot;)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;           <span class="comment">// s5引用常量池中已有的对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s4.intern();    <span class="comment">// 常量池中已有&quot;ab&quot;，将常量池中的&quot;ab&quot;的引用返回，s6引用常量池中已有的对象</span></span><br><span class="line"></span><br><span class="line">        System.out.println(s3 == s4);   <span class="comment">// s3在常量池，s4在堆，false</span></span><br><span class="line">        System.out.println(s3 == s5);   <span class="comment">// s3在常量池，s5在常量池，true</span></span><br><span class="line">        System.out.println(s3 == s6);   <span class="comment">// s3在常量池，s6在常量池，true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;cd&quot;</span>;     <span class="comment">// 常量池：[&quot;cd&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;c&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;d&quot;</span>);    <span class="comment">// 堆：new String(&quot;cd&quot;)</span></span><br><span class="line">        str2.intern();  <span class="comment">// 常量池中已有&quot;cd&quot;，放入失败</span></span><br><span class="line">        System.out.println(str1 == str2);   <span class="comment">// str1在常量池，str2在堆，false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;e&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;f&quot;</span>);    <span class="comment">// 堆：new String(&quot;ef&quot;)</span></span><br><span class="line">        str4.intern();          <span class="comment">// 常量池中没有&quot;ef&quot;，放入成功，并返回常量池&quot;ef&quot;的引用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ef&quot;</span>;     <span class="comment">// 常量池：[&quot;ef&quot;]</span></span><br><span class="line">        System.out.println(str3 == str4);   <span class="comment">// str4是常量池的引用，str3也是常量池的引用，true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>1.6 中 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此对象复制一份，<br>放入串池，会把串池中的对象返回</p><blockquote><p>也就是调用intern方法的对象并不是存入串池中的对象，而是复制出来的一个新的对象</p><p>例如s.intern()，在1.8中如果串池中没有该元素则放入，此时s也变成常量池中的对象，而在1.6中，s还是堆对象</p></blockquote><h4 id="StringTable-位置"><a href="#StringTable-位置" class="headerlink" title="StringTable 位置"></a>StringTable 位置</h4><p>在 <code>JDK 1.6</code> 中，字符串常量池（也就是 StringTable）是位于<code>永久代</code>中的。而在 <code>JDK 1.8</code> 中，永久代已经被移除，取而代之的是元空间（Metaspace），而字符串常量池也随之移动到了<code>堆</code>中。这意味着在 JDK 1.8 中，字符串常量池中的字符串也可以被垃圾回收器回收，而在 JDK 1.6 中则不行。</p><blockquote><p>原因：因为字符串是很常用的，如果在永久代中保存是要等到老年代的时候才会去回收，不符合常用的特性。</p><ul><li>字符串常量池的大小是有限的，如果大量字符串被创建，永久代可能会出现内存溢出。</li><li>字符串常量池中的字符串对象难以被垃圾回收，即使它们不再被引用，也不会被回收，容易导致永久代的内存泄漏。</li></ul></blockquote><h4 id="StringTable垃圾回收"><a href="#StringTable垃圾回收" class="headerlink" title="StringTable垃圾回收"></a>StringTable垃圾回收</h4><p>在 Java 8 及更高版本中，字符串常量池位于堆中，而堆是 JVM 中的一部分，因此字符串常量池中的字符串可以被垃圾回收器回收。具体来说，只有当字符串没有被任何对象引用时，它才能被垃圾回收。当字符串被回收时，它的存储空间将被释放并可以被重新利用。</p><h4 id="StringTable-性能调优"><a href="#StringTable-性能调优" class="headerlink" title="StringTable 性能调优"></a>StringTable 性能调优</h4><ol><li>调整 -XX:StringTableSize&#x3D;桶个数</li></ol><blockquote><p>Stringtable类似于hashtable，这里的桶的个数指的就是存放链表的数组的个数，适当增大能有效避免哈希碰撞，能极大地提高效率</p></blockquote><ol start="2"><li>考虑将字符串对象是否入池</li></ol><blockquote><p>重复的字符串过多时考虑入池</p></blockquote><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ul><li>常见于 NIO 操作时，用于数据缓冲区 </li><li>分配回收成本较高，但读写性能高 </li><li>不受 JVM 内存回收管理</li><li>直接内存也会导致内存溢出</li></ul><p>传统IO，将文件读取到系统缓冲区中，但是Java代码不能直接读取系统缓冲区，所以需要在堆内存中分配一块Java缓冲区，将数据从系统缓冲区读取到Java缓冲区后，才能进行写操作</p><p><img src="/../assets/JVM/image-20230919223640091.png" alt="image-20230919223640091"></p><p>直接内存的Direct Memory对Java堆内存和系统内存是共享的一块内存区，那么磁盘文件就可以直接读取到Direct Memory，而Java堆内存也可以直接访问Direct Memory</p><p><img src="/../assets/JVM/image-20230919223613085.png" alt="image-20230919223613085"></p><blockquote><p>减少了不必要的数据复制，从而提高了效率</p></blockquote><h3 id="分配和回收原理"><a href="#分配和回收原理" class="headerlink" title="分配和回收原理"></a>分配和回收原理</h3><p>对于直接内存需要使用<code>Unsafe</code>对象完成直接内存的分配回收，并且回收需要主动调用<code>freeMemory</code>方法</p><p>回收方法<code>freeMemory</code></p><ul><li>其实释放的方法是在Deallocator()这个回调方法中</li><li>而它是由Cleaner调用的， Cleaner（虚引用类型）是用来监测<code>ByteBuffer</code>对象的，一旦<code>ByteBuffer</code>对象被垃圾<code>回收</code>，那么就会由<code>ReferenceHandler</code>线程通过<code>Cleaner</code>的<code>clean</code>方法调用<code>freeMemory</code>来释放直接内存</li><li><strong>ByteBuﬀer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuﬀer 对象，一旦 ByteBuﬀer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调 用 freeMemory 来释放直接内存</strong></li></ul><h3 id="禁用垃圾回收对直接内存的影响"><a href="#禁用垃圾回收对直接内存的影响" class="headerlink" title="禁用垃圾回收对直接内存的影响"></a>禁用垃圾回收对直接内存的影响</h3><ul><li>由于垃圾回收是一个相对昂贵的操作，需要消耗CPU时间和系统资源。频繁调用System.gc()可能会导致性能下降，并且在某些情况下可能会造成应用程序的不稳定性。</li><li>所以为了避免有些程序员老是手动调用垃圾回收，我们一般会进制显式手动垃圾回收，添加VM参数<code>-XX:+DisableExplicitGC</code>禁用显式的垃圾回收</li></ul><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>文章参考自：<a href="https://cyborg2077.github.io/2023/04/01/JvmPart3/">https://cyborg2077.github.io/2023/04/01/JvmPart3/</a></p><ul><li><p><strong>内存泄露</strong>：申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机分配给别人用。</p></li><li><p><strong>内存溢出</strong>：申请的内存超出了JVM能提供的内存大小，此时称之为溢出。</p></li></ul><h2 id="如何判断对象可以回收"><a href="#如何判断对象可以回收" class="headerlink" title="如何判断对象可以回收"></a>如何判断对象可以回收</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>当一个对象被引用是，就当引用对象的值<code>+1</code>，当引用对象的值为<code>0</code>时，则说明该对象没有被引用，那么就可以被垃圾回收器回收</p><p>这个引用计数法听起来很不错，而且实现起来也非常的简单，可是它有一个弊端，如下图所示，当两个对象循环引用时，两个对象的计数都未1，就导致这两个对象都无法被释放</p><p><img src="/../assets/JVM/image-20230920103843316.png" alt="引用计数法弊端"></p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>文章参考自：<a href="https://blog.csdn.net/qq_32099833/article/details/109253339">https://blog.csdn.net/qq_32099833/article/details/109253339</a></p><ul><li>JVM垃圾回收机制的可达性分析算法，是一种基于引用的垃圾回收算法。其基本思想是通过一系列被称为”GC Roots”的根对象作为起点，寻找所有被根对象直接或间接引用的对象，将这些对象称为”可达对象”，而没有被找到的对象则被视为”不可达对象”，需要被回收。</li></ul><p><img src="/../assets/JVM/image-20230920114845138.png" alt="image-20230920114845138"></p><ul><li><p>可达性分析算法的主要优点是可以处理复杂的引用结构，例如循环引用、交叉引用等情况，能够识别出所有可达对象，从而准确地进行垃圾回收。但是，它也有一些缺点，例如需要耗费较多的时间进行垃圾回收、可能会出现漏标和误标等问题。为了解决这些问题，JVM中还采用了其他的垃圾回收算法，如标记-清除算法、复制算法、标记-整理算法等，以提高垃圾回收的效率和准确性。</p></li><li><p>在JVM中，有几种类型的GC Roots对象：</p><ol><li><code>虚拟机栈中引用的对象</code>：虚拟机栈是用于存储方法调用和执行的栈空间。当一个方法被调用时，会在栈中创建一个栈帧，用于存储该方法的局部变量、参数和返回值等信息。如果栈帧中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>方法区中类静态属性引用的对象</code>：方法区是用于存储类信息、常量池、静态变量等信息的内存区域。当一个类被加载到方法区时，其中的静态属性会被分配在方法区中，如果这些静态属性中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>方法区中常量引用的对象</code>：常量池是方法区的一部分，用于存储常量。如果常量池中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>本地方法栈中JNI引用的对象</code>：JNI是Java Native Interface的缩写，用于在Java程序中调用本地方法（即由C或C++等语言编写的方法）。当本地方法被调用时，会在本地方法栈中创建一个栈帧，如果该栈帧中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>被同步锁持有的对象</code>：被synchronized锁住的对象也是绝对不能回收的，当前有线程持有对象锁呢，GC如果回收了对象，锁不就失效了嘛。</li></ol></li></ul><h3 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h3><p>参考文章自：<a href="https://blog.csdn.net/l540675759/article/details/73733763">https://blog.csdn.net/l540675759/article/details/73733763</a></p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>上述Object这类对象就具有强引用，属于不可回收的资源，垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。</p><p>值得注意的是：如果想中断或者回收强引用对象，可以显式地将引用赋值为null，这样的话JVM就会在合适的时间，进行垃圾回收。</p><h4 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h4><p>如果一个对象只具有软引用，那么它的性质属于可有可无的那种。如果此时内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><p>软引用可以和引用队列一起使用。</p><p>当不再有强引用引用该对象，此时只有软引用引用该对象时，该对象会在内存不足且垃圾回收的情况下被回收。</p><p><img src="/../assets/JVM/image-20230920121439505.png" alt="image-20230920121439505"></p><p>而软引用本身也是个被强引用所引用的对象</p><p><img src="/../assets/JVM/image-20230920121310033.png" alt="image-20230920121310033"></p><hr><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示软引用</span></span><br><span class="line"><span class="comment"> * -Xmx20m -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_18</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">_4MB</span> <span class="operator">=</span> <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/*        List&lt;byte[]&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 15; i++) &#123;</span></span><br><span class="line"><span class="comment">            list.add(new byte[_4MB]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">soft</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SoftReference&lt;<span class="type">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            SoftReference&lt;<span class="type">byte</span>[]&gt; ref = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">byte</span>[_4MB]);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环结束：&quot;</span> + list.size());</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="type">byte</span>[]&gt; ref : list) &#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="弱引用-WeakReference"><a href="#弱引用-WeakReference" class="headerlink" title="弱引用(WeakReference)"></a>弱引用(WeakReference)</h4><p>如果一个对象具有弱引用，那其的性质也是可有可无的状态。</p><p>而弱引用和软引用的区别在于：弱引用的对象拥有更短的生命周期，只要垃圾回收器扫描到它，不管内存空间充足与否，都会回收它的内存。</p><p>弱引用也可以和引用队列一起使用。</p><h4 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h4><p>虚引用和前面的软引用、弱引用不同，它并不影响对象的生命周期。如果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。</p><p>注意：虚引用必须和引用队列关联使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之关联的引用队列中。</p><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><h4 id="引用总结"><a href="#引用总结" class="headerlink" title="引用总结"></a>引用总结</h4><p><img src="/../assets/JVM/image-20230920113244283.png" alt="image-20230920113244283"></p><hr><p><img src="/../assets/JVM/image-20230920114442159.png" alt="image-20230920114442159"></p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除（Mark-Sweep）"><a href="#标记清除（Mark-Sweep）" class="headerlink" title="标记清除（Mark Sweep）"></a>标记清除（Mark Sweep）</h3><ul><li>速度较快</li><li>会产生内存碎片</li></ul><p><img src="/../assets/JVM/image-20230920205051128.png" alt="标记清除"></p><h3 id="标记整理（Mark-Compact）"><a href="#标记整理（Mark-Compact）" class="headerlink" title="标记整理（Mark Compact）"></a>标记整理（Mark Compact）</h3><ul><li>速度慢</li><li>没有内存碎片</li></ul><p><img src="/../assets/JVM/image-20230920205412941.png" alt="标记整理"></p><h3 id="复制（Copy）"><a href="#复制（Copy）" class="headerlink" title="复制（Copy）"></a>复制（Copy）</h3><ul><li>没有内存碎片</li><li>需要占用双倍内存空间</li></ul><p><img src="/../assets/JVM/image-20230920205522420.png" alt="复制"></p><h2 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h2><p><img src="/../assets/JVM/image-20230920205716241.png" alt="分代垃圾回收"></p><ul><li>对象首先分配在伊甸园区域</li><li>新生代空间不足时，触发 minor gc，伊甸园和 from 存活的对象使用 copy 复制到 to 中，存活的对象年龄加 1并且交换 from to</li><li>minor gc 会引发 stop the world，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行 </li><li>当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（4bit）</li><li>当老年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW（ stop the world）的时间更长</li></ul><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><ul><li><p>当一次申请的内存大过伊甸园，大过幸存区时，且老年代有足够内存空间时，可以直接放入老年代</p></li><li><p>一个线程内出现了内存溢出时不会影响别的进程的执行</p></li></ul><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p>文章参考自：<a href="https://cloud.tencent.com/developer/article/1592943">https://cloud.tencent.com/developer/article/1592943</a></p><p>如果两个收集器之间存在连线，就说明它们可以搭配使用。</p><p><img src="/../assets/JVM/image-20230925224500405.png" alt="image-20230925224500405"></p><h3 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h3><h4 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h4><ul><li>单线程，简单高效</li><li>堆内存较小，适合个人电脑</li><li>在大型应用程序中可能会出现停顿时间过长的问题</li></ul><hr><p>Serial新生代：复制                       SerialOld老年代：标记整理</p><p><img src="/../assets/JVM/image-20230921214603737.png" alt="image-20230921214603737"></p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><p>ParNew收集器就是Serial收集器的多线程版本，它也是一个新生代收集器。除了使用多线程进行垃圾收集外，其余行为包括Serial收集器可用的所有控制参数、收集算法（复制算法）、Stop The World、对象分配规则、回收策略等与Serial收集器完全相同，两者共用了相当多的代码。</p><p>ParNew收集器的工作过程如下图（老年代采用Serial Old收集器）：</p><p><img src="/../assets/JVM/image-20230925224749631.png" alt="image-20230925224749631"></p><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h4><ul><li>多线程</li><li>堆内存较大，多核 cpu</li><li>让单位时间内，STW 的时间最短 0.2 0.2 &#x3D; 0.4，垃圾回收时间占比最低，这样就称吞吐量高</li></ul><ul><li>JDK 1.8 默认采用的就是这种垃圾回收器</li><li>不设置参数时，垃圾回收线程数默认就是cpu的个数</li></ul><p>Parallel Scavenge收集器也是一个并行的多线程新生代收集器，它也使用复制算法。Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标是达到一个可控制的吞吐量（Throughput）。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p><img src="/../assets/JVM/image-20230921215041545.png" alt="image-20230921215041545"></p><h3 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h3><h4 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4><p>Serial Old 是 Serial收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”（Mark-Compact）算法。</p><p>此收集器的主要意义也是在于给Client模式下的虚拟机使用。如果在Server模式下，它还有两大用途：</p><ul><li>在JDK1.5 以及之前版本（Parallel Old诞生以前）中与Parallel Scavenge收集器搭配使用。</li><li>作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li></ul><blockquote><p>它的工作流程与Serial收集器相同</p></blockquote><h4 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h4><p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p><hr><p>Parallel新生代：复制            ParallelOld老年代：标记整理</p><p><img src="/../assets/JVM/image-20230921215041545.png" alt="image-20230921215041545"></p><h4 id="响应时间优先（CMS-–-Concurrent-Mark-Sweep）⭐⭐⭐"><a href="#响应时间优先（CMS-–-Concurrent-Mark-Sweep）⭐⭐⭐" class="headerlink" title="响应时间优先（CMS –&gt; Concurrent Mark Sweep）⭐⭐⭐"></a>响应时间优先（CMS –&gt; Concurrent Mark Sweep）⭐⭐⭐</h4><ul><li>多线程</li><li>堆内存较大，多核 cpu</li><li>尽可能让单次 STW 的时间最短   0.1 0.1 0.1 0.1 0.1 &#x3D; 0.5</li></ul><hr><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，它非常符合那些集中在互联网站或者B&#x2F;S系统的服务端上的Java应用，这些应用都非常重视服务的响应速度。从名字上（“Mark Sweep”）就可以看出它是基于“标记-清除”算法实现的。</p><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>CMS收集器工作的整个流程分为以下4个步骤：</p><ul><li>初始标记（CMS initial mark）：仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li><li>并发标记（CMS concurrent mark）：进行GC Roots Tracing的过程，在整个过程中耗时最长。</li><li>重新标记（CMS remark）：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。此阶段也需要“Stop The World”。</li><li>并发清除（CMS concurrent sweep）</li></ul><p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作。</p><p>所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。通过下图可以比较清楚地看到CMS收集器的运作步骤中并发和需要停顿的时间：</p><p><img src="/../assets/JVM/image-20230921220451317.png" alt="image-20230921220451317"></p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li><strong>优点</strong></li></ol><p>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：并发收集、低停顿，因此CMS收集器也被称为并发低停顿收集器（Concurrent Low Pause Collector）。</p><ol start="2"><li><strong>缺点</strong></li></ol><ul><li>对CPU资源非常敏感 其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。</li><li>CMS默认启动的回收线程数是（CPU数量+3）&#x2F;4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个时（比如2个），CMS对用户程序的影响就可能变得很大，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，其实也让人无法接受。</li><li>无法处理浮动垃圾（Floating Garbage） 可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</li><li>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。这一部分垃圾出现在标记过程之后，CMS无法再当次收集中处理掉它们，只好留待下一次GC时再清理掉。</li><li>这一部分垃圾就被称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。</li><li>标记-清除算法导致的空间碎片 CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</li><li>空间碎片过多时，将会给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象。</li></ul><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><h4 id="G1特点"><a href="#G1特点" class="headerlink" title="G1特点"></a>G1特点</h4><ul><li><code>并行与并发</code>： G1 能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短“Stop The World”停顿时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li><li><code>分代收集</code> ：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同方式去处理新创建的对象和已存活一段时间、熬过多次GC的旧对象来获取更好的收集效果。</li><li><code>空间整合</code> ：G1从整体来看是基于“标记-整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的。这意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。此特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li><li><code>可预测的停顿</code>： 这是G1相对CMS的一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了降低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。</li></ul><h4 id="横跨整个堆内存"><a href="#横跨整个堆内存" class="headerlink" title="横跨整个堆内存"></a>横跨整个堆内存</h4><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老生代，而G1不再是这样。</p><p>G1在使用时，Java堆的内存布局与其他收集器有很大区别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，而都是一部分Region（不需要连续）的集合。</p><h4 id="建立可预测的时间模型"><a href="#建立可预测的时间模型" class="headerlink" title="建立可预测的时间模型"></a>建立可预测的时间模型</h4><p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p><h4 id="避免全堆扫描——Remembered-Set"><a href="#避免全堆扫描——Remembered-Set" class="headerlink" title="避免全堆扫描——Remembered Set"></a>避免全堆扫描——Remembered Set</h4><p>G1把Java堆分为多个Region，就是“化整为零”。但是Region不可能是孤立的，一个对象分配在某个Region中，可以与整个Java堆任意的对象发生引用关系。在做可达性分析确定对象是否存活的时候，需要扫描整个Java堆才能保证准确性，这显然是对GC效率的极大伤害。</p><p>为了避免全堆扫描的发生，虚拟机为G1中每个Region维护了一个与之对应的Remembered Set。虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier暂时中断写操作。</p><p>检查Reference引用的对象是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的Remembered Set之中。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏。</p><h4 id="G1运行流程"><a href="#G1运行流程" class="headerlink" title="G1运行流程"></a>G1运行流程</h4><ul><li><code>初始标记</code>： 仅仅只是标记一下GC Roots 能直接关联到的对象，并且修改TAMS（Nest Top Mark Start）的值，让下一阶段用户程序并发运行时，能正确的在Region中创建对象，此阶段需要<strong>停顿线程</strong>，但耗时很短。</li><li><code>并发标记</code>： 从GC Root 开始对堆中对象进行可达性分析，找到存活对象，此阶段耗时较长，但可与用户程序<strong>并发执行</strong>。</li><li><code>最终标记</code>：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要<strong>停顿线程，但是可并行执行</strong>。</li><li><code>筛选回收</code>： 首先对各个Region中的回收价值和成本进行排序，根据用户所期望的GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p><img src="/../assets/JVM/image-20230925225550414.png" alt="image-20230925225550414"></p><h4 id="G1和CMS比较"><a href="#G1和CMS比较" class="headerlink" title="G1和CMS比较"></a>G1和CMS比较</h4><p>CMS（Concurrent Mark-Sweep）和G1（Garbage-First）是两种不同的Java垃圾回收器，它们在垃圾回收的工作流程和性能特点上有一些重要区别：</p><ol><li>工作流程：<ul><li>CMS：CMS回收器的工作流程包括初始标记、并发标记、重新标记和并发清除四个阶段。初始标记和重新标记需要”Stop The World”，而并发标记和并发清除可以与应用程序并行执行。它以尽量减少停顿时间为目标，但在初始标记和重新标记阶段仍然需要较长的停顿时间。</li><li>G1：G1回收器的工作流程包括初始标记、并发标记、最终标记和筛选回收四个阶段。初始标记和最终标记需要停顿线程，但耗时短暂。并发标记和筛选回收可以与应用程序并行执行。G1回收器以”Garbage-First”为目标，尝试在满足用户指定的停顿时间目标的情况下，尽量回收垃圾对象。</li></ul></li><li>垃圾回收方式：<ul><li>CMS：CMS回收器使用标记-清除算法。它首先标记存活对象，然后清除未标记的对象。这会导致内存碎片问题，可能需要更频繁的Full GC来解决。</li><li>G1：G1回收器使用分代垃圾回收，将堆内存划分为多个区域（Region），可以有选择性地回收这些区域。G1回收器会尽量避免内存碎片问题，因为它可以进行区域之间的内存拷贝来压缩碎片。</li></ul></li><li>垃圾回收停顿时间：<ul><li>CMS：CMS回收器的停顿时间相对较短，但在初始标记和重新标记阶段仍然需要较长的停顿时间，这可能在某些情况下对响应时间敏感的应用程序造成问题。</li><li>G1：G1回收器的停顿时间可控，用户可以指定目标停顿时间。这使得G1更适合需要可预测停顿时间的应用程序，可以更好地满足实时性要求。</li></ul></li></ol><p>总的来说，CMS和G1回收器都是为了减少垃圾回收引起的停顿时间而设计的，但它们的工作方式和性能特点有所不同。G1在内存碎片处理和停顿时间可控性方面提供了更好的解决方案，而CMS则在某些情况下可能更适合特定的应用程序。选择哪个回收器应根据具体应用程序的需求和性能特点来决定。</p><h2 id="垃圾回收调优"><a href="#垃圾回收调优" class="headerlink" title="垃圾回收调优"></a>垃圾回收调优</h2><p>看不懂，后续补充……….</p><h1 id="类加载与字节码技术"><a href="#类加载与字节码技术" class="headerlink" title="类加载与字节码技术"></a>类加载与字节码技术</h1><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4 magic;                  <span class="comment">// 魔数，用于标识文件类型</span></span><br><span class="line">    u2 minor_version;          <span class="comment">// Java虚拟机的次版本号</span></span><br><span class="line">    u2 major_version;          <span class="comment">// Java虚拟机的主版本号</span></span><br><span class="line">    u2 constant_pool_count;    <span class="comment">// 常量池大小</span></span><br><span class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>]; <span class="comment">// 常量池数组</span></span><br><span class="line">    u2 access_flags;           <span class="comment">// 访问标识符，用于表示类或接口的访问控制</span></span><br><span class="line">    u2 this_class;             <span class="comment">// 当前类或接口的索引</span></span><br><span class="line">    u2 super_class;            <span class="comment">// 当前类的超类(父类)索引</span></span><br><span class="line">    u2 interfaces_count;       <span class="comment">// 接口数量</span></span><br><span class="line">    u2 interfaces[interfaces_count]; <span class="comment">// 接口索引列表</span></span><br><span class="line">    u2 fields_count;           <span class="comment">// 字段数量</span></span><br><span class="line">    field_info fields[fields_count]; <span class="comment">// 字段信息数组</span></span><br><span class="line">    u2 methods_count;          <span class="comment">// 方法数量</span></span><br><span class="line">    method_info methods[methods_count]; <span class="comment">// 方法信息数组</span></span><br><span class="line">    u2 attributes_count;       <span class="comment">// 类或接口的附加属性数量</span></span><br><span class="line">    attribute_info attributes[attributes_count]; <span class="comment">// 类或接口的附加属性信息数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一段java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行编译后得到的二进制字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000</span> ca fe ba be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">34</span> <span class="number">00</span> <span class="number">23</span> 0a <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">15</span> 09</span><br><span class="line"><span class="number">0000020</span> <span class="number">00</span> <span class="number">16</span> <span class="number">00</span> <span class="number">17</span> 08 <span class="number">00</span> <span class="number">18</span> 0a <span class="number">00</span> <span class="number">19</span> <span class="number">00</span> 1a <span class="number">07</span> <span class="number">00</span> 1b <span class="number">07</span></span><br><span class="line"><span class="number">0000040</span> <span class="number">00</span> 1c <span class="number">01</span> <span class="number">00</span> <span class="number">06</span> 3c <span class="number">69</span> 6e <span class="number">69</span> <span class="number">74</span> 3e <span class="number">01</span> <span class="number">00</span> <span class="number">03</span> <span class="number">28</span> <span class="number">29</span></span><br><span class="line"><span class="number">0000060</span> <span class="number">56</span> <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">43</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">0f</span> 4c <span class="number">69</span> 6e <span class="number">65</span> 4e</span><br><span class="line"><span class="number">0000100</span> <span class="number">75</span> <span class="number">6d</span> <span class="number">62</span> <span class="number">65</span> <span class="number">72</span> <span class="number">54</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">12</span> 4c <span class="number">6f</span> <span class="number">63</span></span><br><span class="line"><span class="number">0000120</span> <span class="number">61</span> 6c <span class="number">56</span> <span class="number">61</span> <span class="number">72</span> <span class="number">69</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">54</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000140</span> <span class="number">00</span> <span class="number">04</span> <span class="number">74</span> <span class="number">68</span> <span class="number">69</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> <span class="number">1d</span> 4c <span class="number">63</span> 6e <span class="number">2f</span> <span class="number">69</span> <span class="number">74</span> <span class="number">63</span></span><br><span class="line"><span class="number">0000160</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">2f</span> 6a <span class="number">76</span> <span class="number">6d</span> <span class="number">2f</span> <span class="number">74</span> <span class="number">35</span> <span class="number">2f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c <span class="number">6f</span></span><br><span class="line"><span class="number">0000200</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">6d</span> <span class="number">61</span> <span class="number">69</span> 6e <span class="number">01</span> <span class="number">00</span> <span class="number">16</span></span><br><span class="line"><span class="number">0000220</span> <span class="number">28</span> 5b 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span></span><br><span class="line"><span class="number">0000240</span> <span class="number">69</span> 6e <span class="number">67</span> 3b <span class="number">29</span> <span class="number">56</span> <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">61</span> <span class="number">72</span> <span class="number">67</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> <span class="number">13</span></span><br><span class="line"><span class="number">0000260</span> 5b 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">69</span></span><br><span class="line"><span class="number">0000300</span> 6e <span class="number">67</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> <span class="number">4d</span> <span class="number">65</span> <span class="number">74</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">50</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span></span><br><span class="line"><span class="number">0000320</span> <span class="number">6d</span> <span class="number">65</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> 0a <span class="number">53</span> <span class="number">6f</span> <span class="number">75</span> <span class="number">72</span> <span class="number">63</span> <span class="number">65</span> <span class="number">46</span></span><br><span class="line"><span class="number">0000340</span> <span class="number">69</span> 6c <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">0f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c <span class="number">6f</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span></span><br><span class="line"><span class="number">0000360</span> 2e 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> 0c <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 08 <span class="number">07</span> <span class="number">00</span> <span class="number">1d</span> 0c <span class="number">00</span> 1e</span><br><span class="line"><span class="number">0000400</span> <span class="number">00</span> <span class="number">1f</span> <span class="number">01</span> <span class="number">00</span> 0b <span class="number">68</span> <span class="number">65</span> 6c 6c <span class="number">6f</span> <span class="number">20</span> <span class="number">77</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span></span><br><span class="line"><span class="number">0000420</span> <span class="number">07</span> <span class="number">00</span> <span class="number">20</span> 0c <span class="number">00</span> <span class="number">21</span> <span class="number">00</span> <span class="number">22</span> <span class="number">01</span> <span class="number">00</span> 1b <span class="number">63</span> 6e <span class="number">2f</span> <span class="number">69</span> <span class="number">74</span></span><br><span class="line"><span class="number">0000440</span> <span class="number">63</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">2f</span> 6a <span class="number">76</span> <span class="number">6d</span> <span class="number">2f</span> <span class="number">74</span> <span class="number">35</span> <span class="number">2f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c</span><br><span class="line"><span class="number">0000460</span> <span class="number">6f</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span></span><br><span class="line"><span class="number">0000500</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">4f</span> <span class="number">62</span> 6a <span class="number">65</span> <span class="number">63</span> <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span></span><br><span class="line"><span class="number">0000520</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">79</span> <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">6d</span> <span class="number">01</span> <span class="number">00</span> <span class="number">03</span> <span class="number">6f</span></span><br><span class="line"><span class="number">0000540</span> <span class="number">75</span> <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">15</span> 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> <span class="number">69</span> <span class="number">6f</span> <span class="number">2f</span> <span class="number">50</span> <span class="number">72</span></span><br><span class="line"><span class="number">0000560</span> <span class="number">69</span> 6e <span class="number">74</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">65</span> <span class="number">61</span> <span class="number">6d</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">13</span> 6a <span class="number">61</span> <span class="number">76</span></span><br><span class="line"><span class="number">0000600</span> <span class="number">61</span> <span class="number">2f</span> <span class="number">69</span> <span class="number">6f</span> <span class="number">2f</span> <span class="number">50</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">74</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">65</span> <span class="number">61</span> <span class="number">6d</span></span><br><span class="line"><span class="number">0000620</span> <span class="number">01</span> <span class="number">00</span> <span class="number">07</span> <span class="number">70</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">74</span> 6c 6e <span class="number">01</span> <span class="number">00</span> <span class="number">15</span> <span class="number">28</span> 4c 6a</span><br><span class="line"><span class="number">0000640</span> <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">67</span> 3b</span><br><span class="line"><span class="number">0000660</span> <span class="number">29</span> <span class="number">56</span> <span class="number">00</span> <span class="number">21</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000700</span> <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 08 <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">2f</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000720</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> 2a b7 <span class="number">00</span> <span class="number">01</span> b1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 0a <span class="number">00</span></span><br><span class="line"><span class="number">0000740</span> <span class="number">00</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">00</span> 0b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0c <span class="number">00</span></span><br><span class="line"><span class="number">0000760</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> 0c <span class="number">00</span> <span class="number">0d</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 09 <span class="number">00</span> 0e <span class="number">00</span></span><br><span class="line"><span class="number">0001000</span> <span class="number">0f</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">37</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001020</span> 09 b2 <span class="number">00</span> <span class="number">02</span> <span class="number">12</span> <span class="number">03</span> b6 <span class="number">00</span> <span class="number">04</span> b1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 0a</span><br><span class="line"><span class="number">0001040</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0a <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> 08 <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 0b</span><br><span class="line"><span class="number">0001060</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0c <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001100</span> <span class="number">00</span> <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">13</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001120</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">14</span></span><br></pre></td></tr></table></figure><h2 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>在上面这个helloworld中有两个方法，对应着两个字节码指令</p><ul><li><p>一个是<code>public cn.itcast.jvm.t5.HelloWorld();</code>构造方法的字节码指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2a b7 00 01 b1</span><br></pre></td></tr></table></figure><ol><li>2a &#x3D;&gt; aload_0 加载 slot 0 的局部变量，即 this，做为下面的 invokespecial 构造方法调用的参数</li><li>b7 &#x3D;&gt; invokespecial 预备调用构造方法，哪个方法呢？</li><li>00 01 引用常量池中 #1 项，即<code>Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code></li><li>b1 表示返回</li></ol></li><li><p>另一个是<code>public static void main(java.lang.String[]);</code>主方法的字节码指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b2 00 02 12 03 b6 00 04 b1</span><br></pre></td></tr></table></figure><ol><li>b2 &#x3D;&gt; getstatic 用来加载静态变量，哪个静态变量呢？</li><li>00 02 引用常量池中 #2 项，即<code>Field java/lang/System.out:Ljava/io/PrintStream;</code></li><li>12 &#x3D;&gt; ldc 加载参数，哪个参数呢？</li><li>03 引用常量池中 #3 项，即 <code>String hello world</code></li><li>b6 &#x3D;&gt; invokevirtual 预备调用成员方法，哪个方法呢？</li><li>00 04 引用常量池中 #4 项，即<code>Method java/io/PrintStream.println:(Ljava/lang/String;)V</code></li><li>b1 表示返回</li></ol></li></ul><h3 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h3><p>可以使用javap工具来反编译class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v HelloWorld.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/HelloWorld.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">5</span>; size <span class="number">551</span> bytes</span><br><span class="line">  MD5 checksum 1389d939c65ba536eb81d1a5c61d99be</span><br><span class="line">  Compiled from <span class="string">&quot;HelloWorld.java&quot;</span>              </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.HelloWorld               </span><br><span class="line">  minor version: <span class="number">0</span>                             </span><br><span class="line">  major version: <span class="number">52</span>                            </span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">6.</span>#<span class="number">20</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">21.</span>#<span class="number">22</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = String             #<span class="number">23</span>            <span class="comment">// hello world</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">24.</span>#<span class="number">25</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">26</span>            <span class="comment">// com/demo/HelloWorld</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">27</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">7</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">8</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">9</span> = Utf8               Code</span><br><span class="line">  #<span class="number">10</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">12</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">13</span> = Utf8               Lcom/demo/HelloWorld;</span><br><span class="line">  #<span class="number">14</span> = Utf8               main</span><br><span class="line">  #<span class="number">15</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">16</span> = Utf8               args</span><br><span class="line">  #<span class="number">17</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">18</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">19</span> = Utf8               HelloWorld.java</span><br><span class="line">  #<span class="number">20</span> = NameAndType        #<span class="number">7</span>:#<span class="number">8</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">21</span> = Class              #<span class="number">28</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">29</span>:#<span class="number">30</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">23</span> = Utf8               hello world</span><br><span class="line">  #<span class="number">24</span> = Class              #<span class="number">31</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">32</span>:#<span class="number">33</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">26</span> = Utf8               com/demo/HelloWorld</span><br><span class="line">  #<span class="number">27</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">28</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">29</span> = Utf8               out</span><br><span class="line">  #<span class="number">30</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">31</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">32</span> = Utf8               println</span><br><span class="line">  #<span class="number">33</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String hello world</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;HelloWorld.java&quot;</span></span><br></pre></td></tr></table></figure><h3 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h3><ol><li>原始java代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Short.MAX_VALUE + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">       System.out.println(c); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编译后的字节码文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v Demo_20.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/Demo_20.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">7</span>; size <span class="number">601</span> bytes       </span><br><span class="line">  MD5 checksum 0f9e41fb2a7334a69c89d2661540f4f1</span><br><span class="line">  Compiled from <span class="string">&quot;Demo_20.java&quot;</span>                 </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.Demo_20                  </span><br><span class="line">  minor version: <span class="number">0</span>                             </span><br><span class="line">  major version: <span class="number">52</span>                            </span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER                 </span><br><span class="line">Constant pool:                                 </span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">7.</span>#<span class="number">25</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V             </span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">26</span>            <span class="comment">// java/lang/Short                           </span></span><br><span class="line">   #<span class="number">3</span> = Integer            <span class="number">32768</span>                                                       </span><br><span class="line">   #<span class="number">4</span> = Fieldref           #<span class="number">27.</span>#<span class="number">28</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">5</span> = Methodref          #<span class="number">29.</span>#<span class="number">30</span>        <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">31</span>            <span class="comment">// com/demo/Demo_20</span></span><br><span class="line">   #<span class="number">7</span> = Class              #<span class="number">32</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">8</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">9</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">10</span> = Utf8               Code</span><br><span class="line">  #<span class="number">11</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">12</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">13</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               Lcom/demo/Demo_20;</span><br><span class="line">  #<span class="number">15</span> = Utf8               main</span><br><span class="line">  #<span class="number">16</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">17</span> = Utf8               args</span><br><span class="line">  #<span class="number">18</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">19</span> = Utf8               a</span><br><span class="line">  #<span class="number">20</span> = Utf8               I</span><br><span class="line">  #<span class="number">21</span> = Utf8               b</span><br><span class="line">  #<span class="number">22</span> = Utf8               c</span><br><span class="line">  #<span class="number">23</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">24</span> = Utf8               Demo_20.java</span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">8</span>:#<span class="number">9</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">26</span> = Utf8               java/lang/Short</span><br><span class="line">  #<span class="number">27</span> = Class              #<span class="number">33</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">28</span> = NameAndType        #<span class="number">34</span>:#<span class="number">35</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">29</span> = Class              #<span class="number">36</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">37</span>:#<span class="number">38</span>        <span class="comment">// println:(I)V</span></span><br><span class="line">  #<span class="number">31</span> = Utf8               com/demo/Demo_20</span><br><span class="line">  #<span class="number">32</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">33</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">34</span> = Utf8               out</span><br><span class="line">  #<span class="number">35</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">36</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">37</span> = Utf8               println</span><br><span class="line">  #<span class="number">38</span> = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.Demo_20();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcom/demo/Demo_20;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// int 32768</span></span><br><span class="line">         <span class="number">5</span>: istore_2</span><br><span class="line">         <span class="number">6</span>: iload_1</span><br><span class="line">         <span class="number">7</span>: iload_2</span><br><span class="line">         <span class="number">8</span>: iadd</span><br><span class="line">         <span class="number">9</span>: istore_3</span><br><span class="line">        <span class="number">10</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">13</span>: iload_3</span><br><span class="line">        <span class="number">14</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">17</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">18</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">15</span>     <span class="number">1</span>     a   I</span><br><span class="line">            <span class="number">6</span>      <span class="number">12</span>     <span class="number">2</span>     b   I</span><br><span class="line">           <span class="number">10</span>       <span class="number">8</span>     <span class="number">3</span>     c   I</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Demo_20.java&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>常量池载入运行时常量池</li></ol><p><img src="/../assets/JVM/image-20231010162136501.png" alt="image-20231010162136501"></p><ol start="4"><li>方法字节码载入方法区</li></ol><p><img src="/../assets/JVM/image-20231010162213690.png" alt="image-20231010162213690"></p><ol start="5"><li>main 线程开始运行，分配栈帧内存</li></ol><p>（stack&#x3D;2，locals&#x3D;4）：操作数栈深度为2，局部变量表数量为4</p><p><img src="/../assets/JVM/image-20231010162352755.png" alt="image-20231010162352755"></p><ol start="6"><li>执行引擎开始执行字节码</li></ol><ul><li>bipush 10<ul><li>将一个 byte 压入操作数栈（其长度会补齐 4 个字节），类似的指令还有 </li><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（分两次压入，因为 long 是 8 个字节）</li><li><strong>这里小的数字都是和字节码指令存在一起，超过 short 范围的数字存入了常量池</strong></li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163015751.png" alt="image-20231010163015751"></p><ul><li>istore_1<ul><li>将操作数栈顶数据弹出，存入局部变量表的 slot 1</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163105787.png" alt="image-20231010163105787"></p><ul><li>ldc #3<ul><li>从常量池加载 #3 数据到操作数栈</li><li>注意 Short.MAX_VALUE 是 32767，所以 32768 &#x3D; Short.MAX_VALUE + 1 实际是在编译期间计算<br>好的</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163201925.png" alt="image-20231010163201925"></p><ul><li>istore_2</li></ul><p><img src="/../assets/JVM/image-20231010163243864.png" alt="image-20231010163243864"></p><ul><li>iload_1</li></ul><p><img src="/../assets/JVM/image-20231010163355144.png" alt="image-20231010163355144"></p><ul><li>iload_2</li></ul><p><img src="/../assets/JVM/image-20231010163433368.png" alt="image-20231010163433368"></p><ul><li>iadd</li></ul><p><img src="/../assets/JVM/image-20231010163623499.png" alt="image-20231010163623499"></p><ul><li>istore_3</li></ul><p><img src="/../assets/JVM/image-20231010164657704.png" alt="image-20231010164657704"></p><ul><li>getstatic #4</li></ul><p><img src="/../assets/JVM/image-20231010165829176.png" alt="image-20231010165829176"></p><p><img src="/../assets/JVM/image-20231010165852971.png" alt="image-20231010165852971"></p><ul><li>iload_3</li></ul><p><img src="/../assets/JVM/image-20231010170007711.png" alt="image-20231010170007711"></p><ul><li>invokevirtual #5<ul><li>找到常量池 #5 项</li><li>定位到方法区   java&#x2F;io&#x2F;PrintStream.println:(I)V 方法 </li><li>生成新的栈帧（分配 locals、stack等）</li><li>传递参数，执行新栈帧中的字节码</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010170131429.png" alt="image-20231010170131429"></p><ul><li><p>执行完毕，弹出栈帧 </p></li><li><p>清除 main 操作数栈内容</p></li></ul><p><img src="/../assets/JVM/image-20231010170243175.png" alt="image-20231010170243175"></p><ul><li>return<ul><li>完成 main 方法调用，弹出 main 栈帧 </li><li>程序结束</li></ul></li></ul><h3 id="例子：从字节码角度分析-a"><a href="#例子：从字节码角度分析-a" class="headerlink" title="例子：从字节码角度分析 a++"></a>例子：从字节码角度分析 a++</h3><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++ + ++a + a--; </span><br><span class="line">       System.out.println(a); <span class="comment">//11</span></span><br><span class="line">       System.out.println(b); <span class="comment">//34</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v Demo_21.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/Demo_21.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">7</span>; size <span class="number">576</span> bytes</span><br><span class="line">  MD5 checksum 5bc962752b10ca4b57350ca9814ec5b0</span><br><span class="line">  Compiled from <span class="string">&quot;Demo_21.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.Demo_21</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">5.</span>#<span class="number">22</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">23.</span>#<span class="number">24</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = Methodref          #<span class="number">25.</span>#<span class="number">26</span>        <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">27</span>            <span class="comment">// com/demo/Demo_21</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">28</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">6</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">7</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">8</span> = Utf8               Code</span><br><span class="line">   #<span class="number">9</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">10</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">12</span> = Utf8               Lcom/demo/Demo_21;</span><br><span class="line">  #<span class="number">13</span> = Utf8               main</span><br><span class="line">  #<span class="number">14</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">15</span> = Utf8               args</span><br><span class="line">  #<span class="number">16</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">17</span> = Utf8               a</span><br><span class="line">  #<span class="number">18</span> = Utf8               I</span><br><span class="line">  #<span class="number">19</span> = Utf8               b</span><br><span class="line">  #<span class="number">20</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">21</span> = Utf8               Demo_21.java</span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">6</span>:#<span class="number">7</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">23</span> = Class              #<span class="number">29</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">24</span> = NameAndType        #<span class="number">30</span>:#<span class="number">31</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">25</span> = Class              #<span class="number">32</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">26</span> = NameAndType        #<span class="number">33</span>:#<span class="number">34</span>        <span class="comment">// println:(I)V</span></span><br><span class="line">  #<span class="number">27</span> = Utf8               com/demo/Demo_21</span><br><span class="line">  #<span class="number">28</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">29</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">30</span> = Utf8               out</span><br><span class="line">  #<span class="number">31</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">32</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">33</span> = Utf8               println</span><br><span class="line">  #<span class="number">34</span> = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.Demo_21();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcom/demo/Demo_21;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: iload_1</span><br><span class="line">         <span class="number">4</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">         <span class="number">7</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">10</span>: iload_1</span><br><span class="line">        <span class="number">11</span>: iadd</span><br><span class="line">        <span class="number">12</span>: iload_1</span><br><span class="line">        <span class="number">13</span>: iinc          <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">        <span class="number">16</span>: iadd</span><br><span class="line">        <span class="number">17</span>: istore_2</span><br><span class="line">        <span class="number">18</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">21</span>: iload_1</span><br><span class="line">        <span class="number">22</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">25</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">28</span>: iload_2</span><br><span class="line">        <span class="number">29</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">32</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">25</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">32</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">33</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">30</span>     <span class="number">1</span>     a   I</span><br><span class="line">           <span class="number">18</span>      <span class="number">15</span>     <span class="number">2</span>     b   I</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Demo_21.java&quot;</span></span><br></pre></td></tr></table></figure><ul><li>分析⭐⭐⭐：<ul><li>注意 iinc 指令是直接在局部变量 slot 上进行运算 </li><li>a++ 和 ++a 的区别是先执行 iload 还是 先执行 iinc</li></ul></li></ul><h3 id="条件判断指令"><a href="#条件判断指令" class="headerlink" title="条件判断指令"></a>条件判断指令</h3><table><thead><tr><th align="center">指令</th><th align="center">助记符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0x99</td><td align="center">ifeq</td><td align="center">判断是否 &#x3D;&#x3D; 0</td></tr><tr><td align="center">0x9a</td><td align="center">ifne</td><td align="center">判断是否 !&#x3D; 0</td></tr><tr><td align="center">0x9b</td><td align="center">iflt</td><td align="center">判断是否 &lt; 0</td></tr><tr><td align="center">0x9c</td><td align="center">ifge</td><td align="center">判断是否 &gt;&#x3D; 0</td></tr><tr><td align="center">0x9d</td><td align="center">ifgt</td><td align="center">判断是否 &gt; 0</td></tr><tr><td align="center">0x9e</td><td align="center">ifle</td><td align="center">判断是否 &lt;&#x3D; 0</td></tr><tr><td align="center">0x9f</td><td align="center">if_icmpeq</td><td align="center">两个int是否 &#x3D;&#x3D;</td></tr><tr><td align="center">0xa0</td><td align="center">if_icmpne</td><td align="center">两个int是否 !&#x3D;</td></tr><tr><td align="center">0xa1</td><td align="center">if_icmplt</td><td align="center">两个int是否 &lt;</td></tr><tr><td align="center">0xa2</td><td align="center">if_icmpge</td><td align="center">两个int是否 &gt;&#x3D;</td></tr><tr><td align="center">0xa3</td><td align="center">if_icmpgt</td><td align="center">两个int是否 &gt;</td></tr><tr><td align="center">0xa4</td><td align="center">if_icmple</td><td align="center">两个int是否 &lt;&#x3D;</td></tr><tr><td align="center">0xa5</td><td align="center">if_acmpeq</td><td align="center">两个引用是否 &#x3D;&#x3D;</td></tr><tr><td align="center">0xa6</td><td align="center">if_acmpne</td><td align="center">两个引用是否 !&#x3D;</td></tr><tr><td align="center">0xc6</td><td align="center">ifnull</td><td align="center">判断是否 &#x3D;&#x3D; null</td></tr><tr><td align="center">0xc7</td><td align="center">ifnonnull</td><td align="center">判断是否 !&#x3D; null</td></tr></tbody></table><ul><li>原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(a == <span class="number">0</span>) &#123; </span><br><span class="line">           a = <span class="number">10</span>; </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           a = <span class="number">20</span>; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iconst_0</span><br><span class="line"><span class="number">1</span>: istore_1</span><br><span class="line"><span class="number">2</span>: iload_1      </span><br><span class="line"><span class="number">3</span>: ifne          <span class="number">12</span> </span><br><span class="line"><span class="number">6</span>: bipush        <span class="number">10</span> </span><br><span class="line"><span class="number">8</span>: istore_1</span><br><span class="line"><span class="number">9</span>: goto         <span class="number">15</span> </span><br><span class="line"><span class="number">12</span>: bipush       <span class="number">20</span> </span><br><span class="line"><span class="number">14</span>: istore_1</span><br><span class="line"><span class="number">15</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: iconst_0                <span class="comment">// 将整数常量值0（int类型）压入操作数栈中。</span></span><br><span class="line"> <span class="number">1</span>: istore_1                <span class="comment">// 将栈顶数据存入局部变量表 slot 1</span></span><br><span class="line"> <span class="number">2</span>: iload_1                 <span class="comment">// 将局部变量表slot 1的值压入操作数栈</span></span><br><span class="line"> <span class="number">3</span>: bipush        <span class="number">10</span>        <span class="comment">// 将10压入操作数栈</span></span><br><span class="line"> <span class="number">5</span>: if_icmpge     <span class="number">14</span>        <span class="comment">// 判断 i &gt;= 10 ，成立则跳转到14行，不成立则执行下一行</span></span><br><span class="line"> <span class="number">8</span>: iinc          <span class="number">1</span>, <span class="number">1</span>      <span class="comment">// i自增</span></span><br><span class="line"><span class="number">11</span>: goto          <span class="number">2</span>         <span class="comment">// 跳转到第2行</span></span><br><span class="line"><span class="number">14</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="练习-判断结果"><a href="#练习-判断结果" class="headerlink" title="练习-判断结果"></a>练习-判断结果</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            x = x++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最终x的结果是0<ul><li>执行<code>x++</code>时，先执行<code>iload_x</code>，将0加载到操作数栈中</li><li>然后执行iinc，将局部变量表中的x自增，此时局部变量表中的<code>x = 1</code></li><li>此时又执行了一个赋值操作，<code>istore_x</code>，将操作数栈中的0，重新赋给了局部变量表中的x，导致x为0</li></ul></li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="V"><a href="#V" class="headerlink" title="&lt;cinit&gt;()V"></a><code>&lt;cinit&gt;()V</code></h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_27</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line"> <span class="number">2</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"> <span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line"> <span class="number">7</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"><span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line"><span class="number">12</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"><span class="number">15</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>编译器会按照从上至下的顺序，收集所有的static静态代码块和静态成员赋值的代码，合并成一个特殊的方法<code>&lt;cinit&gt;()V</code></li><li><code>&lt;cinit&gt;()V</code>方法会在类加载的初始化阶段被调用</li></ul><h4 id="V-1"><a href="#V-1" class="headerlink" title=" &lt;init&gt;()V"></a><code> &lt;init&gt;()V</code></h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_28</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;s1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo_28</span><span class="params">(String a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo_28</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_28</span>(<span class="string">&quot;s3&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(demo.a);</span><br><span class="line">        System.out.println(demo.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: aload_0</span><br><span class="line"> <span class="number">1</span>: invokespecial #<span class="number">1</span>      <span class="comment">// super.&lt;init&gt;()V</span></span><br><span class="line"> <span class="number">4</span>: aload_0</span><br><span class="line"> <span class="number">5</span>: ldc #<span class="number">2</span>                <span class="comment">// &lt;- &quot;s1&quot;</span></span><br><span class="line"> <span class="number">7</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a</span></span><br><span class="line"><span class="number">10</span>: aload_0</span><br><span class="line"><span class="number">11</span>: bipush <span class="number">20</span>             <span class="comment">// &lt;- 20</span></span><br><span class="line"><span class="number">13</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b</span></span><br><span class="line"><span class="number">16</span>: aload_0</span><br><span class="line"><span class="number">17</span>: bipush <span class="number">10</span>             <span class="comment">// &lt;- 10</span></span><br><span class="line"><span class="number">19</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b</span></span><br><span class="line"><span class="number">22</span>: aload_0</span><br><span class="line"><span class="number">23</span>: ldc #<span class="number">5</span>                <span class="comment">// &lt;- &quot;s2&quot;</span></span><br><span class="line"><span class="number">25</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a</span></span><br><span class="line"><span class="number">28</span>: aload_0               <span class="comment">// ------------------------------</span></span><br><span class="line"><span class="number">29</span>: aload_1               <span class="comment">// &lt;- slot 1(a) &quot;s3&quot;            |</span></span><br><span class="line"><span class="number">30</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a                    |</span></span><br><span class="line"><span class="number">33</span>: aload_0                                               |</span><br><span class="line"><span class="number">34</span>: iload_2               <span class="comment">// &lt;- slot 2(b) 30              |</span></span><br><span class="line"><span class="number">35</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b --------------------</span></span><br><span class="line"><span class="number">38</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>编译器会按照从上至下的顺序，收集所有代码块和所有成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是会在最后</li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo_29</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo_29</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_29</span>();</span><br><span class="line">        demo.test1();</span><br><span class="line">        demo.test2();</span><br><span class="line">        demo.test3();</span><br><span class="line">        demo.test4();</span><br><span class="line">        Demo_29.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class com/demo/Demo_29</span></span><br><span class="line"> <span class="number">3</span>: dup</span><br><span class="line"> <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line"> <span class="number">7</span>: astore_1</span><br><span class="line"> <span class="number">8</span>: aload_1</span><br><span class="line"> <span class="number">9</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method test1:()V</span></span><br><span class="line"><span class="number">12</span>: aload_1</span><br><span class="line"><span class="number">13</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method test2:()V</span></span><br><span class="line"><span class="number">16</span>: aload_1</span><br><span class="line"><span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method test3:()V</span></span><br><span class="line"><span class="number">20</span>: aload_1</span><br><span class="line"><span class="number">21</span>: pop</span><br><span class="line"><span class="number">22</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method test4:()V</span></span><br><span class="line"><span class="number">25</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method test4:()V</span></span><br><span class="line"><span class="number">28</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>new 是创建【对象】，给对象分配堆内存，执行成功会将【对象引用】压入操作数栈</li><li>dup 是赋值操作数栈栈顶的内容，本例即为【对象引用】，为什么需要两份引用呢，一个是要配<br>合 invokespecial 调用该对象的构造方法   “<init>“:()V （会消耗掉栈顶一个引用），另一个要配合 astore_1 赋值给局部变量</li><li>最终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静<br>态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于动态绑定，即支持多态</li><li>成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li><li>比较有意思的是   d.test4();是通过【对象引用】调用一个静态方法，可以看到在调用invokestatic 之前执行了 pop 指令，把【对象引用】从操作数栈弹掉了</li></ul><blockquote><p>所以在调用静态方法的时候就不要用对象去调用了，否则会多出来20，21这两行的多余的代码</p></blockquote><h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><p>当执行 invokevirtual 指令时，</p><ol><li><strong>通过栈帧中的对象引用找到对象</strong>：<ul><li>在多态情况下，对象引用可以指向子类对象，即父类引用指向子类实例。这意味着你可以通过父类引用调用子类对象的方法。</li></ul></li><li><strong>分析对象头，找到对象的实际 Class</strong>：<ul><li>JVM需要确定实际对象的类型，这是多态的关键。通过对象的头部信息，JVM可以确定它属于哪个类。</li></ul></li><li><strong>Class 结构中有 vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了</strong>：<ul><li>vtable（虚方法表）是每个类的一部分，它包含了该类及其父类中的虚拟方法的引用。在类加载的链接阶段，JVM会构建vtable，确保正确的方法引用与类的层次结构一致。</li></ul></li><li><strong>查表得到方法的具体地址</strong>：<ul><li>当你调用一个虚拟方法时，JVM会根据对象的实际类型，查找与方法名匹配的虚方法表中的方法引用。这确保了调用的是实际对象的版本，而不是引用类型的版本。</li></ul></li><li><strong>执行方法的字节码</strong>：<ul><li>一旦找到了正确的方法引用，JVM将执行该方法的字节码。这是多态的最终体现，因为不同对象的不同实现将根据其实际类型而执行不同的行为。</li></ul></li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">20</span>;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span> </span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">12</span> </span><br><span class="line">        <span class="number">8</span>: astore_2</span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">20</span> </span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/Exception </span><br><span class="line">     LineNumberTable: ...        </span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">9</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception; </span><br><span class="line">           <span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">11</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是前闭后开的检测范围，一旦这个范围<br>内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号 </li><li>8 行的字节码指令 astore_2 是将异常对象引用存入局部变量表的 slot 2 位置</li></ul><h4 id="多个-single-catch-块的情况"><a href="#多个-single-catch-块的情况" class="headerlink" title="多个 single-catch 块的情况"></a>多个 single-catch 块的情况</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123; </span><br><span class="line">因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot <span class="number">2</span> 位置被共用</span><br><span class="line">multi-<span class="keyword">catch</span> 的情况</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123; </span><br><span class="line">           i = <span class="number">30</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; </span><br><span class="line">           i = <span class="number">40</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">50</span>;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span> </span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">26</span> </span><br><span class="line">        <span class="number">8</span>: astore_2</span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">30</span> </span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: goto          <span class="number">26</span> </span><br><span class="line">       <span class="number">15</span>: astore_2</span><br><span class="line">       <span class="number">16</span>: bipush        <span class="number">40</span> </span><br><span class="line">       <span class="number">18</span>: istore_1</span><br><span class="line">       <span class="number">19</span>: goto          <span class="number">26</span> </span><br><span class="line">       <span class="number">22</span>: astore_2</span><br><span class="line">       <span class="number">23</span>: bipush        <span class="number">50</span> </span><br><span class="line">       <span class="number">25</span>: istore_1</span><br><span class="line">       <span class="number">26</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/ArithmeticException </span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">15</span>   Class java/lang/NullPointerException </span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">22</span>   Class java/lang/Exception</span><br><span class="line">     LineNumberTable: ... </span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">9</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/ArithmeticException; </span><br><span class="line">          <span class="number">16</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NullPointerException; </span><br><span class="line">          <span class="number">23</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception;</span><br><span class="line">           <span class="number">0</span>      <span class="number">27</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">25</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><blockquote><p>因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot 2 位置被共用</p></blockquote><h4 id="multi-catch-的情况"><a href="#multi-catch-的情况" class="headerlink" title="multi-catch 的情况"></a>multi-catch 的情况</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_3</span> &#123;ﬁnally</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Method</span> <span class="variable">test</span> <span class="operator">=</span> Demo3_11_3.class.getMethod(<span class="string">&quot;test&quot;</span>); </span><br><span class="line">           test.invoke(<span class="literal">null</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | </span><br><span class="line">InvocationTargetException e) &#123;</span><br><span class="line">           e.printStackTrace(); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; </span><br><span class="line">       System.out.println(<span class="string">&quot;ok&quot;</span>); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: ldc           #<span class="number">2</span>                  </span><br><span class="line">        <span class="number">2</span>: ldc           #<span class="number">3</span>                  </span><br><span class="line">        <span class="number">4</span>: iconst_0</span><br><span class="line">        <span class="number">5</span>: anewarray     #<span class="number">4</span>                  </span><br><span class="line">        <span class="number">8</span>: invokevirtual #<span class="number">5</span>                  </span><br><span class="line">       <span class="number">11</span>: astore_1</span><br><span class="line">       <span class="number">12</span>: aload_1</span><br><span class="line">       <span class="number">13</span>: aconst_null </span><br><span class="line">       <span class="number">14</span>: iconst_0</span><br><span class="line">       <span class="number">15</span>: anewarray     #<span class="number">6</span>                  </span><br><span class="line">       <span class="number">18</span>: invokevirtual #<span class="number">7</span>                  </span><br><span class="line">       <span class="number">21</span>: pop</span><br><span class="line">       <span class="number">22</span>: goto          <span class="number">30</span> </span><br><span class="line">       <span class="number">25</span>: astore_1</span><br><span class="line">       <span class="number">26</span>: aload_1</span><br><span class="line">       <span class="number">27</span>: invokevirtual #<span class="number">11</span> <span class="comment">// e.printStackTrace:()V </span></span><br><span class="line">       <span class="number">30</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/NoSuchMethodException</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/IllegalAccessException</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/reflect/InvocationTargetException </span><br><span class="line">     LineNumberTable: ...</span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">12</span>      <span class="number">10</span>     <span class="number">1</span>  test   Ljava/lang/reflect/Method;</span><br><span class="line">          <span class="number">26</span>       <span class="number">4</span>     <span class="number">1</span>     e   Ljava/lang/ReflectiveOperationException; </span><br><span class="line">           <span class="number">0</span>      <span class="number">31</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><p>Exception table中的target都指向一个地方</p><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">20</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">           i = <span class="number">30</span>; </span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1            <span class="comment">// 0 -&gt; i</span></span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span>    <span class="comment">// try -------------------------------------- </span></span><br><span class="line">        <span class="number">4</span>: istore_1            <span class="comment">// 10 -&gt; i                                 | </span></span><br><span class="line">        <span class="number">5</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">        <span class="number">7</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">        <span class="number">8</span>: goto          <span class="number">27</span>    <span class="comment">// return ----------------------------------- </span></span><br><span class="line">       <span class="number">11</span>: astore_2            <span class="comment">// catch Exceptin -&gt; e ---------------------- </span></span><br><span class="line">       <span class="number">12</span>: bipush        <span class="number">20</span>    <span class="comment">//                                         | </span></span><br><span class="line">       <span class="number">14</span>: istore_1            <span class="comment">// 20 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">15</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">       <span class="number">17</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">18</span>: goto          <span class="number">27</span>    <span class="comment">// return ----------------------------------- </span></span><br><span class="line">       <span class="number">21</span>: astore_3            <span class="comment">// catch any -&gt; slot 3 ---------------------- </span></span><br><span class="line">       <span class="number">22</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">       <span class="number">24</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">25</span>: aload_3             <span class="comment">// &lt;- slot 3                               | </span></span><br><span class="line">       <span class="number">26</span>: athrow              <span class="comment">// throw ------------------------------------ </span></span><br><span class="line">       <span class="number">27</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">21</span>   any    <span class="comment">// 剩余的异常类型，比如 Error </span></span><br><span class="line">           <span class="number">11</span>    <span class="number">15</span>    <span class="number">21</span>   any    <span class="comment">// 剩余的异常类型，比如 Error </span></span><br><span class="line">     LineNumberTable: ...</span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">12</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception; </span><br><span class="line">           <span class="number">0</span>      <span class="number">28</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">26</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><ul><li>可以看到有3个[from, to)<ul><li>第一个<code>[2, 5)</code>是检测try块中是否有Exception异常，如果有则跳转至11行执行catch块</li><li>第二个<code>[2, 5)</code>是检测try块中是否有其他异常（非Exception异常），如果有则跳转至21行执行finally块</li><li>第三个<code>[11, 15)</code>是检测catch快中是否有其他异常，如果有则跳转至21行执行finally块</li></ul></li><li>结论：finally中的代码被复制了三分，分别放进try流程、catch流程以及catch剩余的异常类型流程</li></ul><h3 id="finally面试题"><a href="#finally面试题" class="headerlink" title="finally面试题"></a>finally面试题</h3><ul><li>源代码，结果为20</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()I</span><br><span class="line">  flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>      <span class="comment">// 将 int 10 压入栈顶</span></span><br><span class="line">       <span class="number">2</span>: istore_0              <span class="comment">// 将栈顶的 int 10 存入到局部变量 slot 0 中，并从栈顶弹出</span></span><br><span class="line">       <span class="number">3</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 int 20 压入栈顶</span></span><br><span class="line">       <span class="number">5</span>: ireturn               <span class="comment">// 返回栈顶的 int 20</span></span><br><span class="line">       <span class="number">6</span>: astore_1              <span class="comment">// 捕获任何异常</span></span><br><span class="line">       <span class="number">7</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 int 20 压入栈顶</span></span><br><span class="line">       <span class="number">9</span>: ireturn</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">0</span>     <span class="number">3</span>     <span class="number">6</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">13</span>: <span class="number">3</span></span><br><span class="line">    StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">      frame_type = <span class="number">70</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">        stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br></pre></td></tr></table></figure><ul><li><p>由于 ﬁnally 中的 ireturn 被插入了所有可能的流程，因此返回结果肯定以 ﬁnally 的为准 </p></li><li><p>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</p></li><li><p>跟上例中的 ﬁnally 相比，发现没有 athrow 了，这告诉我们：如果在 ﬁnally 中出现了 return，会<br>吞掉异常</p></li><li><p>源代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_37</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()I</span><br><span class="line">  flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>      <span class="comment">// 将 10 放入栈顶</span></span><br><span class="line">       <span class="number">2</span>: istore_0              <span class="comment">// 10 -&gt; i</span></span><br><span class="line">       <span class="number">3</span>: iload_0               <span class="comment">// &lt;- i(10)</span></span><br><span class="line">       <span class="number">4</span>: istore_1              <span class="comment">// 将 i(10) 暂存至 slot 1，目的是为了固定返回值</span></span><br><span class="line">       <span class="number">5</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 20 放入栈顶</span></span><br><span class="line">       <span class="number">7</span>: istore_0              <span class="comment">// 20 -&gt; i</span></span><br><span class="line">       <span class="number">8</span>: iload_1               <span class="comment">// 载入 slot 1 暂存的值 (10)</span></span><br><span class="line">       <span class="number">9</span>: ireturn               <span class="comment">// 返回栈顶的值</span></span><br><span class="line">      <span class="number">10</span>: astore_2</span><br><span class="line">      <span class="number">11</span>: bipush        <span class="number">20</span></span><br><span class="line">      <span class="number">13</span>: istore_0</span><br><span class="line">      <span class="number">14</span>: aload_2</span><br><span class="line">      <span class="number">15</span>: athrow</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">3</span>     <span class="number">5</span>    <span class="number">10</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">3</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">5</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">10</span></span><br><span class="line">      line <span class="number">15</span>: <span class="number">14</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">3</span>      <span class="number">13</span>     <span class="number">0</span>     i   I</span><br><span class="line">    StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">      frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">        offset_delta = <span class="number">10</span></span><br><span class="line">        locals = [ <span class="type">int</span> ]</span><br><span class="line">        stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br></pre></td></tr></table></figure><p>在上面的例子中，因为只在<code>try</code>块中有一个<code>return</code>语句，而在<code>finally</code>块中没有<code>return</code>语句，所以<code>ireturn</code>会加载<code>try</code>块中的局部变量<code>i</code>，而不是<code>finally</code>块中的局部变量<code>i</code>。如果在<code>finally</code>块中也有一个<code>return</code>语句，那么<code>ireturn</code>将加载<code>finally</code>块中的局部变量<code>i</code> 并返回它的值。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class java/lang/Object</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">7</span>: astore_1                          <span class="comment">// lock引用 -&gt; lock</span></span><br><span class="line">       <span class="number">8</span>: aload_1                           <span class="comment">// &lt;- lock （synchronized开始）</span></span><br><span class="line">       <span class="number">9</span>: dup</span><br><span class="line">      <span class="number">10</span>: astore_2                          <span class="comment">// lock引用 -&gt; slot 2</span></span><br><span class="line">      <span class="number">11</span>: monitorenter                      <span class="comment">// monitorenter(lock引用)</span></span><br><span class="line">      <span class="number">12</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">15</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String ok</span></span><br><span class="line">      <span class="number">17</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">20</span>: aload_2                           <span class="comment">// &lt;- slot 2(lock引用)</span></span><br><span class="line">      <span class="number">21</span>: monitorexit                       <span class="comment">// monitorexit(lock引用)</span></span><br><span class="line">      <span class="number">22</span>: goto          <span class="number">30</span></span><br><span class="line">      <span class="number">25</span>: astore_3                          <span class="comment">// any -&gt; slot 3</span></span><br><span class="line">      <span class="number">26</span>: aload_2                           <span class="comment">// &lt;- slot 2(lock引用)</span></span><br><span class="line">      <span class="number">27</span>: monitorexit                       <span class="comment">// monitorexit(lock引用)</span></span><br><span class="line">      <span class="number">28</span>: aload_3</span><br><span class="line">      <span class="number">29</span>: athrow</span><br><span class="line">      <span class="number">30</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">          <span class="number">12</span>    <span class="number">22</span>    <span class="number">25</span>   any</span><br><span class="line">          <span class="number">25</span>    <span class="number">28</span>    <span class="number">25</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">12</span></span><br><span class="line">      line <span class="number">8</span>: <span class="number">20</span></span><br><span class="line">      line <span class="number">9</span>: <span class="number">30</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">31</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">          <span class="number">8</span>      <span class="number">23</span>     <span class="number">1</span>  lock   Ljava/lang/Object;</span><br></pre></td></tr></table></figure><h2 id="编译期处理"><a href="#编译期处理" class="headerlink" title="编译期处理"></a>编译期处理</h2><blockquote><p>所谓的语法糖，其实就是指 java 编译器把 java 源码编译为 class 字节码的过程中，自动生成和转换的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利</p></blockquote><h3 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h3><ul><li>如果一个类没有声明任何构造函数，Java 编译器会自动为该类生成一个无参构造函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy01</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译成class后的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个无参构造是编译器帮助我们加上的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 即调用父类 Object 的无参构造方法，即调用 java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h3><p>这个特性是JDK5开始加入的，代码片段1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在JDK5之前是无法编译通过的，必须改写为代码片段2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x.intValue(); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然之前版本的代码太麻烦了，需要在基本类型和包装类型之间来回转换（尤其是集合类中操作的都是包装类型），因此这些转换的事情在 JDK5以后都由编译器在编译阶段完成。即代码片段1 都会在编译阶段被转换为代码片段2。</p><h3 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h3><p>泛型也是在JDK 5 开始加入的特性，但 java 在编译泛型代码后会执行 型除的动作，即泛型信息在编译为字节码之后就丢失了，实际的类型都当做了 object 类型来处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="number">10</span>); <span class="comment">// 实际调用的是    List.add(Object e)</span></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// 实际调用的是    Object obj = List.get(int index); </span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以下是<strong>泛型擦除的一些重要原因和意义</strong>：</p></blockquote><ol><li>向后兼容性：泛型在Java 5及以后的版本引入，但为了保持与之前的版本的兼容性，Java编译器采用了泛型擦除。这意味着你可以编写使用泛型的代码，但在编译后，泛型信息将被擦除，以便在旧版本的Java中运行。</li><li>减少冗余代码：泛型擦除可以减少编译后的字节码文件的大小。因为泛型信息在运行时被擦除，所以编译器不会为每个不同的泛型类型生成新的类文件，从而减小了生成的字节码的体积。</li><li>避免类型相关的错误：泛型擦除确保在运行时不会引入类型相关的错误。这是因为在泛型擦除之后，编译器会插入必要的强制类型转换，以确保类型安全性。这有助于减少在运行时出现ClassCastException等类型错误的可能性。</li><li>可以实现通用性：泛型擦除使得可以编写通用的泛型代码，这些代码不依赖于具体的泛型类型。这有助于编写更通用、可重用的代码库，例如集合框架。</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数也是JDK5加入的新特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(String... args)</span> &#123; </span><br><span class="line">       String[] array = args; <span class="comment">// 直接赋值 </span></span><br><span class="line">       System.out.println(array);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       foo(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变参数   String… args 其实是一个   String[] args ，从代码中的赋值语句中就可以看出来。<br>同样 java 编译器会在编译期间将上述代码变换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       String[] array = args; <span class="comment">// 直接赋值 </span></span><br><span class="line">       System.out.println(array);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       foo(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果调用foo()时没有提供任何参数，那么则等价为foo(new String)，创建了一个空的数组，而不是传一个null进去</p></blockquote><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><ol><li>数组的循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 数组赋初值的简化写法也是语法糖哦 </span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> e : array) &#123;</span><br><span class="line">           System.out.println(e); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_1</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Candy5_1</span><span class="params">()</span> &#123; </span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; </span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; ++i) &#123; </span><br><span class="line">           <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> array[i];</span><br><span class="line">           System.out.println(e); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>集合的循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>); </span><br><span class="line">       <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">           System.out.println(i); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际被编译器转换为对迭代器的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_2</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Candy5_2</span><span class="params">()</span> &#123; </span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> (Integer)iter.next(); </span><br><span class="line">           System.out.println(e);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-字符串"><a href="#switch-字符串" class="headerlink" title="switch 字符串"></a>switch 字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy6_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;h&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;world&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;w&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy07</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (str.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">99162322</span>:                  <span class="comment">// hello 的 hashCode</span></span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">                    x = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">113318802</span>:                 <span class="comment">// world 的 hashCode</span></span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                    x = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，执行了两遍 switch，第一遍是根据字符串的 hashCode 和 equals 将字符串的转换为相应<br>byte 类型，第二遍才是利用 byte 执行进行比较。</li><li>为什么第一遍时必须既比较 hashCode，又利用 equals 比较呢？hashCode 是为了提高效率，减少可<br>能的比较；而 equals 是为了防止 hashCode 冲突，例如 BM 和 C. 这两个字符串的hashCode值都是<br>2123 ，如果有如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy6_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;BM&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;h&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;C.&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;w&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (str.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2123</span>:                  <span class="comment">// hashCode 值可能相同，需要进一步用 equals 比较</span></span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;C.&quot;</span>)) &#123;</span><br><span class="line">                x = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">&quot;BM&quot;</span>)) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-枚举"><a href="#switch-枚举" class="headerlink" title="switch 枚举"></a>switch 枚举</h3><p>switch 枚举的例子，原始代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">   MALE, FEMALE </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy7</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Sex sex)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (sex) &#123;</span><br><span class="line">           <span class="keyword">case</span> MALE:</span><br><span class="line">               System.out.println(<span class="string">&quot;男&quot;</span>); <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> FEMALE:</span><br><span class="line">               System.out.println(<span class="string">&quot;女&quot;</span>); <span class="keyword">break</span>; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy08</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个合成类（仅 jvm 使用，对我们不可见）</span></span><br><span class="line"><span class="comment">     * 用来映射枚举的 ordinal 与数组元素的关系</span></span><br><span class="line"><span class="comment">     * 枚举的 ordinal 表示枚举对象的序号，从 0 开始</span></span><br><span class="line"><span class="comment">     * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">$MAP</span> &#123;</span><br><span class="line">        <span class="comment">// 数组大小即为枚举元素个数，里面存储case用来对比的数字</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            map[Sex.MALE.ordinal()] = <span class="number">1</span>;</span><br><span class="line">            map[Sex.FEMALE.ordinal()] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Sex sex)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> $MAP.map[sex.ordinal()];</span><br><span class="line">        <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ordinal()是获取枚举编号的方法</p></blockquote><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    MALE, FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sex</span> <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;Sex&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex MALE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex FEMALE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex[] $VALUES;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        MALE = <span class="keyword">new</span> <span class="title class_">Sex</span>(<span class="string">&quot;MALE&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        FEMALE = <span class="keyword">new</span> <span class="title class_">Sex</span>(<span class="string">&quot;FEMALE&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        $VALUES = <span class="keyword">new</span> <span class="title class_">Sex</span>[]&#123;MALE, FEMALE&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sole constructor. Programmers cannot invoke this constructor.</span></span><br><span class="line"><span class="comment">     * It is for use by code emitted by the compiler in response to</span></span><br><span class="line"><span class="comment">     * enum type declarations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name    - The name of this enum constant, which is the identifier</span></span><br><span class="line"><span class="comment">     *                used to declare it.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordinal - The ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">     *                in the enum declaration, where the initial constant is</span></span><br><span class="line"><span class="comment">     *                assigned</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Sex</span><span class="params">(String name, <span class="type">int</span> ordinal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, ordinal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Sex[] values() &#123;</span><br><span class="line">        <span class="keyword">return</span> $VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Sex <span class="title function_">valueOf</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Enum.valueOf(Sex.class, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Sex</code>被声明为一个<code>final</code>类，它继承了<code>Enum&lt;Sex&gt;</code>类，Enum是Java中定义枚举的抽象类。MALE和FEMALE是Sex类的两个枚举值，它们被定义为静态常量。</li><li>除此之外，还有一个私有的、<code>final</code>的<code>Sex</code>类型数组<code>$VALUES</code>，它用于存储Sex类的所有枚举值。在类的静态块中，<code>$VALUES</code>数组被初始化为一个包含<code>MALE</code>和<code>FEMALE</code>的数组。</li><li>构造函数<code>Sex(String name, int ordinal)</code>是私有的，这意味着无法在类的外部使用这个构造函数来创建<code>Sex</code>的实例。只有Java编译器生成的代码才能调用这个构造函数来创建Sex的实例。</li><li><code>values()</code>和<code>valueOf(String name)</code>是从Enum类继承的两个静态方法。<code>values()</code>方法返回一个包含Sex类所有枚举值的数组，<code>valueOf(String name)</code>方法返回指定名称的枚举值。</li><li>当我们使用MALE或者FEMALE时，其实底层调用的是<code>Enum.valueOf(Sex.class, &quot;MALE&quot;)</code>和<code>Enum.valueOf(Sex.class, &quot;FEMALE&quot;)</code></li></ul><h3 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h3><p>]DK 7 开始新增了对需要关闭的资源处理的特殊语法 try-with-resources：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源变量    = 创建资源对象)&#123; </span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span>( ) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中资源对象需要实现 Autocloseable 接口，例如 Inputstream、outputstream、Connection、statement、Resultset 等接口都实现了 Autocloseable，使用 try-with-resources 可以不用写 finally 语句块，编译器会帮助生成关闭资源代码，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy9</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\1.txt&quot;</span>)) &#123; </span><br><span class="line">           System.out.println(is);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">           e.printStackTrace(); </span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy09</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\tmp.txt&quot;</span>);</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(is);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e1) &#123;</span><br><span class="line">                <span class="comment">// t 是我们代码出现的异常</span></span><br><span class="line">                t = e1;</span><br><span class="line">                <span class="keyword">throw</span> e1;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 判断了资源不为空</span></span><br><span class="line">                <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果我们代码有异常</span></span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            is.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e2) &#123;</span><br><span class="line">                            <span class="comment">// 如果 close 出现异常，作为被压制异常添加</span></span><br><span class="line">                            t.addSuppressed(e2);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果我们代码没有异常，close 出现的异常就是最后 catch 块中的 e</span></span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要设计一个 addsuppressed(Throwable e) (添加被压制异常) 的方法呢? </p><p>是为了防止异常信息的丢失(想想 try-with-resources 生成的 fianlly 中如果抛出了异常) :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">MyResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyResource</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyResource</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;close 异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下，两个异常信息都不会丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">    at com.demo.Test.main(Test.java:<span class="number">6</span>)</span><br><span class="line">    Suppressed: java.lang.Exception: close 异常</span><br><span class="line">        at com.demo.MyResource.close(Test.java:<span class="number">14</span>)</span><br><span class="line">        at com.demo.Test.main(Test.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="方法重写时的桥接方法"><a href="#方法重写时的桥接方法" class="headerlink" title="方法重写时的桥接方法"></a>方法重写时的桥接方法</h3><p>方法重写时，对返回值分两种情况</p><ol><li>父类与子类的返回值完全一致</li><li>子类返回值可以是父类返回值的子类（比较绕口，直接看下面的例子来理解）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Number <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 父类A方法的返回值是Number类型，子类B方法的返回值是Integer类型，Integer是Number的子类</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么对于子类，编译器会做如下处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法才是真正重写了父类 public Number m() 方法</span></span><br><span class="line">    <span class="keyword">public</span> synthetic bridge Number <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 public Integer m()</span></span><br><span class="line">        <span class="keyword">return</span> m();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的桥接方法比较特殊，仅对Java虚拟机可见，并且与原来的public Integer m()没有命名冲突</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转换后代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 额外生成的类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Candy10$1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    Candy10$<span class="number">1</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Candy10$1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于匿名内部类，它的底层实现是类似于普通内部类的，只不过没有命名而已。在生成匿名内部类的class文件时，Java编译器会自动为该类生成一个类名，在原始类名上加后缀<code>$1</code>，如果有多个匿名内部类，则<code>$2</code>、<code>$3</code>以此类推</li><li>引用局部变量的匿名内部类，原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span>  <span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ok&quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转换后代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 额外生成的类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Candy11$1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> val$x;</span><br><span class="line">    Candy11$<span class="number">1</span>(<span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val$x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok:&quot;</span> + <span class="built_in">this</span>.val$x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Candy11$1</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：这也解释了为什么匿名内部类引用局部变量时，局部变量必须为final的<ul><li>因为在创建<code>Candy$11</code>对象时，将x的值赋给了<code>val$x</code>属性，所以x不应该再发生变化了</li><li>如果变化，那么<code>val$x</code>属性没有机会再跟着一起变化</li></ul></li></ul><h2 id="类加载阶段"><a href="#类加载阶段" class="headerlink" title="类加载阶段"></a>类加载阶段</h2><p>文章参考自：<a href="https://javaguide.cn/java/jvm/class-loading-process.html">https://javaguide.cn/java/jvm/class-loading-process.html</a></p><p><img src="/../assets/JVM/image-20231014215015858.png" alt="一个类的完整生命周期"></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>将类的字节码载入方法区中，内部采用C++的instanceKlass描述Java类，它的重要field有</p><ol><li>_java_mirror：Java的类镜像，例如对String来说，就是String.class，作用是把klass暴露给Java使用</li><li>_super：父类</li><li>_fields：成员变量</li><li>_methods：方法</li><li>_constants：常量池</li><li>_class_loader：类加载器</li><li>_vtable：需方发表</li><li>_itable：接口方法表</li></ol><ul><li>如果这个类还有父类没有加载，先加载父类</li><li>加载和链接可能是交替运行的</li></ul><blockquote><p>instanceKlass这样的<code>元数据</code>是存储在方法区（1.8后是在元空间内），但_java_mirror是存储在堆中</p></blockquote><p><img src="/../assets/JVM/image-20231018144014687.png" alt="image-20231018144014687"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul><li>验证类是否符合JVM规范，安全性检查</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>为static变量分配空间，设置默认值</p><ul><li>static变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成</li><li>如果static遍历是final的基本类型以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成</li><li>如果static遍历是final的，但属于引用类型，那么赋值也会在初始化阶段完成</li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>将常量池中的符号引用解析为直接引用</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化即调用<code>&lt;cinit&gt;()V</code> 方法，虚拟机ui保证这个类的<code>构造方法</code>的线程安全</p><ul><li><p>发生的时机：总的来说，类的初始化是懒惰的</p><ol><li><p>main方法所在的类，总会被首先初始化</p></li><li><p>首次访问这个类的静态变量或静态方法时，会进行初始化</p></li><li><p>子类初始化，如果父类还没未初始化，则父类也会进行初始化</p></li><li><p>默认的Class.forName会导致初始化</p></li><li><p>new对象会导致初始化</p></li></ol></li><li><p>不会导致类初始化的情况</p><ol><li>访问类的 static final 静态常量（基本类型和字符串） 不会触发初始化</li><li>调用类对象.class不会触发初始化</li><li>类加载器的loadClass方法不会触发初始化</li><li>Class.forName的参数2为false时(initalize &#x3D; false)，不会触发初始化</li></ol></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>赋予了 Java 类可以被动态加载到 JVM 中并执行的能力</strong></p><p>简单来说，<strong>类加载器的主要作用就是加载 Java 类的字节码（ <code>.class</code> 文件）到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）。</strong></p><h3 id="类加载器加载规则"><a href="#类加载器加载规则" class="headerlink" title="类加载器加载规则"></a>类加载器加载规则</h3><p>JVM 启动的时候，<strong>并不会一次性加载所有的类，而是根据需要去动态加载</strong>。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。</p><p>对于已经加载的类会被放在 <code>ClassLoader</code> 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>以<code>JDK 8</code>为例</li></ul><table><thead><tr><th align="center">名称</th><th align="center">中文名</th><th align="center">加载哪的类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Bootstrap ClassLoader</td><td align="center">启动类加载器</td><td align="center">JAVA_HOME&#x2F;jre&#x2F;lib</td><td align="center">无法直接访问</td></tr><tr><td align="center">Extension ClassLoader</td><td align="center">扩展类加载器</td><td align="center">JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</td><td align="center">上级为 Bootstrap，显示为 null</td></tr><tr><td align="center">Application ClassLoader</td><td align="center">应用程序类加载器</td><td align="center">classpath</td><td align="center">上级为 Extension</td></tr><tr><td align="center">自定义类加载器</td><td align="center"></td><td align="center">自定义 上级为</td><td align="center">Application</td></tr></tbody></table><ul><li>当JVM需要加载一个类时，它会首先委托父类加载器去加载这个类，如果父类加载器无法加载这个类，就会由当前类加载器来加载。如果所有的父类加载器都无法加载这个类，那么就会抛出ClassNotFoundException异常。</li></ul><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a><strong>启动类加载器</strong></h3><ul><li><p><code>Bootstrap ClassLoader</code>是所有类加载器中最早的一个，负责加载JRE&#x2F;lib下的核心类库，如java.lang.Object、java.lang.String等。</p></li><li><p>输出的结果是null，因为引导类加载器是由JVM的实现者用C&#x2F;C++等语言编写的，而不是由Java编写的。在Java虚拟机的实现中，引导类加载器不是Java对象，也没有对应的Java类，因此它的ClassLoader属性为null。</p></li></ul><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><h4 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h4><ul><li>所谓双亲委派机制，就是指调用类加载器的loadClass方法时，查找类的规则</li><li>从下往上询问，从上往下加载</li><li><code>ClassLoader</code> 类使用委托模型来搜索类和资源。</li><li>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。</li><li><code>ClassLoader</code> 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。</li></ul><p><img src="/../assets/JVM/image-20231018154518908.png" alt="image-20231018154518908"></p><p>双亲委派源码精简化后的主要逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果类没有被加载，则委托给父ClassLoader加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// 如果父ClassLoader加载失败，则在自身查找类</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单总结一下双亲委派模型的执行流程：</p><ul><li>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</li><li>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</li><li>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</li><li>如果子类加载器也无法加载这个类，那么它会抛出一个 <code>ClassNotFoundException</code> 异常。</li></ul><h4 id="🌈-拓展一下："><a href="#🌈-拓展一下：" class="headerlink" title="🌈 拓展一下："></a>🌈 拓展一下：</h4><p><strong>JVM 判定两个 Java 类是否相同的具体规则</strong>：JVM 不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。即使两个类来源于同一个 <code>Class</code> 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相同。</p><h4 id="双亲委派模型的好处"><a href="#双亲委派模型的好处" class="headerlink" title="双亲委派模型的好处"></a>双亲委派模型的好处</h4><p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。</p><p>如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现两个不同的 <code>Object</code> 类。双亲委派模型可以保证加载的是 JRE 里的那个 <code>Object</code> 类，而不是你写的 <code>Object</code> 类。这是因为 <code>AppClassLoader</code> 在加载你的 <code>Object</code> 类时，会委托给 <code>ExtClassLoader</code> 去加载，而 <code>ExtClassLoader</code> 又会委托给 <code>BootstrapClassLoader</code>，<code>BootstrapClassLoader</code> 发现自己已经加载过了 <code>Object</code> 类，会直接返回，不会去加载你写的 <code>Object</code> 类。</p><h3 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h3><p>过程就是：启动类加载器加载DriverManager，DriverManager代码里调用了线程上下文类加载器，这个加载器默认就是使用应用程序类加载器加载类，通过应用程序类加载器加载jdbc驱动</p><p>具体参考<a href="https://javaguide.cn/java/jvm/classloader.html">https://javaguide.cn/java/jvm/classloader.html</a></p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>暂时不学这个了…….</p><p>具体参考<a href="https://javaguide.cn/java/jvm/classloader.html">https://javaguide.cn/java/jvm/classloader.html</a></p><h2 id="运行期优化"><a href="#运行期优化" class="headerlink" title="运行期优化"></a>运行期优化</h2><p>没听懂………….（后续再补充了）</p><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis相关知识</title>
      <link href="/2023/08/03/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/08/03/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h1><h2 id="redis基础知识"><a href="#redis基础知识" class="headerlink" title="redis基础知识"></a>redis基础知识</h2><h3 id="为什么使用redis"><a href="#为什么使用redis" class="headerlink" title="为什么使用redis"></a>为什么使用redis</h3><p>当过多用户同时访问数据库时压力会很大，这样会导致在访问数据的时候速度很慢，使得用户在体验的时候响应很慢从而降低了用户体验，而<code>redis</code>这种无关系型数据库是基于内存的，可以较快去进行访问数据，但毕竟内存是有限的，所以并不是因为它访问快而全部使用这种<code>NoSQL</code>数据库，它与<code>MySQL</code>这种关系型数据库之间是相互合作的，共同完成任务的。</p><h3 id="五种数据类型"><a href="#五种数据类型" class="headerlink" title="五种数据类型"></a>五种数据类型</h3><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9B%BE.png" alt="五种数据类型图"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h4><ul><li>SET key value<br>设置指定key的值</li><li>GET key<br>获取指定key的值</li><li>SETEX key seconds value<br>设置指定key的值，并将key的过期时间设为seconds秒</li><li>SETNX key value<br>只有在key不存在时设置key的值</li></ul><h4 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h4><p>Redis hash是一个string类型的field和value的映射表,hash特别适合用于存储对象，常用命令:</p><ul><li>HSET key field value<br>将哈希表key中的字段field的值设为value</li><li>HGET key field<br>获取存储在哈希表中指定字段的值</li><li>HDEL key field<br>删除存储在哈希表中的指定字段</li><li>HKEYS key<br>获取哈希表中所有字段</li><li>HVALS key<br>获取哈希表中所有值</li><li>HGETALL key<br>获取在哈希表中指定key的所有字段和值</li></ul><h4 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序，常用命令:</p><ul><li>LPUSH key value1 [value2]<br>将一个或多个值插入到列表头部</li><li>LRANGE key start stop<br>获取列表指定范围内的元素</li><li>RPOP key<br>移除并获取列表最后一个元素</li><li>LLEN key<br>获取列表长度</li><li>BRPOP key1 [key2 ] timeout<br>移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li></ul><h4 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h4><p>Redis set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令:</p><ul><li><p>SADD key member1 [member2]</p><p>向集合添加一个或多个成员</p></li><li><p>SMEMBERS key<br>返回集合中的所有成员</p></li><li><p>SCARD key<br>获取集合的成员数</p></li><li><p>SINTER key1 [key2]<br>返回给定所有集合的交集</p></li><li><p>SUNION key1 [key2]<br>返回所有给定集合的并集</p></li><li><p>SDIFF key1 [key2]<br>返回给定所有集合的差集</p></li><li><p>SREM key member1 [member2]</p><p>移除集合中一个或多个成员</p></li></ul><h4 id="sorted-set类型"><a href="#sorted-set类型" class="headerlink" title="sorted set类型"></a>sorted set类型</h4><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。常用命令:</p><ul><li>ZADD key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li>ZRANGE key start stop [WITHSCORES]<br>通过索引区间返回有序集合中指定区间内的成员</li><li>ZINCRBY key increment member<br>有序集合中对指定成员的分数加上增量increment</li><li>ZREM key member [member …]<br>移除有序集合中的一个或多个成员</li></ul><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul><li>KEYS pattern<br>查找所有符合给定模式( pattern)的 key</li><li>EXISTS key<br>检查给定key是否存在</li><li>TYPE key<br>返回key所储存的值的类型</li><li>TTL key<br>返回给定 key的剩余生存时间(TTL, time to live)，以秒为单位</li><li>DEL key<br>该命令用于在key存在是删除key</li></ul><h2 id="缓存与数据库双写一致问题"><a href="#缓存与数据库双写一致问题" class="headerlink" title="缓存与数据库双写一致问题"></a>缓存与数据库双写一致问题</h2><p><a href="https://www.bilibili.com/video/BV1FG411Z7Wk/?spm_id_from=333.851.b_7265636f6d6d656e64.1&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">B站视频详解</a></p><blockquote><p>先操作数据库，再删除缓存</p></blockquote><p>出现线程安全问题的概率相对较低</p><hr><p>解决方案:延时双删<br>更新数据库的时候删一次缓存，1秒钟之后再次删除缓存。</p><blockquote><p>待补充………..</p></blockquote><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213519682.png" alt="image-20230803213519682"></p><h3 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>缓存空对象</li></ol><ul><li><p>优点：方便简单</p></li><li><p>缺点：可能造成额外的内存消耗，可能造成短期的不一致</p></li></ul><blockquote><p>若有用户恶意使用多个不同id进行查询，则redis会不断缓存很多没有用的null值造成浪费，但可以通过为key添加过期时间解决。</p><p>短期不一致是因为数据库已经更新数据而redis中仍为null值，其实可以通过插入数据的同时手动更改redis的值来解决。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213834986.png" alt="image-20230803213834986"></p><ol start="2"><li>布隆过滤</li></ol><p>在查询redis前先经过布隆过滤器，若redis中存在才放行。</p><ul><li>优点：内存占用少，没有多余的key</li><li>缺点：可能误判</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803214619650.png" alt="image-20230803214619650"></p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804102636911.png" alt="image-20230804102636911"></p><h3 id="常见解决方案-1"><a href="#常见解决方案-1" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ol><blockquote><p>同一时段大量的缓存key同时失效采用方案一。</p><p>redis宕机采用方案2，3，4，redis集群中主库挂了还要从库数据，用sentinel可以降级限流，多级缓存可用nginx，jvm等进行缓存。</p></blockquote><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存击穿问题也叫<code>热点Key问题</code>，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</strong></p><h3 id="常见解决方案-2"><a href="#常见解决方案-2" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>互斥锁</li></ol><blockquote><p>1000个进程来同时访问，一个进程拿到锁，其余999个进程都要等到线程1查询数据库重新写入缓存，释放锁之后才能访问，性能差，但是有强一致性</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804105357783.png" alt="image-20230804105357783"></p><ol start="2"><li>逻辑过期</li></ol><blockquote><p>就是在redis保存数据的时候多保存一个过期时间字段，通常是在活动开始到结束那一个时间段内都不会过期，也就不会突然失效了。若<strong>失效（这里说的失效指的是逻辑时间过期了）</strong>了也是要通过锁的形式去重新查数据库，存缓存，释放锁。</p><p>不过相对于互斥锁而言，这里的锁不一样了。这里线程1获得锁之后交给另外的线程去执行查数据库等操作，而线程1自身则返回旧的数据。其他进程在释放锁之前来访问都是返回的旧数据，只有当释放锁，即完成了查数据库，存入缓存，更新逻辑过期时间后才能返回新数据。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804110145305.png" alt="image-20230804110145305"></p><h3 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h3><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>没有额外的内存消耗，保证一致性，实现简单</td><td>线程需要等待，性能受影响，可能有死锁</td></tr><tr><td>逻辑过期</td><td>线程无需等待，性能较好</td><td>不保证一致性，有额外内存消耗，实现复杂</td></tr></tbody></table><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>分布式锁的核心思想就是让大家共用同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819135201384.png" alt="image-20230819135201384"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li>分布式锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">//锁的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="comment">//利用UUID增加复杂度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="comment">//具体业务名称，将前缀和业务名拼接之后当做Key</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//这里不需要@Autowired，因为该对象是我们使用构造函数手动new出来的</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁，使用SETNX方法进行加锁，同时设置过期时间，防止死锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//自动拆箱可能会出现null，这样写更稳妥</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>lua脚本</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的KEYS[1]就是传入锁的key</span></span><br><span class="line"><span class="comment">-- 这里的ARGV[1]就是线程标识</span></span><br><span class="line"><span class="comment">-- 比较锁中的线程标识与线程标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">//获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">        <span class="comment">//加锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取代理对象(事务)</span></span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h3><blockquote><p>上面实现的分布式锁存在不可重入，不可重试的问题，将使用redisson提供的框架来实现</p></blockquote><p>解释：</p><p>上面实现的分布式锁是采用key-value形式的锁，在判断key相同之后则会直接认为这把锁已经被占用了，所以获取锁失败，但是redisson使用的是hash类型的数据结构，在看到锁已经存在后，不是直接认定获取锁失败，而是判断锁的标识是否是自己，如果是则value加一，代表重入次数加一，最后要删除锁也是要等到value为0，即程序运行到最外层的时候才能释放。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819144801293.png" alt="Redisson可重入锁原理"></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819160739146.png" alt="image-20230819160739146"></p><h2 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h2><p>采用zset类型的数据结构原因：</p><ol><li>可排序</li><li>唯一</li><li>列表</li></ol><p>但是SQL语句查询出来的结果并不是按照我们期望的方式进行排，即不按时间排序，因为使用了in来进行查询，最后根据id升序排，但其实应该按时间升序排序，所以可以采用<code>order by field(id, ids[0], ids[1] ...)</code>的方式进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:like:&quot;</span> + id;</span><br><span class="line">        <span class="comment">//zrange key 0 4  查询zset中前5个元素</span></span><br><span class="line">        Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//如果是空的(可能没人点赞)，直接返回一个空集合</span></span><br><span class="line">        <span class="keyword">if</span> (top5 == <span class="literal">null</span> || top5.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//将ids使用`,`拼接，SQL语句查询出来的结果并不是按照我们期望的方式进行排</span></span><br><span class="line">        <span class="comment">//所以我们需要用order by field来指定排序方式，期望的排序方式就是按照查询出来的id进行排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idsStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">        <span class="comment">//select * from tb_user where id in (ids[0], ids[1] ...) order by field(id, ids[0], ids[1] ...)</span></span><br><span class="line">        List&lt;UserDTO&gt; userDTOS = userService.query().in(<span class="string">&quot;id&quot;</span>, ids)</span><br><span class="line">                .last(<span class="string">&quot;order by field(id,&quot;</span> + idsStr + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                .list().stream()</span><br><span class="line">                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="keyword">in</span> (ids[<span class="number">0</span>], ids[<span class="number">1</span>] ...) <span class="keyword">order</span> <span class="keyword">by</span> field(id, ids[<span class="number">0</span>], ids[<span class="number">1</span>] ...)</span><br></pre></td></tr></table></figure><h2 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h2><p>使用推模式</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230821152151166.png" alt="image-20230821152151166"></p><p>滚动分页查询</p><p>zset</p><h2 id="GEO数据结构"><a href="#GEO数据结构" class="headerlink" title="GEO数据结构"></a>GEO数据结构</h2><p>附近的人</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习并部署项目</title>
      <link href="/2023/07/28/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/07/28/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>pwd</td><td>查看当前所在目录</td><td></td></tr><tr><td>touch</td><td>如果文件不存在则新建一个文件</td><td></td></tr><tr><td>ls</td><td>显示指定目录下的内容</td><td><code>-a</code>：显示所有文件及目录（以<code>.</code>开头的隐藏文件也会列出） <code>-l</code>：除文件名外，还会讲文件的形态、权限、拥有者、文件大小等详细信息列出，可简化为ll（常用）</td></tr><tr><td>cat</td><td>用于显示文件内容</td><td><code>-n</code>：由1开始对所有输出的行数编号</td></tr><tr><td>more</td><td>以分页的形式显示文件内容</td><td></td></tr><tr><td>tail</td><td>查看文件末尾的内容</td><td><code>-f</code>：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</td></tr><tr><td>mkdir</td><td>创建目录</td><td><code>-p</code>：确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</td></tr><tr><td>rmdir</td><td>删除空目录</td><td><code>-p</code>：当子目录被删除后使父目录为空目录的话，则一并删除</td></tr><tr><td>rm</td><td>删除文件或者目录</td><td><code>-r</code>：将目录及目录中所有文件（目录）逐一删除，即递归删除 <code>-f</code>：无需确认，直接删除</td></tr></tbody></table><h2 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>cp</td><td>用于复制文件或目录</td><td><code>-r</code>：如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</td></tr><tr><td>mv</td><td>为文件或目录改名、或将文件或目录移动到其它位置</td><td></td></tr></tbody></table><h2 id="打包压缩命令"><a href="#打包压缩命令" class="headerlink" title="打包压缩命令"></a>打包压缩命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>tar</td><td>对文件进行打包、解包、压缩、解压</td><td><code>-z</code>： 代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压 <code>-c</code>： 代表的是create，即创建新的包文件 <code>-x</code>： 代表的是extract，实现从包文件中还原文件 <code>-v</code>： 代表的是verbose，显示命令的执行过程 <code>-f</code>： 代表的是file，用于指定包文件的名称     <code>c</code>和<code>x</code>是互斥的，解压和压缩不能同时进行</td></tr></tbody></table><h2 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>vi、vim</td><td>对文件内容进行编辑</td><td></td></tr></tbody></table><ul><li>说明：</li></ul><ol><li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</li><li>vim在进行文本编辑时共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>插入模式</code>（Insert mode）和<code>底行模式</code>（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</li></ol><ul><li>针对vim中的三种模式说明如下：</li></ul><ol><li>命令模式<br>命令模式下可以查看文件内容、移动光标（上下左右箭头、<code>gg</code>(开头)、<code>G</code>（末尾））<br>通过vim命令打开文件后，默认进入命令模式<br>另外两种模式需要首先进入命令模式，才能进入彼此</li><li>插入模式<br>插入模式下可以对文件内容进行编辑<br>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现<code>INSERT</code>字样<br>在插入模式下按下ESC键，回到命令模式</li><li>底行模式<br>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找<br>通过 <code>:</code> 方式进入底行模式后，可以输入<code>wq</code>（保存并退出）、<code>q！</code>（不保存退出）、<code>set nu</code>（显示行号）</li></ol><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>find</td><td>在指定目录下查找文件</td><td><code>find dirName -option fileName</code></td></tr><tr><td>grep</td><td>从指定文件中查找指定的文本内容</td><td><code>grep word fileName</code></td></tr></tbody></table><p><code>grep</code>通常搭配管道符使用例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure><h2 id="权限命令"><a href="#权限命令" class="headerlink" title="权限命令"></a>权限命令</h2><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135026495.png" alt="image-20230728135026495"></p><hr><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135100975.png" alt="image-20230728135100975"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>echo命令在命令行内输出指定内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>可以通过将命令用反引号（通常也称之为飘号）&#96;将其包围，被包围的内容，会被作为命令执行，而非普通字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>`</span><br></pre></td></tr></table></figure><p>两个特殊符号，重定向符：&gt;和&gt;&gt;</p><p><code>&gt;</code>将左侧命令的结果，覆盖写入到符号右侧指定的文件中</p><p><code>&gt;&gt;</code>将左侧命令的结果，追加写入到符号右侧指定的文件中</p><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><h2 id="手工部署"><a href="#手工部署" class="headerlink" title="手工部署"></a>手工部署</h2><ol><li>idea上进行clean和package操作，打包好的包存放在target目录下</li><li>将该jar包通过finalshell上传到linux上</li><li>执行命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar xxx.jar &amp;&gt;xxx.log &amp;</span><br></pre></td></tr></table></figure><blockquote><p><code>nohup</code>命令用于不挂断的运行程序，&amp;&gt;后面是将日志输出到指定文件，最后一个&amp;的作用是让程序在后台运行</p></blockquote><ol start="4"><li>结束程序运行就结束进程即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java <span class="comment">#找到相关进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号  <span class="comment">#结束对应进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security知识学习</title>
      <link href="/2023/07/23/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/07/23/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-Security原理相关知识"><a href="#Spring-Security原理相关知识" class="headerlink" title="Spring Security原理相关知识"></a>Spring Security原理相关知识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Spring Security是一个基于Spring框架的安全框架，主要用于对用户的认证授权等功能。</p><p><strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p><strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>流程图：</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723214953358.png" alt="image-20230723214953358"></p><p><strong>Spring Security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。</strong></p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的拦截器。</p><ul><li>详细流程图</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723215418090.png" alt="image-20230723215418090"></p><p> ⭐⭐</p><p>所谓认证授权的详细流程，就是用户在登录时提交用户名和密码，UsernamePasswordAuthenticationFilter过滤器把用户名和密码封装为Authentication对象进行认证，通过一系列过滤器，在loadUserByUsername方法中从数据库中查询对应的用户信息，并将用户信息和该用户的权限信息（授权）一并通过实现了UserDetails接口的实现类返回，并在返回中的过滤器中设置SecurityContextHolder存放用户的权限信息。</p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ol><li>如何对密码进行加密</li></ol><blockquote><p>在 Spring Security 中对密码进行加密通常使用的是密码编码器（PasswordEncoder）。PasswordEncoder 的作用是将明文密码加密成密文密码，以便于存储和校验。Spring Security 提供了多种常见的密码编码器，例如 BCryptPasswordEncoder。</p></blockquote><ol start="2"><li>SecurityContextHolder作用</li></ol><blockquote><p>SecurityContextHolder用于存储安全上下文（security context）的信息。当前操作的用户是谁，该用户是否已经被认证，他拥有哪些角色权限…这些都被保存在SecurityContextHolder中。</p><p>SecurityContextHolder默认使用ThreadLocal策略来存储认证信息。看到ThreadLocal 也就意味着，这是一种与线程绑定的策略。Spring Security在用户登录时自动绑定认证信息到当前线程，在用户退出时，自动清除当前线程的认证信息。</p></blockquote><ol start="3"><li>Spring Security是如何完成身份认证的？</li></ol><blockquote><ol><li><p>用户名和密码被过滤器获取到，封装成Authentication,通常情况下是UsernamePasswordAuthenticationToken这个实现类。</p></li><li><p>AuthenticationManager 身份管理器负责验证这个Authentication</p></li><li><p>认证成功后，AuthenticationManager身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）Authentication实例。</p></li><li><p>SecurityContextHolder安全上下文容器将第3步填充了信息的Authentication，通过SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀商城（spikemall）</title>
      <link href="/2023/05/27/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/"/>
      <url>/2023/05/27/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="秒杀商城（spikemall）"><a href="#秒杀商城（spikemall）" class="headerlink" title="秒杀商城（spikemall）"></a>秒杀商城（spikemall）</h1><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>本项目名为下单秒杀项目，主要实现了用户进行下单秒杀的服务，用户对商品进行下单，会有一系列的关于订单，库存，账户等的操作，用户进行支付也会有对应订单，库存，账户等的操作，其次作为一个完善的商城，该项目同样也包含了用户的注册，登录，登出，以及对商品进行查看等的功能。</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527103920081.png" alt="image-20230527103920081"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/PlanBBBBB/spikemall">PlanBBBBB&#x2F;spikemall: 分布式秒杀商城 (github.com)</a></p><h2 id="相关技术栈"><a href="#相关技术栈" class="headerlink" title="相关技术栈"></a>相关技术栈</h2><p>该项目主要使用了<code>springboot</code>，<code>mybatis-plus</code>，<code>springcloud</code>，<code>nacos</code>，<code>feign</code>，<code>rocketmq</code>，<code>redis</code>，<code>gateway</code>，<code>springsecurity</code>，<code>Sentinel</code>，<code>Seata</code>等技术。</p><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol><li>启动nacos</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 即可</p><ol start="2"><li>启动redis</li></ol><p>先启动redis-server.exe，再启动redis-cli.exe</p><ol start="3"><li>启动rocketmq</li></ol><p>先启动mqnamesrv.cmd，再启动mqbroker.cmd</p><ol start="4"><li>启动sentinel</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8090/">http://localhost:8090</a> 即可</p><ol start="5"><li>启动seata</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seata-server.bat</span><br></pre></td></tr></table></figure><ol start="6"><li>启动所有服务</li></ol><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><h3 id="spikemall-users（用户数据库）"><a href="#spikemall-users（用户数据库）" class="headerlink" title="spikemall_users（用户数据库）"></a>spikemall_users（用户数据库）</h3><h4 id="users（用户表）"><a href="#users（用户表）" class="headerlink" title="users（用户表）"></a>users（用户表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>昵称</td></tr><tr><td>phone</td><td>手机号</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>money</td><td>余额</td></tr><tr><td>power</td><td>权限</td></tr></tbody></table><hr><h4 id="oauth-client-details（spring-security用户客户端表）"><a href="#oauth-client-details（spring-security用户客户端表）" class="headerlink" title="oauth_client_details（spring security用户客户端表）"></a>oauth_client_details（spring security用户客户端表）</h4><table><thead><tr><th>名称</th></tr></thead><tbody><tr><td>client_id</td></tr><tr><td>resource_ids</td></tr><tr><td>client_secret</td></tr><tr><td>scope</td></tr><tr><td>authorized_grant_types</td></tr><tr><td>web_server_redirect_uri</td></tr><tr><td>authorities</td></tr><tr><td>access_token_validity</td></tr><tr><td>refresh_token_validity</td></tr><tr><td>additional_information</td></tr><tr><td>autoapprove</td></tr></tbody></table><p>该<code>oauth_client_details</code>表主要用于spring security整合oauth2.0时，作为认证授权服务器时的保存在数据库的客户端使用。</p><h3 id="spikemall-goods（商品数据库）"><a href="#spikemall-goods（商品数据库）" class="headerlink" title="spikemall_goods（商品数据库）"></a>spikemall_goods（商品数据库）</h3><h4 id="goods（商品表）"><a href="#goods（商品表）" class="headerlink" title="goods（商品表）"></a>goods（商品表）</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>商品名</td></tr><tr><td>price</td><td>商品价格</td></tr><tr><td>image</td><td>商品图片</td></tr><tr><td>description</td><td>商品描述</td></tr></tbody></table><h3 id="spike-mall-orders（订单数据库）"><a href="#spike-mall-orders（订单数据库）" class="headerlink" title="spike mall_orders（订单数据库）"></a>spike mall_orders（订单数据库）</h3><h4 id="orders（订单表）"><a href="#orders（订单表）" class="headerlink" title="orders（订单表）"></a>orders（订单表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>user_id</td><td>下单用户id</td></tr><tr><td>good_id</td><td>商品id</td></tr><tr><td>status</td><td>订单状态（0未支付，1已支付）</td></tr><tr><td>order_time</td><td>下单时间</td></tr><tr><td>check_time</td><td>结账时间</td></tr><tr><td>amount</td><td>实收金额</td></tr></tbody></table><h3 id="spikemall-repertory（库存数据库）"><a href="#spikemall-repertory（库存数据库）" class="headerlink" title="spikemall_repertory（库存数据库）"></a>spikemall_repertory（库存数据库）</h3><h4 id="repertory（库存表）"><a href="#repertory（库存表）" class="headerlink" title="repertory（库存表）"></a>repertory（库存表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>goods_id</td><td>商品id</td></tr><tr><td>stock</td><td>库存</td></tr><tr><td>begin_time</td><td>开始时间</td></tr><tr><td>end_time</td><td>结束时间</td></tr></tbody></table><h2 id="账户服务"><a href="#账户服务" class="headerlink" title="账户服务"></a>账户服务</h2><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><ul><li>使用场景</li></ul><p>本项目使用了springsecurity整合的oauth2.0，故所有调用的资源都需要在请求头中携带jwt令牌，登录功能实现的是获取令牌，而注册功能是本系统唯一一个不需要携带令牌就能访问的资源。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> Users user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usersService.register(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(Users user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> user.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> user.getAvatar();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//手机号格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;Users&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Users::getPhone, phone);</span><br><span class="line">        List&lt;Users&gt; list = list(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPasswordInvalid(password)) &#123;</span><br><span class="line">            <span class="comment">//密码格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;密码格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        newUser.setPhone(user.getPhone());</span><br><span class="line">        <span class="comment">//密码设置为加密形式</span></span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(password);</span><br><span class="line">        newUser.setPassword(encode);</span><br><span class="line">        newUser.setMoney(<span class="number">200L</span>);<span class="comment">//新用户送200</span></span><br><span class="line">        newUser.setPower(<span class="string">&quot;consumer&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user.getName() == <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setName(<span class="string">&quot;user_&quot;</span> + UUID.randomUUID(<span class="literal">true</span>).toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newUser.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (avatar != <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setAvatar(avatar);</span><br><span class="line">        &#125;</span><br><span class="line">        save(newUser);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="springsecurity登录功能⭐⭐⭐"><a href="#springsecurity登录功能⭐⭐⭐" class="headerlink" title="springsecurity登录功能⭐⭐⭐"></a>springsecurity登录功能⭐⭐⭐</h3><h4 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h4><p>本项目使用的是授权码模式，故是将账户服务作为一个认证授权的服务器，而其他的服务都是资源服务器，用户需要在认证授权服务器中获取到jwt令牌，并在访问其他服务时，在请求头携带jwt令牌才能访问其他服务的资源。</p><h4 id="获取授权码步骤"><a href="#获取授权码步骤" class="headerlink" title="获取授权码步骤"></a>获取授权码步骤</h4><ol><li>在浏览器输入<a href="http://localhost:8085/">http://localhost:8085</a>会自动跳转到<a href="http://localhost:8085/login">http://localhost:8085/login</a>，在表单中填写手机号和密码进行登录。</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101204919.png" alt="image-20230527101204919"></p><p>进入如下界面代表登录成功</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101318752.png" alt="image-20230527101318752"></p><ol start="2"><li>在浏览器中输入该网址<a href="http://localhost:8085/oauth/authorize?client_id=client&response_type=code&redirect_uri=http://www.baidu.com">http://localhost:8085/oauth/authorize?client_id&#x3D;client&amp;response_type&#x3D;code&amp;redirect_uri&#x3D;http://www.baidu.com</a>，跳转到百度首页之后，在上面url处找到授权码</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101354324.png" alt="image-20230527101354324"></p><p>点击Authorize进行授权</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101451035.png" alt="image-20230527101451035"></p><p>得到授权码</p><ol start="3"><li>将得到的授权码代入到以下url地址中，此处用postman进行操作：<a href="http://client:secret@localhost:8085/oauth/token?grant_type=authorization_code&code=prgYij&redirect_uri=http://www.baidu.com">http://client:secret@localhost:8085&#x2F;oauth&#x2F;token?grant_type&#x3D;authorization_code&amp;code&#x3D;prgYij&amp;redirect_uri&#x3D;http://www.baidu.com</a></li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101535264.png" alt="image-20230527101535264"></p><p>携带授权码，得到<code>access_token</code>，该<code>access_token</code>在前面拼接上<code>Bearer </code>即为jwt令牌。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>因为本身使用的就是springsecurity整合好的安全框架，故只是对认证授权服务器和资源服务器做了一系列的配置而已。</p><h3 id="获取用户余额功能"><a href="#获取用户余额功能" class="headerlink" title="获取用户余额功能"></a>获取用户余额功能</h3><ul><li>使用场景</li></ul><p>在支付功能进行中，会通过远程调用该方法，判断用户的余额是否充足，以进行后续的支付功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/money&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> usersService.getMoney(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="keyword">return</span> user.getMoney();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="扣减用户余额功能"><a href="#扣减用户余额功能" class="headerlink" title="扣减用户余额功能"></a>扣减用户余额功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付功能时，满足一切支付条件后会对用户余额进行扣减。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastMoney</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/reduce/&#123;lastMoney&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(<span class="meta">@PathVariable(&quot;lastMoney&quot;)</span> Long lastMoney, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        usersService.reduceMoney(userId, lastMoney);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(Long userId, Long lastMoney)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Users&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Users::getId, userId)</span><br><span class="line">                .set(Users::getMoney, lastMoney);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><h3 id="通过商品id查询价格功能"><a href="#通过商品id查询价格功能" class="headerlink" title="通过商品id查询价格功能"></a>通过商品id查询价格功能</h3><ul><li>使用场景</li></ul><p>在创建订单时，需要知道商品的价格，故这是一个远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过商品id查询价格(对外不开放)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPrice</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.getById(goodsId).getPrice();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看商品列表功能"><a href="#查看商品列表功能" class="headerlink" title="查看商品列表功能"></a>查看商品列表功能</h3><ul><li>使用场景</li></ul><p>用户可以查看商品，属于完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看商品列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.listByRedis();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先从缓存中查</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKey</span> <span class="operator">=</span> <span class="string">&quot;cache:goods&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKeyJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(goodsKey);</span><br><span class="line">        <span class="comment">//查到了就返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (goodsKeyJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(JSONUtil.toList(goodsKeyJson, Goods.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到再从数据库查</span></span><br><span class="line">        List&lt;Goods&gt; goodsList = query().orderByAsc(<span class="string">&quot;id&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (goodsList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺类型发生错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将从数据库查询结果存入缓存</span></span><br><span class="line">        stringRedisTemplate.opsForValue().setIfAbsent(goodsKey, JSONUtil.toJsonStr(goodsList), <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(goodsList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下单服务"><a href="#下单服务" class="headerlink" title="下单服务"></a>下单服务</h2><h3 id="下单功能"><a href="#下单功能" class="headerlink" title="下单功能"></a>下单功能</h3><ul><li>使用场景</li></ul><p>用户查看商品，选择好商品之后即可下单，下单功能会局限于商品是否在秒杀时间段内以及库存是否充足等条件，此处利用分布式锁来实现一人一单。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品功能，请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/spike/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> repertoryService.spikeGoods(jwt, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;解析jwt失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否满足时间、库存条件</span></span><br><span class="line">        <span class="type">Repertory</span> <span class="variable">spikeGood</span> <span class="operator">=</span> getById(goodsId);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> spikeGood.getBeginTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> spikeGood.getEndTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (now.isBefore(beginTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now.isAfter(endTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span> (spikeGood.getStock() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据userId 创建锁对象</span></span><br><span class="line">        <span class="type">SimpleRedisLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock(<span class="number">120</span>);</span><br><span class="line">        <span class="comment">// 加锁失败，说明当前用户开了多个线程抢商品，但是由于key是SETNX的，所以不能创建key，得等key的TTL到期或释放锁（删除key）</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许抢多次商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象</span></span><br><span class="line">            <span class="type">RepertoryService</span> <span class="variable">proxy</span> <span class="operator">=</span> (RepertoryService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(jwt, goodsId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            redisLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        <span class="comment">//一人一单要求</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> orderClient.findCount(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户以抢购此商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> stockClient.reduceStock(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该商品已抢购完&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成orderId（使用redisIdWorker）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送普通消息给MQ</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Order&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> jwt + <span class="string">&quot;_&quot;</span> + goodsId + <span class="string">&quot;_&quot;</span> + orderId;</span><br><span class="line">        rocketMQTemplate.convertAndSend(topic, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h2><h3 id="创建订单功能"><a href="#创建订单功能" class="headerlink" title="创建订单功能"></a>创建订单功能</h3><ul><li>使用场景</li></ul><p>在用户进行下单操作时进行远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><p>由于是在下单时进行的调用方法，故没有独立的接口。</p><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">(String jwt, Long goodsId, Long orderId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> goodClient.getPrice(goodsId, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        order.setId(orderId);</span><br><span class="line">        order.setGoodId(goodsId);</span><br><span class="line">        order.setOrderTime(LocalDateTime.now());</span><br><span class="line">        order.setStatus(<span class="number">0</span>);<span class="comment">//  0表示未支付</span></span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setAmount(price);</span><br><span class="line">        save(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送延迟消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> JSONUtil.toJsonStr(order);</span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Pay&quot;</span>;</span><br><span class="line">        Message&lt;String&gt; message = MessageBuilder.withPayload(orderJson)</span><br><span class="line">                .setHeader(MessageConst.PROPERTY_DELAY_TIME_LEVEL, <span class="string">&quot;3&quot;</span>) <span class="comment">// 设置延迟等级为3，即10秒</span></span><br><span class="line">                .build();</span><br><span class="line">        rocketMQTemplate.send(topic, message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看该用户是否购买过该商品功能（一人一单）"><a href="#查看该用户是否购买过该商品功能（一人一单）" class="headerlink" title="查看该用户是否购买过该商品功能（一人一单）"></a>查看该用户是否购买过该商品功能（一人一单）</h3><ul><li>使用场景</li></ul><p>用户在进行下单时，查看该用户是否已经购买过该商品，若已经购买过该商品，则不允许用户重复购买。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过查询订单查看该用户是否购买过该商品，实现一人一单（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/&#123;goodsId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;goodsId&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.findCount(userId, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(Long userId, Long goodsId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getGoodId, goodsId).eq(Orders::getUserId, userId);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看当前用户的所有订单功能"><a href="#查看当前用户的所有订单功能" class="headerlink" title="查看当前用户的所有订单功能"></a>查看当前用户的所有订单功能</h3><ul><li>使用场景</li></ul><p>用户可查看自己的所有订单，算是完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看当前用户的所有订单,请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.listByUser(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getUserId, userId);</span><br><span class="line">        List&lt;Orders&gt; ordersList = list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(ordersList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="支付服务"><a href="#支付服务" class="headerlink" title="支付服务"></a>支付服务</h2><h3 id="支付功能"><a href="#支付功能" class="headerlink" title="支付功能"></a>支付功能</h3><ul><li>使用场景</li></ul><p>用户在下单功能成功之后，再进行支付功能，在支付过程种会出现未在规定时间段内支付以及余额不足无法支付的情况，该情况下会对库存进行回滚，同时对创建好的订单进行删除，若满足支付条件，将对订单进行修改，同时对用户余额进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付功能,没登录不能支付，即请求头必须携带token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ordersService.pay(jwt, orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(String jwt, Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;order:&quot;</span> + orderId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(orderJson)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;订单号有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得order对象</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> JSONUtil.toBean(orderJson, Orders.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单时间超时</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">deadlineTime</span> <span class="operator">=</span> order.getOrderTime().plusMinutes(<span class="number">30</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">nowTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (nowTime.isAfter(deadlineTime)) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;下单时间超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//余额不足</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">money</span> <span class="operator">=</span> userClient.getMoney(jwt);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> order.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (money &lt; price) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;余额不足，无法购买&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件成功，进行支付</span></span><br><span class="line">        <span class="comment">//1.更改订单状态</span></span><br><span class="line">        LambdaUpdateWrapper&lt;Orders&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(Orders::getId, order.getId())</span><br><span class="line">                .set(Orders::getCheckTime, nowTime)</span><br><span class="line">                .set(Orders::getStatus, <span class="number">1</span>);</span><br><span class="line">        update(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.扣减用户余额</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">lastMoney</span> <span class="operator">=</span> money - price;</span><br><span class="line">        userClient.reduceMoney(lastMoney, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="库存服务"><a href="#库存服务" class="headerlink" title="库存服务"></a>库存服务</h2><h3 id="扣减库存功能"><a href="#扣减库存功能" class="headerlink" title="扣减库存功能"></a>扣减库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行下单的时候，就直接对库存进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> repertoryService.reduceStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .gt(Repertory::getStock, <span class="number">0</span>)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="回滚库存功能"><a href="#回滚库存功能" class="headerlink" title="回滚库存功能"></a>回滚库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付的时候，若未在商品的秒杀时间段内，或自身余额不足的情况下会进行库存的回滚。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        repertoryService.rollbackStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock + 1&quot;</span>);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="网关服务"><a href="#网关服务" class="headerlink" title="网关服务"></a>网关服务</h2><p>由于项目是微服务项目，故使用gateway网关进行端口等统一配置处理很有必要，本项目除用户登录进行获取授权码及获取jwt令牌的所有请求资源的端口号均为10010。</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级部分学习</title>
      <link href="/2023/01/05/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/05/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>指定字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>全部字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>批量添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><hr><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ... [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><hr><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><blockquote><p>分页查询：起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</p></blockquote><blockquote><p>UNION ALL 会有重复结果，UNION 不会</p><p>联合查询比使用or效率高，不会使索引失效</p></blockquote><h2 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h2><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230720221305377.png" alt="image-20230720221305377"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721105303089.png" alt="image-20230721105303089"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110407627.png" alt="image-20230721110407627"></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110713301.png" alt="image-20230721110713301"></p><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113246951.png" alt="image-20230721113246951"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113220684.png" alt="image-20230721113220684"></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165346891.png" alt="image-20230721165346891"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165901787.png" alt="image-20230721165901787"></p><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165718405.png" alt="image-20230721165718405"></p><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721172914954.png" alt="image-20230721172914954"></p><h1 id="事务相关知识"><a href="#事务相关知识" class="headerlink" title="事务相关知识"></a>事务相关知识</h1><h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ol><li><p>A 原子性（Atomicity） 一个事务的所有操作，要么全部完成，要么都没完成，不能结束在中间环节。如果事务在执⾏过程中发生错误，会被回滚到事务开始之前的状态 </p></li><li><p>C 一致性（Consistency） 在事务开始之前以及事务结束之后，数据库的完整性不能被破坏 </p></li><li><p>I 隔离性（Isolation） 允许多个并发事务同时对数据进⾏修改和读写的能⼒，它可以防止由于多个事务并发执⾏时由于交叉执行而导致的数据不一致 </p></li><li><p>D 持久性（Durability） 事务处理结束了以后，对数据的修改是永久的，即使是发生了系统故障，数据也不会丢失</p><hr></li></ol><h2 id="四大隔离级别"><a href="#四大隔离级别" class="headerlink" title="四大隔离级别"></a>四大隔离级别</h2><ol start="0"><li><p>术语说明： </p><ul><li>脏读： 一个事务读取另一个事务还没有提交的数据 </li><li>不可重复读： 同一个事务内，两个相同的查询返回了不同的结果 </li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”。</li></ul></li><li><p>RU 读不提交（Read Uncommited） 在该隔离级别下，事务之间完全不隔离，会产生脏读，一般情况不会使用 </p></li><li><p>RC 读提交（Read Commited） 本事务读取到的是其它事务提交的最新数据，但有一个问题在同一个事务中，前后两相同的select可能会读到不同的结果 </p></li><li><p>RR 可重复读（Repeatable Read） 在同一个事务中，select的结果是事务开始时时间点的状态，因此，同一个事务同样的select操作可以读到一致的结果 </p></li><li><p>serializable串行化读操作会隐式获取共享锁，保证不同事务之间的互斥 </p></li><li><p>⭐⭐问题：RR 可重复读为什么可以解决不可重复读，却不能解决幻读⭐⭐</p><blockquote><p>答：对于”可重复读（Repeatable Read）”隔离级别，它确实可以解决”不可重复读（Non-repeatable Read）”问题，因为在这个隔离级别下，事务在执行期间看到的数据保持一致，即使其他事务在这段时间内进行了更改，也不会影响当前事务。</p><p>解决”不可重复读”问题的关键是<strong>行级锁定</strong>。在”可重复读”隔离级别下，读取的数据行会被锁定，确保其他事务不能修改或删除这些数据，从而保持了数据的一致性，防止了其他事务的干扰。</p><p>然而，”可重复读”隔离级别并不能完全解决”幻读”问题。”幻读”问题是由于其他事务在当前事务执行期间插入或删除了符合当前事务查询条件的新数据，导致查询结果发生变化。<strong>在”可重复读”隔离级别下，行级锁只能保护已有数据的读取，但对于新数据的插入和删除并不会进行锁定。</strong>因此，其他事务仍然可以插入或删除新数据，从而导致当前事务的查询结果发生变化，产生了”幻读”问题。</p><p>要解决”幻读”问题，需要进一步升级到更高的隔离级别，如”串行化（Serializable）”。在”串行化”隔离级别下，事务会锁定整个范围，包括已有数据和符合查询条件的新数据，确保其他事务不能插入或删除这些数据，从而完全消除了”幻读”问题。但是，”串行化”隔离级别的性能较低，因为它限制了并发性，所以在实际应用中需要权衡隔离级别和性能的需求。</p></blockquote></li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230722210501764.png" alt="image-20230722210501764"></p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><p>示例图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164107248.png" alt="MySQL体系结构图"></p><p>包括四个层：</p><ol><li><strong>连接层</strong> 最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端&#x2F;服务端工具实现的类似于 TCP&#x2F;IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程 池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务 器也会为安全接入的每个客户端验证它所具有的操作权限。 </li><li><strong>服务层</strong> 第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部 分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解 析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大， 这样在解决大量读操作的环境中能够很好的提升系统的性能。 </li><li><strong>引擎层</strong> 存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通 信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库 中的索引是在存储引擎层实现的。 </li><li><strong>存储层</strong> 数据存储层， 主要是将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询 日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。</li></ol><p><strong>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 。存储引擎是基于表的，而不是 基于库的，所以存储引擎也可被称为表类型。</strong></p><h2 id="存储引擎类型"><a href="#存储引擎类型" class="headerlink" title="存储引擎类型"></a>存储引擎类型</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ol><li>特点</li></ol><ul><li><p>DML操作遵循ACID模型，支持事务；</p></li><li><p>行级锁，提高并发访问性能； </p></li><li><p>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</p></li></ul><ol start="2"><li>文件</li></ol><p>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结 构（frm-早期的 、sdi-新版的）、数据和索引。</p><ol start="3"><li>逻辑存储结构</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164013431.png" alt="逻辑存储结构图"></p><ul><li>表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以 包含多个Segment段。 </li><li>段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管 理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。 </li><li>区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为 16K， 即一个区中一共有64个连续的页。 </li><li>页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默 认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。 </li><li>行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时 所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。</li></ul><hr><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ol><li>特点</li></ol><ul><li><p>不支持事务，不支持外键</p></li><li><p>支持表锁，不支持行锁</p></li><li><p>访问速度快</p></li></ul><ol start="2"><li>文件</li></ol><ul><li><p>xxx.sdi：存储表结构信息 </p></li><li><p>xxx.MYD: 存储数据 </p></li><li><p>xxx.MYI: 存储索引</p></li></ul><hr><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为 临时表或缓存使用。</p><ol><li>特点</li></ol><ul><li><p>内存存放</p></li><li><p>hash索引（默认）</p></li></ul><ol start="2"><li>文件</li></ol><ul><li>xxx.sdi：存储表结构信息</li></ul><h3 id="三种常见存储引擎区别与对比"><a href="#三种常见存储引擎区别与对比" class="headerlink" title="三种常见存储引擎区别与对比"></a>三种常见存储引擎区别与对比</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724202707479.png" alt="三种常见存储引擎区别与对比"></p><p>重点对比InnoDB和MyISAM，分别是<strong>事务，外键和锁机制的区别</strong>。</p><h1 id="索引⭐⭐"><a href="#索引⭐⭐" class="headerlink" title="索引⭐⭐"></a>索引⭐⭐</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构 上实现高级查找算法，这种数据结构就是索引。</p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库 的IO成本</td><td>索引列也是要占用空间的。</td></tr><tr><td>通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消 耗。</td><td>索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><blockquote><p>MySQL默认是B+Tree结构</p></blockquote><h3 id="B-Tree-B-Tree"><a href="#B-Tree-B-Tree" class="headerlink" title="B-Tree&amp;B+Tree"></a>B-Tree&amp;B+Tree</h3><p>B-Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174758649.png" alt="B-Tree图"></p><hr><p>B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174633933.png" alt="B+Tree图"></p><p>B+Tree 与 B-Tree相比，主要有以下三点区别： </p><ul><li>所有的数据都会出现在叶子节点。 </li><li>叶子节点形成一个双向链表。 </li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。</li></ul><p><strong>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点 的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</strong></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730175227025.png" alt="hash索引图"></p><p>特点：</p><ol><li><p>Hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询（between，&gt;，&lt; ，…） </p></li><li><p>无法利用索引完成排序操作 </p></li><li><p>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索 引</p></li></ol><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><blockquote><p>为什么InnoDB存储引擎选择使用B+tree索引结构?</p></blockquote><ol><li>相对于二叉树，层级更少，搜索效率高； （B+树三层就能存放2200w的数据）</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低； </li><li>相对Hash索引，B+tree支持范围匹配及排序操作；</li></ol><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建, 只能有一个</td><td><code>PRIMARY</code></td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td><code>UNIQUE</code></td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td><code>FULLTEXT</code></td></tr></tbody></table><hr><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有,而且只有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p><strong>聚集索引选取规则:</strong> </p><ul><li>如果存在主键，主键索引就是聚集索引。 </li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。 </li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引。</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>执行SQL语句的具体流程如图：</p><ol><li>先在二级索引处查到name&#x3D;Arm</li><li>再把在二级索引处查到的对应的id通过回标查询来到聚集索引处</li><li>得到id在通过聚集索引查到行数据</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730195655768.png" alt="回表查询图"></p><blockquote><p>回表查询： 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询。</p></blockquote><h3 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h3><p>以下两条SQL语句，那个执行效率高? 为什么? </p><p>A. select * from user where id &#x3D; 10 ; </p><p>B. select * from user where name &#x3D; ‘Arm’ ; </p><p>备注: id为主键，name字段创建的有索引；</p><blockquote><p>解答： A 语句的执行性能要高于B 语句。 因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然 后再查询聚集索引，也就是需要进行回表查询。</p></blockquote><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><ol><li>创建索引</li></ol><p>创建的索引名一般命名为<code>idx_表名_字段名</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT ] INDEX index_name <span class="keyword">ON</span> table_name (index_col_name,... ) ;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name ;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name ;</span><br></pre></td></tr></table></figure><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><p>可通过查看SQL执行频率，慢查询日志，profile详情和explain方法来分析哪个SQL语句的执行速度慢。</p><h3 id="explain（重点掌握）"><a href="#explain（重点掌握）" class="headerlink" title="explain（重点掌握）"></a>explain（重点掌握）</h3><p>Explain 执行计划中各个字段的含义:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，<strong>值越大，越先执行</strong>)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr><tr><td>extra</td><td>额外信息，例如Using index等</td></tr></tbody></table><h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><blockquote><p><strong>针对联合索引</strong>而言，联合索引字段中的第一个字段必须存在（不需要指定位置），若不存在第一个字段则整个索引失效，若后续其他字段中跳过了某个字段，则后续的部分索引失效</p></blockquote><p>举例：</p><p>创建下列三个字段的联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sku_price_num_weight <span class="keyword">ON</span> tb_sku(price,num,weight);</span><br></pre></td></tr></table></figure><p>正常查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>跳过中间的字段后，后续字段索引会失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span>  <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>具体可通过<code>EXPLAIN</code>来查看是否使用了索引，看索引的长度来判断哪个字段索引被使用了</p></blockquote><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>上述的最左前缀法则针对的是<code>where</code>后的条件，在<code>where</code>后的条件中，只要出现了最左边的字段即可认为满足了最左前缀法则。而当在<code>order by</code>之后的条件中，若是最左边的字段没有放在排序的第一位，即不按照顺序，这是不满足最左前缀法则的。综上，<code>where</code>后条件不需要按顺序，<code>order by</code>之后的条件需要按顺序。</p><blockquote><p>具体示例看下文的order by优化的特殊情况</p></blockquote><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><blockquote><p>此处举例大多都是会导致索引失效的例子</p></blockquote><h4 id="范围查询特殊情况"><a href="#范围查询特殊情况" class="headerlink" title="范围查询特殊情况"></a>范围查询特殊情况</h4><p>如果出现范围查询，则&gt;或&lt;之后的索引会失效</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述SQL中num&gt;10000，导致后面的weight的索引失效，只有price和num的索引生效</p><p>可以把&gt;,&lt;修改为&gt;&#x3D;,&lt;&#x3D;，修改之后就能避免这种情况发生，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h4><p>不要在索引列上进行运算操作， 索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone,<span class="number">10</span>,<span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h4><p>字符串类型字段使用时，不加引号，索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：其实可以理解为phone本身是varchar类型，这里做了隐式类型转换，也算的上是计算</p></blockquote><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="or连接条件"><a href="#or连接条件" class="headerlink" title="or连接条件"></a>or连接条件</h4><p>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。只有当or前后都有索引才能生效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">23</span>; #其中age字段无索引</span><br></pre></td></tr></table></figure><h4 id="数据分布影响⭐"><a href="#数据分布影响⭐" class="headerlink" title="数据分布影响⭐"></a>数据分布影响⭐</h4><p>如果MySQL评估使用索引比全表更慢，则不使用索引。MySQL自己评判。</p><blockquote><p>走不走索引取决于查询的数据占全表的多少，若查询的数据占了全表的大部分，则全表搜索更快，故选择全表搜索，反之则相反。</p></blockquote><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><blockquote><p>此处的SQL提示，指的是我们去提示SQL，而不是SQL提示我们。</p></blockquote><ul><li>使用条件：</li></ul><p>当一个字段既有单列索引又有联合索引时，MySQL默认使用联合索引，此时我们可以使用三种方式去提示SQL使用何种索引。</p><ol><li>建议（建议仅仅只是建议，具体用不用还要MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>忽略（<strong>建议</strong>MySQL忽略某个索引，但是要不要忽略也是MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>强迫（MySQL必须采用所选的索引）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引指的是查询的字段全部都能一次查出，无需回表查询。</p><p>举例说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status, name <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #需要回表查询</span><br></pre></td></tr></table></figure><p>在这个SQL语句中，<code>profession</code> ,<code>age</code> ,<code> status</code>这三个字段组成联合索引，而<code>name</code>字段没有索引，所以在<strong>二级索引</strong>中<code>profession</code> ,<code>age</code> ,<code> status</code>以及他们的叶子节点中存放的<code>id</code>字段都是可以直接找到的，若这条语句不需要额外查询<code>name</code>字段的话（如下SQL），那么这条语句就是覆盖索引，因为他不需要回表查询，但因为有了<code>name</code>字段，所以不光要在二级索引中查，还要带着<code>id</code>去聚集索引中查，这就是回表查询。回表查询自然就会慢了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #覆盖索引，不需要回表查询</span><br></pre></td></tr></table></figure><blockquote><p>尽量不要使用<code>select *</code> 的原因就是查询全部字段很大可能会因为有些字段没有索引，而导致需要回表查询。</p></blockquote><h4 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h4><p>一张表, 有四个字段(id, username, password, status), 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>答案: 针对于 username, password建立联合索引, sql为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_name_pass <span class="keyword">on</span> tb_user(username,password); </span><br></pre></td></tr></table></figure><p>这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。</p></blockquote><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让 索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建 立索引，这样可以大大节约索引空间，从而提高索引效率。<strong>降低索引体积，提高查询效率</strong></p><p>语法：其中的<code>n</code>是从头开始截取的位数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxxx <span class="keyword">on</span> table_name(<span class="keyword">column</span>(n)) ;</span><br></pre></td></tr></table></figure><p>具体<code>n</code>取多少，下列sql中选择性越接近1且截取长度越少的越好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email,<span class="number">1</span>,n)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user ;</span><br></pre></td></tr></table></figure><blockquote><p>例如n取10时选择性为1，取9，8，7，6，5时选择性都为0.985，n取4时选择性为0.913，此时的n就应该n&#x3D;5</p></blockquote><ul><li>执行流程：</li></ul><p>如 index1 (即email整个字符串的索引结构)，执行顺序是这样的:</p><ol><li>从index1索引树找到满足索引值是<code>zhangssxyz@xxx.com</code>的这条记录，取得ID2的值</li><li>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集!</li><li>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足email&#x3D;<code>hangssxyz@xxx.com</code>的条件了，循环结束, 这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</li></ol><p>如 index2 (即email(6)索结构) ，执行顺序是这样的:</p><ol><li>从index2索引树找到满足索引值是’zhangs的记录，找到的第一个是ID1;</li><li>到主键上查到主键值是ID1的行，判断出email的值不是<code>zhangssxyz@xxx.com</code>，这行记录丢弃</li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是hangs，取出ID2，再到ID索引上取整行然后判断，这次值对了，将这行记录加入结果集;</li><li>重复上一步，直到在idxe2上取到的值不是zhangs时，循环结束<br>在这个过程中，要回主键索引取4次数据，也就是扫描了4行。<br>通过这个对比，你很容易就可以发现，<strong>使用前缀索引后，可能会导致查询语句读数据的次数变多</strong></li></ol><p>取自<a href="https://blog.csdn.net/m0_37583655/article/details/127945182?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169119750916800211587211%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169119750916800211587211&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-127945182-null-null.142%5Ev92%5EchatgptT0_1&utm_term=%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B5%81%E7%A8%8B%E4%BB%80%E4%B9%88&spm=1018.2226.3001.4187">CSDN博主（靖节先生）-前缀索引详解</a></p><h3 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引&amp;&amp;联合索引"></a>单列索引&amp;&amp;联合索引</h3><ul><li><p>单列索引：即一个索引只包含单个列。 </p></li><li><p>联合索引：即一个索引包含了多个列。</p></li></ul><blockquote><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引， 而非单列索引。</p></blockquote><p>联合索引的B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805093203021.png" alt="联合索引的B+Tree图"></p><h2 id="索引设计原则⭐"><a href="#索引设计原则⭐" class="headerlink" title="索引设计原则⭐"></a>索引设计原则⭐</h2><ol><li>针对于数据量较大，且查询比较频繁的表建立索引。</li></ol><blockquote><p>数据量大指的是超过一百多万……</p></blockquote><ol start="2"><li><p>针对于常作为查询条件 (where)、排序(order by)、分组 (group by) 操作的字段建立索引。</p></li><li><p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p></li></ol><blockquote><p>区分度高的字段例如用户的手机号，身份证号，区分度低的例如性别，用户的状态等</p></blockquote><ol start="4"><li><p>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p></li><li><p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p></li><li><p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p></li><li><p>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p></li></ol><h1 id="SQL优化⭐"><a href="#SQL优化⭐" class="headerlink" title="SQL优化⭐"></a>SQL优化⭐</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>每次insert都要建立sql连接，会浪费时间和性能</p></blockquote><h3 id="手动控制事务"><a href="#手动控制事务" class="headerlink" title="手动控制事务"></a>手动控制事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL默认是自动提交事务，所以每次insert都会重复的开启事务，关闭事务，浪费时间</p></blockquote><h3 id="主键顺序插入，性能要高于乱序插入"><a href="#主键顺序插入，性能要高于乱序插入" class="headerlink" title="主键顺序插入，性能要高于乱序插入"></a>主键顺序插入，性能要高于乱序插入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主键乱序插入 : <span class="number">8</span> <span class="number">1</span> <span class="number">9</span> <span class="number">21</span> <span class="number">88</span> <span class="number">2</span> <span class="number">4</span> <span class="number">15</span> <span class="number">89</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line">主键顺序插入 : <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">15</span> <span class="number">21</span> <span class="number">88</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><h3 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h3><blockquote><p>当插入的数据大于几百万条的时候再使用insert效果就不好了</p></blockquote><ul><li><p>客户端连接服务端时，加上参数 –local-infile </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –-local-infile -u root -p </span><br></pre></td></tr></table></figure></li><li><p>设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>下面这条sql从该<code>tb_sku1.sql</code>文件中加载数据到表<code>tb_sku</code>，以<code>,</code>分隔字段，以换行为一行数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql/tb_sku1.sql&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> `tb_sku` fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>SQL文件前几行代码如下：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805155150579.png" alt="image-20230805155150579"></p><h2 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h2><blockquote><p><strong>主键顺序插入，性能要高于乱序插入</strong></p></blockquote><h3 id="页分裂："><a href="#页分裂：" class="headerlink" title="页分裂："></a>页分裂：</h3><p>页分裂是指当一个页面（Page）已经满了，但需要插入新的数据或更新已有数据，MySQL 就会将页面拆分成两个页面，以容纳新的数据。这样做可以保证数据的有序性和唯一性，但页分裂可能会产生一些<strong>影响</strong>，主要包括：</p><ol><li><strong>性能影响：</strong> 页分裂会涉及数据的重新组织和移动，这可能会导致数据库性能的下降，特别是在频繁发生页分裂的表上。页分裂涉及磁盘 I&#x2F;O 操作，而这些操作通常比内存操作慢得多。</li><li><strong>磁盘空间的浪费：</strong> 页分裂后，可能会导致数据页只有一部分被占用，而其他部分为空闲，从而浪费了一些磁盘空间。</li><li><strong>索引碎片化：</strong> 主键通常是索引键，页分裂会导致索引的碎片化。这可能会使索引树更加深度，影响查询性能。</li><li><strong>锁竞争增加：</strong> 页分裂涉及数据的重新组织，这可能会增加锁的竞争。在高并发的环境下，这可能会导致锁等待时间增加，进而影响数据库的响应性能。</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805164745995.png" alt="image-20230805164745995"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805164833266.png" alt="image-20230805164833266"></p><h3 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805165237518.png" alt="image-20230805165237518"></p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ol><li>满足业务需求的情况下，尽量降低主键的长度。 </li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。 </li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。 </li><li>业务操作时，避免对主键的修改</li></ol><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><blockquote><p>在explain执行计划的extra中尽量不要显示<code>Using filesort</code>，这代表性能相对不好</p></blockquote><p>举例说明：</p><p>有如下这样一个索引，默认的都是asc升序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_age_phone <span class="keyword">on</span> tb_user(age, phone);</span><br></pre></td></tr></table></figure><p>在存在这个索引的情况下，走如下sql语句不会出现Using filesort，只会出现Using index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, age, phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, phone <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>因为创建索引的时候默认就是升序排的索引，所以这样能不出现Using filesort，但要是<strong>其中一个</strong>是倒序查询，那么就会出现Using filesort；但是如果两个都是倒序查询，那么反而不会出现Using filesort，因为在查询B+Tree的时候反向检索了。</p><blockquote><p><strong>特殊情况</strong>：如果排序的时候将age和phone的顺序写反了，那么就不遵循最左前缀法则了，即使两个都是asc查询，那么也不会全部走索引，自然就会出现Using filesort。</p></blockquote><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）⭐</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><blockquote><p>尽量不要出现 Using temporary</p></blockquote><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是需要满足最左前缀法则的</li></ul><p>⭐下面这条sql也是符合最左前缀法则的，profession和age是联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> age , <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> age ;</span><br></pre></td></tr></table></figure><h2 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h2><p>对于大数据量的分页查询，如下，查询效率很低，越往后的数据查询时间越长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku limit <span class="number">2000000</span> , <span class="number">10</span></span><br></pre></td></tr></table></figure><p>优化思路: </p><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> tb_sku t , (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><h2 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h2><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；</p><p>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。</p><blockquote><p>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis，总的来说没有特别好的优化方式</p></blockquote><p>count各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以<strong>尽量使用 count(*)</strong></p><h2 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h2><blockquote><p>避免行锁升级为表锁</p></blockquote><p>在InnoDB中的行锁是针对索引加的锁。</p><p>举例说明：</p><p>当两个事务同时开启时，如果操作的是不同的行（按照id来区分不同的行，如下SQL），那么是互不影响的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> ; #事务一<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span> ; #事务二<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>但如果操作的虽然是不同的行，但是不是按有索引的字段来区分不同的行，例如按照<code>name</code>这个没有索引的字段来区分不同的行，那么此时的行锁就会升级为表锁，大大降低了性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;PHP&#x27;</span> ; #事务一<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Spring&#x27;</span> ; #事务二<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><h1 id="锁⭐⭐"><a href="#锁⭐⭐" class="headerlink" title="锁⭐⭐"></a>锁⭐⭐</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、 RAM、I&#x2F;O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。 </p><blockquote><p>在MySQL中，全局锁是针对整个MySQL实例的锁，而不是仅限于当前正在使用的数据库。</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>其典型的使用场景是<strong>做全库的逻辑备份</strong>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性。</p><ol><li>不加锁的情况</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808094927666.png" alt="不加锁的情况"></p><ol start="2"><li>加锁的情况（包含使用锁，备份，释放锁的语句）</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808095133717.png" alt="加锁的情况"></p><blockquote><p>在InnoDB引擎中，我们可以在备份时加上参数 –single-transaction 参数来完成不加锁的一致性数据备份。在InnoDB引擎中，不加锁还能保证一致性其实是通过快照读来实现的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot –p123456 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>数据库中加全局锁，是一个比较<strong>重</strong>的操作，存在以下问题： </p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得<strong>停摆</strong>。 </li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导 致主从延迟。</li></ul><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>语法： </p><ul><li>加锁：lock tables 表名… read&#x2F;write。 </li><li>释放锁：unlock tables &#x2F; 客户端断开连接 。</li></ul><hr><p>对于表锁，分为两类： </p><ul><li>表共享读锁（read lock） <code>简称读锁</code></li></ul><blockquote><p>加锁后，所有客户端都能查询，但都不能增删改</p></blockquote><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808152427342.png" alt="image-20230808152427342"></p><ul><li>表独占写锁（write lock）<code>简称写锁</code></li></ul><blockquote><p>加锁后，当前客户端可以增删改查，其他客户端什么都不能做</p></blockquote><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808152449872.png" alt="image-20230808152449872"></p><h3 id="元数据锁（meta-data-lock，MDL）"><a href="#元数据锁（meta-data-lock，MDL）" class="headerlink" title="元数据锁（meta data lock，MDL）"></a>元数据锁（meta data lock，MDL）</h3><p>MDL加锁过程是<strong>系统自动控制，无需显式使用</strong>，在访问一张表的时候会自动加上。</p><blockquote><p>MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与 DDL冲突，保证读写的正确性。</p></blockquote><p>这里的元数据，可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务 时，是不能够修改这张表的表结构的。</p><p>相关原理：</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY &#x2F; SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select 、select … lock in share mode</td><td>SHARED_READ</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert 、update、 delete、select … for update</td><td>SHARED_WRITE</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE</td><td>与其他的MDL都互斥</td></tr></tbody></table><p>当执行SELECT、INSERT、UPDATE、DELETE等语句时，添加的是元数据共享锁（SHARED_READ &#x2F; SHARED_WRITE），之间是兼容的。</p><p>当执行SELECT语句时，添加的是元数据共享锁（SHARED_READ），会阻塞元数据排他锁 （EXCLUSIVE），之间是互斥的。</p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><blockquote><p>在InnoDB引擎中，意向锁主要解决的问题是行锁和表锁之间冲突的问题</p></blockquote><p>如下图所示</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808213525299.png" alt="image-20230808213525299"></p><p>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。</p><blockquote><p>补充：在该场景中，事务一开启了一个事务并对ID为3的数据行加上了行锁，这意味着其他事务不能修改这一行数据，保证了事务一对该行数据的独占性。而另一个客户端想要在整张表上加一个表锁，这时就会与事务一的行锁产生冲突，<strong>因为事务一的行锁会阻止其他事务在这一行上加行锁，也会阻止其他事务在整张表上加表锁。</strong></p></blockquote><p>有了意向锁之后：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808213815392.png" alt="image-20230808213815392"></p><p>有了意向锁之后，线程B会通过意向锁来判断是否可以加表锁，大大提升效率</p><p>分类 ：</p><ul><li><code>意向共享锁(IS)</code>: 由语句select … lock in share mode添加 。 与表锁共享锁 (read)兼容，与表锁排他锁(write)互斥。 </li><li><code>意向排他锁(IX)</code>: 由insert、update、delete、select…for update自动添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。</li></ul><blockquote><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</p></blockquote><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。 </p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p><blockquote><p>解释：当事务对某行数据执行操作（例如UPDATE、DELETE）时，InnoDB会通过对涉及的索引项加锁来实现行锁。这是因为索引项存储了数据行的位置信息，而不需要直接访问实际数据。其他事务想要修改相同数据行时，会尝试在相同的索引项上加锁，从而产生锁竞争。</p></blockquote><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在 RC、RR隔离级别下都支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808221002435.png" alt="image-20230808221002435"></p><hr><p>InnoDB实现了以下两种类型的行锁： </p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。 </li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ul><p>两种行锁的兼容性如下图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230809111747648.png" alt="image-20230809111747648"></p><p>常见的SQL语句，在执行时，所加的行锁如下：</p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><p>⭐⭐</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。 </li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。</li></ul><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁（Gap Lock）：锁定索引记录间隙（<strong>不含该记录</strong>），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808221125796.png" alt="image-20230808221125796"></p><h3 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h3><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230809212205666.png" alt="image-20230809212205666"></p><h1 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h1><p>逻辑存储结构</p><p>架构</p><h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>讨论事务的四个特性是如何实现保证的：</p><ol><li>原子性：一致性，持久性：redo log ，undo log</li><li>隔离性：锁，MVCC（多版本并发控制）</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230824163930519.png" alt="image-20230824163930519"></p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>重做日志</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>回滚日志</p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><ul><li>三个隐藏字段</li><li>undo log</li><li>readview</li></ul><p><strong>待补充。。。。。。。。。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后续优化</title>
      <link href="/2023/01/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/"/>
      <url>/2023/01/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前完成了瑞吉外卖项目的全部功能，但未对性能进行优化，本次将使用redis等技术实现优化。</p><h2 id="缓存短信验证码"><a href="#缓存短信验证码" class="headerlink" title="缓存短信验证码"></a>缓存短信验证码</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>之前的短信验证码是存在session中的，相较于存在redis而言，它不那么安全，且不能设置短信验证码生效时间，故使用redis进行优化。</p><ul><li><p>在UserController类中注入redisTemplate对象</p></li><li><p>将验证码存入redis中，并设置验证码过期时间</p></li><li><p>从redis中获取验证码，并在登录成功后立即删除验证码</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将验证码存入Session</span></span><br><span class="line"><span class="comment">//session.setAttribute(phone, code);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将验证码存入redis中，并设置验证码过期时间</span></span><br><span class="line">redisTemplate.opsForValue().setIfAbsent(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从session中取出生成的验证码</span></span><br><span class="line"><span class="comment">//Object codeInSession = session.getAttribute(phone);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从redis中取出生成的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功后，删除redis中的数据</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure><hr><h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>移动端在登录过后，会经常访问展示菜品和套餐的界面，该界面的展示方法对应的是DishController和SetmealController中的两个list方法，故需要对该方法进行缓存优化，使得存在缓存时将缓存数据直接传给前端，而无需再访问数据库。</p><p>其次是要防止产生脏数据，如需要在save，update，status方法执行后将缓存清除，以免数据库的数据已经更改，而移动端页面因为存在缓存而不查询数据库导致数据的错乱。</p><p>此处需注意的是，我们不对delete方法做清除缓存的原因是：我们设计数据库表的时候对于菜品或者套餐的删除是逻辑删除，同时list展示方法也会有起售状态的限制，故无需再在delete方法上对缓存进行清除。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>此处对于key的处理是统一使用分类来进行区分，当我们点击某一个分类时，只需展示当前分类下的菜品，而其他分类的菜品数据并不需要展示。</p><h4 id="list方法"><a href="#list方法" class="headerlink" title="list方法"></a>list方法</h4><ul><li>动态获取key</li><li>判断是否存在缓存</li><li>缓存存在则无需查询数据库，直接返回缓存</li><li>缓存不存在则查询数据库，并将查询结果保存在缓存中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动端展示菜品数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">        <span class="comment">//动态获取一个key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断缓存是否存在</span></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList;</span><br><span class="line">        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存存在，则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (dishDtoList != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存不存在，则查询数据库，并将查询到的集合存入缓存中</span></span><br><span class="line">        dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">            <span class="comment">//获得菜品分类的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="comment">//根据id查询分类对象</span></span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前菜品的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">            dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">            dishDtoList.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将查询到的集合存入缓存中</span></span><br><span class="line">        redisTemplate.opsForValue().setIfAbsent(key, dishDtoList, <span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save方法"><a href="#save方法" class="headerlink" title="save方法"></a>save方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="status方法"><a href="#status方法" class="headerlink" title="status方法"></a>status方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量起售、停售菜品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">            dish.setStatus(status);</span><br><span class="line">            dishService.updateById(dish);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringCache技术"><a href="#SpringCache技术" class="headerlink" title="SpringCache技术"></a>SpringCache技术</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SpringCache是一个框架，实现了基本注解的缓存功能，只需要简单的添加一个注解，就能实现缓存功能</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">开启缓存注解功能</td></tr><tr><td align="center">@Cacheable</td><td align="center">在方法执行前spring先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td align="center">@CachePut</td><td align="center">将方法的返回值放到缓存中</td></tr><tr><td align="center">@CacheEvict</td><td align="center">将一条或者多条数据从缓存中删除</td></tr></tbody></table><hr><h2 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p>与菜品的分析基本一致，此处不过是用另一种较为简单的方式进行操作缓存而已</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li>导入maven坐标</li><li>在application.yml文件配置cache</li><li>在启动类上加上<code>@EnableCaching</code>注解</li><li>list方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId+&#x27;_&#x27;+#setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="5"><li>save方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="6"><li>update方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="7"><li>status方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br></pre></td></tr></table></figure><hr><h1 id="读写分离优化"><a href="#读写分离优化" class="headerlink" title="读写分离优化"></a>读写分离优化</h1><h2 id="为什么要读写分离"><a href="#为什么要读写分离" class="headerlink" title="为什么要读写分离"></a>为什么要读写分离</h2><p>因为之前对于数据库的增删改查都是对同一台服务器进行操作，不仅这样对单个服务器的压力很大，而且如果该服务器的硬盘损毁，则数据也会丢失，会不安全。而使用读写分离是基于MySQL提供的主从复制功能实现，我们可以对主库进行增删改的操作，对从库进行查找的操作，而对主库的修改会通过日志的形式同步修改到从库中，从而保证数据是正确的。</p><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.png" alt="读写分离图"></p><hr><h2 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h2><p>MySQL复制过程分成三步:</p><ul><li><p>master将改变记录到二进制日志（binary log)</p></li><li><p>slave将master的binary log拷贝到它的中继日志（relay log)</p></li><li><p>slave重做中继日志中的事件，将改变应用到自己的数据库中</p></li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/image-20230728162538415.png" alt="image-20230728162538415"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>后续的MySQL的读写分离优化，nginx，swagger等优化待续……</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2023/01/04/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/01/04/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在学习瑞吉外卖项目时使用到的stream流操作，现在回来补一下，看的视频教程依然是<a href="https://www.bilibili.com/video/BV18J411W7cE/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a></p><h2 id="lambda表达式⭐⭐⭐"><a href="#lambda表达式⭐⭐⭐" class="headerlink" title="lambda表达式⭐⭐⭐"></a>lambda表达式⭐⭐⭐</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以理解为是匿名内部类的另一种写法，本质是注重做了什么。</p></blockquote><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><blockquote><ul><li><p>需要有一个接口，该接口中有且仅有一个抽象方法，其实也可以说是函数式接口。</p></li><li><p>必须要有上下文环境，即可以推导</p></li></ul></blockquote><h3 id="具体格式（形式）"><a href="#具体格式（形式）" class="headerlink" title="具体格式（形式）"></a>具体格式（形式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（调用的参数）-&gt;&#123;</span><br><span class="line">    执行的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，诸如<code>int</code>，<code>String</code>这样的变量类型可以省略，不过要省就全部一起省，只用一个调用参数的话小括号也可以省，只有一条执行语句大括号也可以省略，且此时<code>return</code>关键字也可以省略。</p><hr><h2 id="方法引用⭐⭐"><a href="#方法引用⭐⭐" class="headerlink" title="方法引用⭐⭐"></a>方法引用⭐⭐</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以用lambda表达式的地方就可以使用方法引用，可以说他们是孪生兄弟。</p></blockquote><h3 id="具体形式"><a href="#具体形式" class="headerlink" title="具体形式"></a>具体形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out::println</span><br></pre></td></tr></table></figure><p>可以理解为System.out这个对象调用了println这个方法，因为跟lambda类似，是可以推导出来的，（<strong>能推导的就是可以省略的</strong>）</p><h3 id="几种形式"><a href="#几种形式" class="headerlink" title="几种形式"></a>几种形式</h3><ol><li>引用类方法：</li></ol><p>​类名::静态方法（Interger::parseInt）</p><ol start="2"><li>引用对象的实例方法</li></ol><p>​对象::方法</p><ol start="3"><li>引用类的实例方法</li></ol><p>​类名::方法</p><ol start="4"><li>引用构造器</li></ol><p>​类名::new</p><blockquote><p>具体可以参考<a href="https://www.bilibili.com/video/BV12R4y157Be/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">mybatisplus学习</a>中的条件构造器</p></blockquote><hr><h2 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h2><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>在方法前可以加一个default代表默认方法，实现该接口的实现类不用必须重写该方法，但有需要也是可以重写的。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>在方法前加一个static就代表是静态方法，同样无须重写，甚至还可以有方法体。</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>加入private关键字就是私有方法了</p><hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个接口有且只有一个抽象方法就是函数式接口，可以加<code>@FunctionalInterface</code>注解表明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><p><strong>意义在于：函数式接口作为方法的参数时，可以把lambda表达式作为参数传递。</strong></p><p>下面例子中<code>Runnable</code>就是一个函数式接口，有且仅有一个run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        useThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useThread(()-&gt; System.out.println(<span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useThread</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p>意义在于：函数式接口作为方法的返回值时，可以把lambda表达式写到方法返回值处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        arrayList.sort(getByLong());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title function_">getByLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类</span></span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length() - s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用lambda</span></span><br><span class="line">        <span class="keyword">return</span> (s1, s2) -&gt; s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来代码优雅多了~~</p><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><ol><li><p>Supplier</p></li><li><p>Consumer</p></li><li><p>Predicate</p></li><li><p>Function</p><p><img src="/../assets/java8%E6%96%B0%E7%89%B9%E6%80%A7/%E5%9B%9B%E5%A4%A7%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="四大内置函数式接口"></p></li></ol><blockquote><p>其实我觉得没啥用，感觉多此一举了，下面举个例子吧，有需要再去看<a href="https://www.bilibili.com/video/BV18J411W7cE/?p=386&spm_id_from=pageDriver&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a>了，感觉也是用不上的，其实就是在这些常用API中使用lambda表达式而已。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>&#125;;</span><br><span class="line">        operateString(strArray, s -&gt; System.out.print(<span class="string">&quot;姓名：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]), s -&gt; System.out.println(<span class="string">&quot;，年龄：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operateString</span><span class="params">(String[] strArray, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : strArray) &#123;</span><br><span class="line">            con1.andThen(con2).accept(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="stream流⭐⭐⭐⭐⭐"><a href="#stream流⭐⭐⭐⭐⭐" class="headerlink" title="stream流⭐⭐⭐⭐⭐"></a>stream流⭐⭐⭐⭐⭐</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小乌龟&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李强&quot;</span>);</span><br><span class="line">        <span class="comment">//要求：对集合进行过滤，要“小”开头且长度为2的字符串，最后打印</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;小&quot;</span>)).filter(s -&gt; s.length() == <span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="流的生成操作"><a href="#流的生成操作" class="headerlink" title="流的生成操作"></a>流的生成操作</h3><ol><li><p>Collection体系的诸如list和set可直接调用stream流生成</p></li><li><p>map集合可以先生成<code>keySet</code>，<code>value</code>，<code>entrySet</code>，再通过stream流生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure></li><li><p>数组可以通过Stream的静态方法生成流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="流的中间操作"><a href="#流的中间操作" class="headerlink" title="流的中间操作"></a>流的中间操作</h3><ol><li><p>filter</p><p>用于过滤，方法中调用的参数是Predicate，该类中有一个test方法用于判断得到boolean值</p><p>例子可见实例处</p></li><li><p>limit</p><p>取前n个元素</p></li><li><p>skip</p><p>取n个元素之后的元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳过前2个元素之后去剩余元素的前2个元素并输出</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>静态方法concat</p><p>合并两个流</p></li><li><p>distinct</p><p>去除流中重复元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建第一个流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//创建第二个流</span></span><br><span class="line">Stream&lt;String&gt; stream2 = list.stream().skip(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//合并两个流，并要求字符串不能有重复</span></span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1, stream2);</span><br><span class="line">concat.distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="6"><li><p>sorted</p><p>排序，不加参数按自然排序，加比较器参数（使用lambda表达式）后按指定形式排序</p></li><li><p>map和mapToInt</p><p>将流中的元素由一种类型转换为另一种类型，而mapToInt是直接转换为Int型，拥有独有的sum用于统计总和</p></li><li><p>match</p></li></ol><p>判断数据是否匹配指定的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// .allMatch(e -&gt; e &gt; 0); // allMatch: 元素是否全部满足条件</span></span><br><span class="line"><span class="comment">// .anyMatch(e -&gt; e &gt; 5); // anyMatch: 元素是否任意有一个满足条件</span></span><br><span class="line">.noneMatch(e -&gt; e &lt; <span class="number">0</span>); <span class="comment">// noneMatch: 元素是否全部不满足条件</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>max和min</li></ol><p>获取最大和最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMax_Min</span><span class="params">()</span> &#123;</span><br><span class="line">Optional&lt;Integer&gt; max = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).max((o1, o2) -&gt; o1 - o2);</span><br><span class="line">System.out.println(<span class="string">&quot;first = &quot;</span> + max.get());</span><br><span class="line">Optional&lt;Integer&gt; min = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).min((o1, o2) -&gt; o1 - o2);</span><br><span class="line">System.out.println(<span class="string">&quot;any = &quot;</span> + min.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>reduce</li></ol><p>将所有数据归纳得到一个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReduce</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (a, b) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;, b = &quot;</span> + b);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// reduce:</span></span><br><span class="line"><span class="comment">// 第一次将默认做赋值给x, 取出第一个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第二次,将第一次的结果赋值给x, 取出二个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第三次,将第二次的结果赋值给x, 取出三个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第四次,将第三次的结果赋值给x, 取出四个元素赋值给y,进行操作</span></span><br><span class="line">System.out.println(<span class="string">&quot;reduce = &quot;</span> + reduce);</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce2</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.sum(x, y);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce3</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;max = &quot;</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>find</li></ol><p>查找满足条件的第一个数据</p><blockquote><p>两个方法的区别：</p><ol><li><code>findFirst</code> 方法： <code>findFirst</code> 方法会在流中按顺序查找元素，并返回第一个满足条件的元素。这通常在需要获取流中的第一个匹配元素时使用。由于流可能是有序或无序的，这个方法在有序流中会返回第一个匹配的元素，而在无序流中会返回其中的任意一个匹配元素。</li><li><code>findAny</code> 方法： <code>findAny</code> 方法则会在流中查找任意满足条件的元素，并返回找到的任意一个匹配元素。这个方法在需要快速找到任意一个匹配元素时比较有用，尤其是在并行流操作时，因为它不需要保证顺序，因此可能会更快地找到匹配元素。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; first = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).filter(s -&gt; s &gt; <span class="number">3</span>).findFirst();</span><br><span class="line">System.out.println(first.get());</span><br></pre></td></tr></table></figure><hr><h3 id="流的终止操作"><a href="#流的终止操作" class="headerlink" title="流的终止操作"></a>流的终止操作</h3><ol><li><p>forEach</p><p>使用参数进行操作，例如打印输出</p></li><li><p>count</p><p>统计流中个数</p></li></ol><h3 id="流的收集操作"><a href="#流的收集操作" class="headerlink" title="流的收集操作"></a>流的收集操作</h3><p>收集Stream流中的结果 </p><ol><li>到集合中: Collectors.toList()&#x2F;Collectors.toSet()&#x2F;Collectors.toCollection()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToCollection</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">ArrayList&lt;String&gt; arrayList =              stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">HashSet&lt;String&gt; hashSet = stream.collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>到数组中: toArray()&#x2F;toArray(int[]::new)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToArray</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">String[] strings = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">for</span> (String str : strings) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>聚合计算:</li></ol><blockquote><p>Collectors.maxBy&#x2F;Collectors.minBy&#x2F;Collectors.counting&#x2F;Collectors.summingInt&#x2F;Collectors.averagingInt</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToOther</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">58</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="comment">// 获取最大值</span></span><br><span class="line">Optional&lt;Student&gt; collect = studentStream.collect(Collectors.maxBy((o1, o2) -&gt;</span><br><span class="line">o1.getSocre() - o2.getSocre()));</span><br><span class="line"><span class="comment">// 获取最小值</span></span><br><span class="line">Optional&lt;Student&gt; collect = studentStream.collect(Collectors.minBy((o1, o2) -&gt;</span><br><span class="line">o1.getSocre() - o2.getSocre()));</span><br><span class="line">System.out.println(collect.get());</span><br><span class="line"><span class="comment">// 求总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sumAge</span> <span class="operator">=</span> studentStream.collect(Collectors.summingInt(s -&gt; s.getAge()));</span><br><span class="line">System.out.println(<span class="string">&quot;sumAge = &quot;</span> + sumAge);</span><br><span class="line"><span class="comment">// 平均值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">avgScore</span> <span class="operator">=</span> studentStream.collect(Collectors.averagingInt(s -&gt;                                                        s.getSocre()));</span><br><span class="line">System.out.println(<span class="string">&quot;avgScore = &quot;</span> + avgScore);</span><br><span class="line"><span class="comment">// 统计数量</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> studentStream.collect(Collectors.counting());</span><br><span class="line">System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>分组: Collectors.groupingBy</li></ol><blockquote><p>当我们使用Stream流处理数据后，可以根据某个属性将数据分组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGroup</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">55</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">33</span>));</span><br><span class="line"><span class="comment">// Map&lt;Integer, List&lt;Student&gt;&gt; map =</span></span><br><span class="line">studentStream.collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line"><span class="comment">// 将分数大于60的分为一组,小于60分成另一组</span></span><br><span class="line">Map&lt;String, List&lt;Student&gt;&gt; map = studentStream</span><br><span class="line">        .collect(Collectors.groupingBy((s) -&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (s.getSocre() &gt; <span class="number">60</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot;::&quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不及格::[Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=55&#125;, Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=33&#125;]</span><br><span class="line">及格::[Student&#123;name=&#x27;赵丽颖&#x27;, age=52, socre=95&#125;, Student&#123;name=&#x27;杨颖&#x27;, age=56, socre=88&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>多级分组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomGroup</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line">Map&lt;Integer, Map&lt;String, List&lt;Student&gt;&gt;&gt; map =</span><br><span class="line">studentStream.collect(Collectors.groupingBy(s -&gt; s.getAge(), </span><br><span class="line">                                            Collectors.groupingBy(s -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">80</span> &amp;&amp; s.getSocre() &lt; <span class="number">90</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">80</span> &amp;&amp; s.getSocre() &lt; <span class="number">80</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot; == &quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">52 == &#123;不及格=[Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=77&#125;], 优秀=[Student&#123;name=&#x27;赵丽颖&#x27;, age=52,</span><br><span class="line">socre=95&#125;]&#125;</span><br><span class="line">56 == &#123;优秀=[Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=99&#125;], 良好=[Student&#123;name=&#x27;杨颖&#x27;, age=56,</span><br><span class="line">socre=88&#125;]&#125;</span><br></pre></td></tr></table></figure><hr><ol start="5"><li>分区: Collectors.partitionBy</li></ol><blockquote><p>Collectors.partitioningBy 会根据值是否为true，把集合分割为两个列表，一个true列表，一个false列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPartition</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="comment">// partitioningBy会根据值是否为true，把集合分割为两个列表，一个true列表，一个false列表。</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; map = studentStream.collect(Collectors.partitioningBy(s -&gt;s.getSocre() &gt; <span class="number">90</span>));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot; == &quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false == [Student&#123;name=&#x27;杨颖&#x27;, age=56, socre=88&#125;, Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=77&#125;]</span><br><span class="line">true == [Student&#123;name=&#x27;赵丽颖&#x27;, age=52, socre=95&#125;, Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=99&#125;]</span><br></pre></td></tr></table></figure><hr><ol start="6"><li>拼接: Collectors.joinging</li></ol><blockquote><p>Collectors.joining 会根据指定的连接符，将所有元素连接成一个字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJoining</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> studentStream</span><br><span class="line">.map(Student::getName)</span><br><span class="line">.collect(Collectors.joining(<span class="string">&quot;&gt;_&lt;&quot;</span>, <span class="string">&quot;^_^&quot;</span>, <span class="string">&quot;^v^&quot;</span>));</span><br><span class="line">System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^_^赵丽颖&gt;_&lt;杨颖&gt;_&lt;迪丽热巴&gt;_&lt;柳岩^v^</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后端代码实现</title>
      <link href="/2022/12/31/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/12/31/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人参照<a href="https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.999.0.0&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员瑞吉外卖</a>视频进行学习，并完善了剩余功能。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="主要使用的技术"><a href="#主要使用的技术" class="headerlink" title="主要使用的技术"></a>主要使用的技术</h3><blockquote><ul><li><p>后端：<code>springboot，spring，springmvc，mybatis，mybatis-plus </code></p></li><li><p>前端：<code>html,css,js,vue,elementui</code></p></li></ul></blockquote><h3 id="搭建数据库（reggie）-表"><a href="#搭建数据库（reggie）-表" class="headerlink" title="搭建数据库（reggie）&#x2F;表"></a>搭建数据库（reggie）&#x2F;表</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8.png" alt="数据库表图"></p><p>具体表中的各个字段所代表的意义都已在数据库设计表中的注释提及</p><table><thead><tr><th>表名</th><th>表的描述</th></tr></thead><tbody><tr><td>employee（员工表）</td><td>用于存放后台管理人员的信息</td></tr><tr><td>category（分类表）</td><td>分类表中存放的是菜品的分类和套餐的分类</td></tr><tr><td>dish（菜品表）</td><td>存放的是菜品的信息，一个菜品必属于一个菜品分类，一个菜品分类也可以有不止一种菜品</td></tr><tr><td>dish_flavor（菜品口味表）</td><td>存放的是菜品口味的信息，一个菜品可以有多种口味，对应着就会有多条数据是隶属于一个菜品的，其中已经用菜品的<code>id</code>把对应的菜品和菜品口味关联好</td></tr><tr><td>setmeal（套餐表）</td><td>存放的是套餐的信息，一个套餐必属于一个套餐分类，一个套餐分类也可以有不止一种套餐</td></tr><tr><td>setmeal_dish（套餐菜品对应表）</td><td>存放的是套餐里所包含的菜品的信息（<strong>因为一个套餐是由若干个菜品相组成的</strong>），此处存放的信息就是该套餐下所包含的是哪些菜品</td></tr><tr><td>orders（订单表）</td><td>存放的是用户下单之后的订单的简单信息（包括订单号，订单状态，收货人，联系电话，地址，支付金额，下单时间）</td></tr><tr><td>order_details（订单明细表）</td><td>存放的是用户下单之后的订单的更多信息（包含了用户购买的是哪些菜品或套餐）</td></tr><tr><td>address_book（地址簿表）</td><td>存放的是用户的地址信息，也包含默认地址等</td></tr><tr><td>shoppingcart（购物车表）</td><td>存放的是用户通过移动端点击对应的菜品或套餐所加入的数据，清空购物车自然就是清空<strong>该用户</strong>的购物车数据</td></tr><tr><td>user（用户表）</td><td>存放的是用户的基本信息</td></tr></tbody></table><hr><h3 id="Idea中的基本配置"><a href="#Idea中的基本配置" class="headerlink" title="Idea中的基本配置"></a>Idea中的基本配置</h3><blockquote><p>通过mybatis-plus来逆向创建对应的pojo，mapper，service接口和serviceImpl实体类即可。</p></blockquote><h4 id="创建通用的R类（通用返回结果类）"><a href="#创建通用的R类（通用返回结果类）" class="headerlink" title="创建通用的R类（通用返回结果类）"></a>创建通用的R类（通用返回结果类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="设置静态资源映射"><a href="#设置静态资源映射" class="headerlink" title="设置静态资源映射"></a>设置静态资源映射</h4><blockquote><p>主要是让Spring可以扫描<code>backend</code>和<code>front</code>下的静态资源（HTML,CSS.JS）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台员工登录登出功能"><a href="#后台员工登录登出功能" class="headerlink" title="后台员工登录登出功能"></a>后台员工登录登出功能</h2><h3 id="员工登录功能"><a href="#员工登录功能" class="headerlink" title="员工登录功能"></a>员工登录功能</h3><blockquote><p><strong>员工登录功能</strong></p><ol><li><p>将页面提交过来的<code>password</code>进行<code>md5</code>加密</p></li><li><p>根据用户提交的用户名查询数据库</p></li><li><p>如果用户不存在则退出</p></li><li><p>密码比对，如果不成功则退出</p></li><li><p>查看账号是否已被禁用</p></li><li><p>登录成功，将员工的<code>id</code>存入<code>Session</code>(重点)中，（此处获得这个<code>id</code>的作用是让员工管理业面可显示出此时登录者的名字）并返回登录成功结果</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.将页面提交过来的password进行md5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据用户提交的用户名查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果用户不存在则退出</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.密码比对，如果不成功则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(emp.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.查看账号是否已被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="员工登出功能"><a href="#员工登出功能" class="headerlink" title="员工登出功能"></a>员工登出功能</h3><blockquote><ol><li><p>将登录时存在<code>Session</code>中的<code>id</code>释放出来</p></li><li><p>返回结果（注意：此时业面跳转不显示<strong>退出成功</strong>的原因是：因为显示<code>退出成功</code>的<code>html</code>页面已经关闭，故在登录页看不到<code>退出成功</code>的显示）</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="完善员工登录登出"><a href="#完善员工登录登出" class="headerlink" title="完善员工登录登出"></a>完善员工登录登出</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><blockquote><p>因为可以不通过登录而直接访问员工管理的页面，这显然是不合理的，需要通过设置一个拦截器，去让用户必须先登录才能访问员工管理页面。</p><ol><li><p>获取本次请求的URI</p></li><li><p>定义不需要处理的请求路径（即一个字符串数组）</p></li><li><p>创建一个<code>PATH_MATCHER</code>来比对路径上的通配符</p></li><li><p>判断本次请求是否需要处理</p></li><li><p>如果不需要处理，则直接放行</p></li><li><p>判断登录状态，如果已登录，则直接放行</p></li><li><p>如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,<span class="comment">//登录的请求路径</span></span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,<span class="comment">//登出的请求路径</span></span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,<span class="comment">//后台的静态资源</span></span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span><span class="comment">//移动端的静态资源</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls,String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="踩坑点"><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h4><blockquote><p>若没加<code>.getSession()</code>则会使登录成功后一直重新回到登录页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"><span class="keyword">return</span> R.success(emp);</span><br></pre></td></tr></table></figure><blockquote><p>如果还有问题，可以尝试去清除一下浏览器缓存</p></blockquote><hr><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><h3 id="新增员工功能"><a href="#新增员工功能" class="headerlink" title="新增员工功能"></a>新增员工功能</h3><hr><blockquote><p><strong>需求分析</strong>：因为前端页面展示的让用户新增员工时所填的信息有限，一部分<code>employee</code>分装对象中的属性，即表中的字段需要<strong>填入默认值</strong>，故该方法用于接收前端页面所传递过来的包装好的<code>employee</code>对象，并将<strong>该对象存进表中</strong>。</p></blockquote><blockquote><p>功能分析：</p><ol><li><p>设置默认密码(使用<code>md5</code>加密处理)</p></li><li><p>获取登录时传入<code>Session</code>中的<code>id</code></p></li><li><p>添加创建人信息（该创建人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加修改人信息（该修改人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加创建时间</p></li><li><p>添加更新时间</p></li><li><p>将该对象的属性存入表中</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置默认密码(使用md5加密处理)</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取登录时传入Session中的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="comment">//添加创建人信息</span></span><br><span class="line">        employee.setCreateUser(empId);</span><br><span class="line">        <span class="comment">//添加修改人信息</span></span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        <span class="comment">//添加创建时间</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//添加更新时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//将该对象的属性存入表中</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="完善新增员工功能"><a href="#完善新增员工功能" class="headerlink" title="完善新增员工功能"></a>完善新增员工功能</h3><blockquote><p><strong>需求分析</strong>：</p><p>因为<code>employee</code>表中的<code>username</code>字段被设置为了唯一的约束，故在前端页面填写时输入相同的<code>username</code>会抛出异常，故需要做出解决，提出错误信息。</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li><p>配置全局异常的一个类，让所有<code>Controller</code>层的类的异常都经过该类处理。</p></li><li><p>解决上述索引唯一的异常，为前端展示错误信息。</p></li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="员工分页查询显示到前端"><a href="#员工分页查询显示到前端" class="headerlink" title="员工分页查询显示到前端"></a>员工分页查询显示到前端</h2><h3 id="分页查询功能"><a href="#分页查询功能" class="headerlink" title="分页查询功能"></a>分页查询功能</h3><blockquote><p><strong>需求分析：</strong></p><p>前端发送<code>get</code>请求，把<code>page</code>当前页,<code>pageSize</code>每页显示条数,<code>name</code>查询名等参数传入<code>controller</code>层，后端进行分页查询和条件查询并把查询对象传回给前端</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li>添加mybatis-plus的分页插件</li><li>构造分页查询器</li><li>构造条件查询器</li><li>添加过滤条件（这里使用<code>like</code>而不是<code>eq</code>）</li><li>添加排序条件</li><li>执行查询，返回结果（结果中返回的<code>pageInfo</code>对象是因为查询完后会将数据封装到该对象中，并且与前端中相响应）</li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页查询器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//构造条件查询器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(name),Employee::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        employeeService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%9D%A1.png" alt="前端分页条"></p><blockquote><p>该处可去前端页面修改<code>list.html</code></p></blockquote><hr><h2 id="启用-禁用员工账号"><a href="#启用-禁用员工账号" class="headerlink" title="启用&#x2F;禁用员工账号"></a>启用&#x2F;禁用员工账号</h2><h3 id="启用-禁用员工账号功能实现"><a href="#启用-禁用员工账号功能实现" class="headerlink" title="启用&#x2F;禁用员工账号功能实现"></a>启用&#x2F;禁用员工账号功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>管理员账号<code>admin</code>可以对员工账号进行启用和禁用操作，而其他用户不可进行该操作</p><p><strong>代码实现：</strong></p><p>本质上是一个update操作，<code>status</code>和<code>id</code>已经从前端传入，需要额外更改的是更新人和更新时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><blockquote><p><strong>原因分析：</strong></p><p><code>js</code>对<code>Long</code>类型的数据的处理时丢失了精度，导致前端发送过来的<code>id</code>与数据库中的<code>id</code>不一致</p></blockquote><blockquote><p><strong>解决方案：</strong></p><p>将<code>json</code>中的<code>Long</code>型数据转成字符串，在配置中添加对应的方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器（写在WebMVCConfig中）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="编辑员工信息功能"><a href="#编辑员工信息功能" class="headerlink" title="编辑员工信息功能"></a>编辑员工信息功能</h2><h3 id="编辑员工信息功能实现"><a href="#编辑员工信息功能实现" class="headerlink" title="编辑员工信息功能实现"></a>编辑员工信息功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>用户点击编辑时进入编辑界面，此时登录页面时可以看到用户原本的信息，再经过修改信息后保存到数据库。</p></blockquote><hr><h4 id="回显功能实现（进入编辑页面可看到用户原始信息）"><a href="#回显功能实现（进入编辑页面可看到用户原始信息）" class="headerlink" title="回显功能实现（进入编辑页面可看到用户原始信息）"></a>回显功能实现（进入编辑页面可看到用户原始信息）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编辑功能实现"><a href="#编辑功能实现" class="headerlink" title="编辑功能实现"></a>编辑功能实现</h4><blockquote><p>注意：此处直接调用的是启用&#x2F;禁用员工账号时的方法，因为传入的是一个<code>employee</code>对象，故该方法是一个通用的  更新方法。</p></blockquote><hr><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><h3 id="为什么要对公共字段填充"><a href="#为什么要对公共字段填充" class="headerlink" title="为什么要对公共字段填充"></a>为什么要对公共字段填充</h3><blockquote><p>因为不论是在员工管理处还是菜品或者套餐管理处都需要添加诸如<code>createTime</code>，<code>updateTime</code>，<code>createUser</code>，以及<code>updateUser</code>这四个字段，故可以使用<code>mybatis-plus</code>提供的公共字段自动填充方法，省去手动为用户填写这四个信息。</p></blockquote><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><hr><h4 id="1-在employee表中这四个字段上添加相应属性"><a href="#1-在employee表中这四个字段上添加相应属性" class="headerlink" title="1.在employee表中这四个字段上添加相应属性"></a>1.在<code>employee</code>表中这四个字段上添加相应属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//此处要修改为LocalDateTime，因为数据库中与这里使用的类型不一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//与上同理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>updateTime</code>和<code>updateUser</code>需要在创建和更改时都做更改</p></blockquote><hr><h4 id="2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去"><a href="#2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去" class="headerlink" title="2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去"></a>2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去</h4><hr><h4 id="3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"><a href="#3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id" class="headerlink" title="3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"></a>3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</h4><blockquote><p>创建该工具类，因为在一次Http请求中线程是唯一的，故可以通过该方式得到存入Session中存放的id。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-自定义元数据对象处理器（即公共字段自动填充类）"><a href="#4-自定义元数据对象处理器（即公共字段自动填充类）" class="headerlink" title="4.自定义元数据对象处理器（即公共字段自动填充类）"></a>4.自定义元数据对象处理器（即公共字段自动填充类）</h4><blockquote><p>该类中重写两个方法，分别用于插入操作和更新操作时的自动填充。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-将Session中存放的id存入线程中"><a href="#5-将Session中存放的id存入线程中" class="headerlink" title="5.将Session中存放的id存入线程中"></a>5.将Session中存放的id存入线程中</h4><blockquote><p>在已登录的情况下将Session中存放的id存入线程中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="小结（逻辑）"><a href="#小结（逻辑）" class="headerlink" title="小结（逻辑）"></a>小结（逻辑）</h3><blockquote><p>在一次Http请求中线程是不会发生改变的，也就是说，在发送请求给后端时，经过过滤器，再经过Controller，最后在MyMetaObjecthandler实现自动填充方法时的线程的id都是不会发生改变的。</p><p>需要使用到线程的原因是因为在自动填充更新人和创建人的时候，需要将用户的id传入，但在MyMetaObjecthandler类中无法直接获得到Session中的id，故需要使用该方法。</p></blockquote><hr><h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="新增分类功能实现"><a href="#新增分类功能实现" class="headerlink" title="新增分类功能实现"></a>新增分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分类分页查询显示数据到页面上"><a href="#分类分页查询显示数据到页面上" class="headerlink" title="分类分页查询显示数据到页面上"></a>分类分页查询显示数据到页面上</h2><h3 id="分类分页查询功能实现"><a href="#分类分页查询功能实现" class="headerlink" title="分类分页查询功能实现"></a>分类分页查询功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">        categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p><strong>注意</strong>：因为分类表中包含着菜品分类和套餐分类，而对应的菜品表和套餐表中存在着一些关联，故规定菜品表（套餐表）中存在关联的分类不允许删除。</p></blockquote><h3 id="代码功能实现"><a href="#代码功能实现" class="headerlink" title="代码功能实现"></a>代码功能实现</h3><ul><li><strong>在<code>CategoryController</code>类中调用自定义方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">        categoryService.remove(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>在<code>CategoryService</code>接口中创建自定义方法<code>remove</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>在<code>CategoryServiceImpl</code>实现类中实现方法</strong></p><blockquote><p>通过查询菜品表或商品表中<code>CategoryId</code>与传入的<code>id</code>相等的数量，若大于零则证明存在关联，则不允许删除，则抛出一个自定义的异常</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除，删除前需判断条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">        <span class="comment">//查看是否关联菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看是否关联套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//无关联则进行删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>自定义异常类<code>CustomException</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将该异常交于之前定义的全局异常处理器处理</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="修改分类功能实现"><a href="#修改分类功能实现" class="headerlink" title="修改分类功能实现"></a>修改分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p>用于新增菜品时的图片的上传和回显</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//abc.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;<span class="comment">//dfsdfdfd.jpg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>点击新建菜品后，页面会立即发送一个请求（获取菜品分类信息列表）</strong></p><p><strong>菜品图片得上传和回显由之前完成</strong></p><p><strong>此处新增菜品所上传得数据不只有菜品表的信息，还有菜品口味表的信息，故接受数据需要一个新的类</strong></p></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>菜品分类展示为下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新建一个类用于接受前端发送的数据</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//菜品口味列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新添加一个方法用于一次修改两张表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="comment">//新增菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>实现该方法</strong></p><blockquote><p><strong>注意：此处需要开始事务，并且由前端传入的菜品口味数据中没有与之对应的菜品<code>id</code>，故需要拿到菜品口味的列表集合进行<code>id</code>的赋值。</strong></p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息保存到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜品口味存入菜品口味表</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品分页展示"><a href="#菜品分页展示" class="headerlink" title="菜品分页展示"></a>菜品分页展示</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>与员工和分类的查询的不同之处在于：<code>Dish</code>表中所有的只是分类的<code>id</code>而不是分类的名称，但前端页面需要展示的是分类的名称而不是<code>id</code>。</strong></p></blockquote><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>在基础上加以改变</p><ul><li>将分页对象pageInfo拷贝给dishDtoPage，但不拷贝records这个集合（该集合存储的是前端传入的数据）</li><li>将List<Dish>传给List<DishDto>的同时，将分类的名称也传入List<DishDto></li><li>实现方式为用列表存储多个DishDto对象，通过分类id得到分类对象，再通过分类对象得到分类名称，将分类名称放入DishDto对象中，并将Dish中的其他属性拷贝至DishDto中，最后统一由list收集DishDto对象。</li><li>将list对象传入分页对象的recodes属性中。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish record : records) &#123;</span><br><span class="line">   <span class="comment">//每轮循环创造一个新的disDto对象</span></span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record,dishDto);</span><br><span class="line"></span><br><span class="line">            list.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            DishDto dishDto = new DishDto();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            BeanUtils.copyProperties(item,dishDto);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            Long categoryId = item.getCategoryId();//分类id</span></span><br><span class="line"><span class="comment">//            //根据id查询分类对象</span></span><br><span class="line"><span class="comment">//            Category category = categoryService.getById(categoryId);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if(category != null)&#123;</span></span><br><span class="line"><span class="comment">//                String categoryName = category.getName();</span></span><br><span class="line"><span class="comment">//                dishDto.setCategoryName(categoryName);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return dishDto;</span></span><br><span class="line"><span class="comment">//        &#125;).collect(Collectors.toList());</span></span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量起售和停售"><a href="#菜品的批量起售和停售" class="headerlink" title="菜品的批量起售和停售"></a>菜品的批量起售和停售</h2><blockquote><p>需要修改：若菜品关联了套餐，则不允许停售</p></blockquote><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84.png" alt="请求路径"></p><blockquote><h6 id="注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"><a href="#注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入" class="headerlink" title="注意点：@PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"></a><strong>注意点：<code>@PathVariable</code>的使用，在有多个参数时需加上占位符的值才能让值传入</strong></h6></blockquote><hr><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">                dish.setStatus(status);</span><br><span class="line">                dishService.updateById(dish);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改菜品信息"><a href="#修改菜品信息" class="headerlink" title="修改菜品信息"></a>修改菜品信息</h2><h3 id="菜品信息回显功能"><a href="#菜品信息回显功能" class="headerlink" title="菜品信息回显功能"></a>菜品信息回显功能</h3><ul><li><strong>功能分析</strong></li></ul><blockquote><p><strong>将已有的菜品信息和菜品口味信息查询出来传回前端。</strong></p></blockquote><ul><li><strong>代码实现</strong></li><li><strong>在<code>DishService</code>接口中创建一个方法用于一次查两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询两张表</span></span><br><span class="line">    DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>实现该方法</strong></p><blockquote><p>将两张表的数据分别查出，再存入同一个dishDto对象中</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, id);</span><br><span class="line">        List&lt;DishFlavor&gt; list = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        dishDto.setFlavors(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>controller层调用该方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">        <span class="keyword">if</span> (dishDto != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到菜品信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改菜品功能"><a href="#修改菜品功能" class="headerlink" title="修改菜品功能"></a>修改菜品功能</h3><ul><li><strong>在<code>DishService</code>接口中创建一个方法用于一次修改两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>实现该方法</strong></li></ul><blockquote><ol><li><p>更新菜品基本信息</p></li><li><p>删除菜品口味原有信息</p></li><li><p>新增菜品口味信息</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息更新到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将口味表的数据清空</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, dishDto.getId());</span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再将菜品口味存入菜品口味表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.updateBatchById(flavors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量删除（逻辑删除）"><a href="#菜品的批量删除（逻辑删除）" class="headerlink" title="菜品的批量删除（逻辑删除）"></a>菜品的批量删除（逻辑删除）</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</strong></p></blockquote><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>主要代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithFlavor</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="comment">//需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品正处于起售状态不能删除(抛异常)</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish.getStatus().equals(<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品正处于起售状态不能删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品关联了其他套餐不能删除（抛异常）</span></span><br><span class="line">            List&lt;SetmealDish&gt; list = setmealDishService.list();</span><br><span class="line">            <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id.equals(setmealDish.getDishId()))&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品关联了其他套餐不能删除&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            queryWrapper.eq(id != <span class="literal">null</span>, Dish::getId, id);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品口味</span></span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, id);</span><br><span class="line">            dishFlavorService.remove(queryWrapper1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>要获得一个套餐分类的下拉列表</p></li><li><p>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</p></li><li><p>将套餐信息保存至数据库中（保存套餐的基本信息，保存套餐所包含的菜品的信息）</p></li></ol></blockquote><hr><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>获得一个套餐分类的下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//只查询起售的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将套餐信息保存至数据库中</strong>（主要代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐基本信息</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐包含的菜品</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐分页展示"><a href="#套餐分页展示" class="headerlink" title="套餐分页展示"></a>套餐分页展示</h2><h3 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的分页展示逻辑相同，都需要特别注意前端需要的是套餐的名称而不是<code>id</code></strong></p></blockquote><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo, setmealDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Setmeal record : records) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                setmealDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record, setmealDto);</span><br><span class="line"></span><br><span class="line">            list.add(setmealDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setmealDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="套餐的批量起售和停售"><a href="#套餐的批量起售和停售" class="headerlink" title="套餐的批量起售和停售"></a>套餐的批量起售和停售</h2><h3 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的批量起售和停售功能逻辑相同</strong></p></blockquote><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (setmeal != <span class="literal">null</span>) &#123;</span><br><span class="line">                setmeal.setStatus(status);</span><br><span class="line">                setmealService.updateById(setmeal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;套餐售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改套餐功能"><a href="#修改套餐功能" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h2><h3 id="套餐信息回显功能"><a href="#套餐信息回显功能" class="headerlink" title="套餐信息回显功能"></a>套餐信息回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="comment">//（套餐回显功能）</span></span><br><span class="line"><span class="keyword">public</span> SetmealDto <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line"></span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealDto);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(id != <span class="literal">null</span>, SetmealDish::getSetmealId, id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setmealDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改套餐功能-1"><a href="#修改套餐功能-1" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将套餐信息更新到菜品表中</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先将套餐菜品关系表的数据清空</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId, setmealDto.getId());</span><br><span class="line">    setmealDishService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再将套餐菜品关系填入表中</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐的批量删除"><a href="#套餐的批量删除" class="headerlink" title="套餐的批量删除"></a>套餐的批量删除</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><strong>处于起售状态的套餐不能删除，与菜品删除不同的是，删除套餐可不用删除菜品</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithDish</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (setmeal.getStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;存在套餐正处于起售状态不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="订单明细"><a href="#订单明细" class="headerlink" title="订单明细"></a>订单明细</h2><blockquote><p>见39.后台按条件查看订单</p></blockquote><h2 id="移动端短信验证登录（登出）"><a href="#移动端短信验证登录（登出）" class="headerlink" title="移动端短信验证登录（登出）"></a>移动端短信验证登录（登出）</h2><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><ul><li>导入maven坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里云短信服务--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.5</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>修改<code>LoginCheckFilter</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>获取验证码</li></ul><blockquote><p><strong>注意：此处因为没有阿里云短信服务的签名，所以真实发送短信的步骤就注释了，但生成的验证码可在控制台通过日志的形式查看。</strong></p><ol><li><p>获取手机号</p></li><li><p>生成随机的四位验证码</p></li><li><p>调用阿里云的短信服务API发送短信（已注释）</p></li><li><p>将验证码存入Session</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//生成随机的四位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> String.valueOf(ValidateCodeUtils.generateValidateCode(<span class="number">4</span>));</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用阿里云的短信服务API发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入Session</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;短信验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登录移动端"><a href="#登录移动端" class="headerlink" title="登录移动端"></a>登录移动端</h3><ul><li><strong>具体流程</strong></li></ul><blockquote><ol><li><p>获取前端发送过来的手机号</p></li><li><p>获取前端发送过来的验证码</p></li><li><p>从session中取出生成的验证码</p></li><li><p>如果能比对成功，证明登录成功</p></li><li><p>根据手机号判断是否为新用户，若是新用户则自动注册</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从session中取出生成的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">    <span class="comment">//比对验证码是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code)) &#123;</span><br><span class="line">        <span class="comment">//如果能比对成功，证明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(phone != <span class="literal">null</span>, User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据手机号判断是否为新用户，若是新用户则自动注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登出移动端"><a href="#登出移动端" class="headerlink" title="登出移动端"></a>登出移动端</h3><blockquote><p>注意要释放session</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">loginout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//释放session</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增地址"><a href="#新增地址" class="headerlink" title="新增地址"></a>新增地址</h2><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    addressBookService.save(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="地址列表显示"><a href="#地址列表显示" class="headerlink" title="地址列表显示"></a>地址列表显示</h2><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>将当前登录用户的所有地址显示为列表展示到移动端页面</p><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><hr><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">    <span class="comment">//设置地址对应的用户id</span></span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(addressBook.getUserId() != <span class="literal">null</span>, AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">    queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line">    List&lt;AddressBook&gt; list = addressBookService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h2><h3 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>先把该用户的所有地址都不设置为默认地址（故把所有该用户的<code>is_default</code>字段都设置为0）</p></li><li><p>设置该用户所选择的地址为默认地址</p></li></ol></blockquote><hr><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PutMapping(&quot;/default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="comment">//将该用户的所有地址都不设置为默认地址</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(userId != <span class="literal">null</span>, AddressBook::getUserId, userId);</span><br><span class="line">        updateWrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        addressBookService.update(updateWrapper);</span><br><span class="line">        <span class="comment">//将选择的该用户的地址设置为默认值</span></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查询用户的默认地址"><a href="#查询用户的默认地址" class="headerlink" title="查询用户的默认地址"></a>查询用户的默认地址</h2><h3 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/default&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改地址（需修改）"><a href="#修改地址（需修改）" class="headerlink" title="修改地址（需修改）"></a>修改地址（需修改）</h2><h3 id="地址的回显功能"><a href="#地址的回显功能" class="headerlink" title="地址的回显功能"></a>地址的回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到该用户地址&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改地址功能"><a href="#修改地址功能" class="headerlink" title="修改地址功能"></a>修改地址功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">    addressBookService.updateById(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h2><h3 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处无过多的逻辑分析，即使是默认地址也可以进行删除。</p></blockquote><hr><h3 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">    addressBookService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端主页展示（菜品、套餐）"><a href="#移动端主页展示（菜品、套餐）" class="headerlink" title="移动端主页展示（菜品、套餐）"></a>移动端主页展示（菜品、套餐）</h2><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a><strong>注意点</strong></h3><blockquote><ol><li><p>菜品，套餐的分类功能在前面已经写过了。移动端展示主页面需要该分类功能和购物车展示功能同时成功才能展示出来。</p></li><li><p>点击对应的菜品分类可查询出该分类下的所有菜品，注意该方法已经在之前新增套餐时的功能2中编写，但是当时只是让<code>DishDto</code>对象中新保存了菜品的名称，没有保存菜品的口味，故需要对该方法进行加强。</p></li><li><p>点击对应的套餐分类可查询出该分类下的所有套餐，需要添加该方法。</p></li></ol></blockquote><hr><h3 id="重新编写查询当前分类下的所有菜品功能"><a href="#重新编写查询当前分类下的所有菜品功能" class="headerlink" title="重新编写查询当前分类下的所有菜品功能"></a>重新编写查询当前分类下的所有菜品功能</h3><blockquote><p><strong>注意：只是新增了菜品口味的功能，不影响前面使用的功能（仅仅是对功能加强）</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">        <span class="comment">//获得菜品分类的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper1.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">        List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">        dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">        dishDtoList.add(dishDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="编写查询当前分类下的所有套餐功能"><a href="#编写查询当前分类下的所有套餐功能" class="headerlink" title="编写查询当前分类下的所有套餐功能"></a>编写查询当前分类下的所有套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h2><h3 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断添加的是菜品还是套餐</p></li><li><p>如果能查找出来对应的符合该用户且符合该菜品（套餐）这两个条件的购物车对象，则在数量上加一</p></li><li><p>如果查询不出来，则新增该购物车对象，并设置数量为1,且设置创建时间</p></li></ol></blockquote><hr><h3 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断添加的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//添加的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shoppingCartOne != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果存在该对象，则数量加一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">        shoppingCartOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不存在该对象，则新增该购物车对象，并设置数量为1,且设置创建时间</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        shoppingCartOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(shoppingCartOne);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h2><h3 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>根据每个用户的<code>id</code>来查，每个用户只能看到自己的购物车</p></blockquote><hr><h3 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h2><h3 id="需求分析-12"><a href="#需求分析-12" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>注意：仅删除该用户的所有购物车数据</p></blockquote><hr><h3 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删减购物车"><a href="#删减购物车" class="headerlink" title="删减购物车"></a>删减购物车</h2><h3 id="需求分析-13"><a href="#需求分析-13" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断删减的是菜品还是套餐（因为前端发送过来的数据要么为<code>DishId</code>，要么为<code>SetmealId</code>）</p></li><li><p>判断要删减的该对象的数量是否为1</p></li><li><p>若为1，则删除该数据</p></li><li><p>若不为1，则将数量减一</p></li></ol></blockquote><hr><h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断删减的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//删减的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//删减的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">    <span class="comment">//判断数量是否为1或大于1</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//数量为1则删除该该菜品（套餐）信息</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shoppingCartOne.getId();</span><br><span class="line">        shoppingCartService.removeById(id);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//数量不为1则该菜品（套餐）数量减1</span></span><br><span class="line">        shoppingCartOne.setNumber(number - <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删减商品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><h3 id="需求分析-14"><a href="#需求分析-14" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>前提</strong>：点击去支付后</p><ol><li><p>前端页面自动访问查询默认地址功能（前面已写好）</p></li><li><p>前端页面自动访问查询购物车信息功能（前面已写好）</p></li></ol></blockquote><blockquote><p><strong>具体步骤</strong>：</p><ol><li><p>获得当前用户id</p></li><li><p>查询当前用户的购物车数据</p></li><li><p>若购物车为空，则抛出异常</p></li><li><p>查询用户数据</p></li><li><p>查询地址数据</p></li><li><p>封装订单表数据（1条）</p></li><li><p>封装订单明细表数据（多条：原购物车有几条数据这里就有几条）</p></li><li><p>向订单表插入数据，一条数据</p></li><li><p>向订单明细表插入数据，多条数据</p></li><li><p>清空购物车数据</p></li></ol></blockquote><hr><h3 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">//获得当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">    List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">    <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(userId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">            + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">            + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">            + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="用户查看自己的订单"><a href="#用户查看自己的订单" class="headerlink" title="用户查看自己的订单"></a>用户查看自己的订单</h2><h3 id="需求分析-15"><a href="#需求分析-15" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>需将订单明细表中的数据也查询出来，故这里需要使用<code>OrderDto</code></p><p>需注意：在遍历的时候直接使用构造条件来查询导致<code>eq</code>叠加，从而导致后面查询的数据都是null，所有该处选择将方法方法外面进行调用</p></blockquote><hr><h3 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免在遍历的时候直接使用构造条件来查询导致eq叠加，从而导致后面查询的数据都是null</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;OrderDetail&gt; <span class="title function_">getOrderDetailListByOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailService.list(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> orderDetailList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//移动端分页展示订单</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">       Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">       Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.orderByAsc(Orders::getOrderTime);</span><br><span class="line">       queryWrapper.eq(Orders::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       ordersService.page(ordersPage, queryWrapper);</span><br><span class="line"></span><br><span class="line">       List&lt;Orders&gt; records = ordersPage.getRecords();</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;OrdersDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Orders record : records) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">           <span class="comment">//获取订单id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> record.getId();</span><br><span class="line"></span><br><span class="line">           List&lt;OrderDetail&gt; list1 = <span class="built_in">this</span>.getOrderDetailListByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">           BeanUtils.copyProperties(record, ordersDto);</span><br><span class="line">           ordersDto.setOrderDetails(list1);</span><br><span class="line"></span><br><span class="line">           list.add(ordersDto);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ordersDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台按条件查看订单"><a href="#后台按条件查看订单" class="headerlink" title="后台按条件查看订单"></a>后台按条件查看订单</h2><h3 id="需求分析-16"><a href="#需求分析-16" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处需要添加三个条件：</p><ol><li><p>订单号模糊查询</p></li><li><p>大于某时间</p></li><li><p>小于某时间</p></li></ol></blockquote><hr><h3 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(Orders::getOrderTime)</span><br><span class="line">            .like(number != <span class="literal">null</span>, Orders::getId, number)</span><br><span class="line">            .ge(beginTime != <span class="literal">null</span>, Orders::getOrderTime, beginTime)</span><br><span class="line">            .le(endTime != <span class="literal">null</span>, Orders::getOrderTime, endTime);</span><br><span class="line"></span><br><span class="line">    ordersService.page(ordersPage, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台修改订单状态"><a href="#后台修改订单状态" class="headerlink" title="后台修改订单状态"></a>后台修改订单状态</h2><h3 id="需求分析-17"><a href="#需求分析-17" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>前端发送过来的数据包含需改变的<code>status</code>和订单<code>id</code>，故可直接更改订单状态。</p></blockquote><hr><h3 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    ordersService.updateById(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改订单状态成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端点击套餐图片查看套餐具体菜品"><a href="#移动端点击套餐图片查看套餐具体菜品" class="headerlink" title="移动端点击套餐图片查看套餐具体菜品"></a>移动端点击套餐图片查看套餐具体菜品</h2><h3 id="需求分析-18"><a href="#需求分析-18" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>通过前端传入的套餐id在套餐菜品关系表中查询出该套餐下的所有菜品</p></li><li><p>将dish对象拷贝给<code>dishDto</code>对象</p></li><li><p>将存<code>dishDto</code>对象的集合传回前端</p></li></ol></blockquote><hr><h3 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">dish</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(SetmealDish::getSetmealId, id);</span><br><span class="line">        <span class="comment">//获取该套餐下的所有菜品</span></span><br><span class="line">        List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishDtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">dishId</span> <span class="operator">=</span> setmealDish.getDishId();</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line">            BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">            dishDtos.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="再来一单功能"><a href="#再来一单功能" class="headerlink" title="再来一单功能"></a>再来一单功能</h2><h3 id="需求分析-19"><a href="#需求分析-19" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>只有订单表中的status为4 的时候才能有再来一单的功能</p><p>点击再来一单按钮前端页面会直接跳转到购物车页面</p><p>根据<code>userId</code>，删除该用户此时所剩的购物车数据（清空购物车）</p><p>需要将原来购物车数据复制到购物车中</p></blockquote><hr><h3 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/again&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">again</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">    <span class="comment">//前端页面会直接跳转到购物车页面</span></span><br><span class="line">    <span class="comment">//故需要先将购物车中数据清除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据userId，删除该用户此时所剩的购物车数据(清空购物车)</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要将原来购物车数据复制到购物车中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> map.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper1.eq(OrderDetail::getOrderId,id);</span><br><span class="line">    List&lt;OrderDetail&gt; list = orderDetailService.list(queryWrapper1);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ShoppingCart&gt; shoppingCartsLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (OrderDetail orderDetail : list) &#123;</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        shoppingCart.setImage(orderDetail.getImage());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> orderDetail.getDishId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> orderDetail.getSetmealId();</span><br><span class="line">        <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是菜品那就添加菜品的查询条件</span></span><br><span class="line">            shoppingCart.setDishId(dishId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">            shoppingCart.setSetmealId(setmealId);</span><br><span class="line">        &#125;</span><br><span class="line">        shoppingCart.setName(orderDetail.getName());</span><br><span class="line">        shoppingCart.setDishFlavor(orderDetail.getDishFlavor());</span><br><span class="line">        shoppingCart.setNumber(orderDetail.getNumber());</span><br><span class="line">        shoppingCart.setAmount(orderDetail.getAmount());</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        shoppingCartsLists.add(shoppingCart);</span><br><span class="line">    &#125;</span><br><span class="line">    shoppingCartService.saveBatch(shoppingCartsLists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><blockquote><p>该项目后续可用<code>redis</code>，<code>mysql</code>主从复制，<code>nginx</code>等技术优化，还需后续完善…….</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
