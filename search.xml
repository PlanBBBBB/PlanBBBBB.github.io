<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis相关知识</title>
      <link href="/2023/08/03/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/08/03/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h1><h2 id="redis基础知识"><a href="#redis基础知识" class="headerlink" title="redis基础知识"></a>redis基础知识</h2><h3 id="为什么使用redis"><a href="#为什么使用redis" class="headerlink" title="为什么使用redis"></a>为什么使用redis</h3><p>当过多用户同时访问数据库时压力会很大，这样会导致在访问数据的时候速度很慢，使得用户在体验的时候响应很慢从而降低了用户体验，而<code>redis</code>这种无关系型数据库是基于内存的，可以较快去进行访问数据，但毕竟内存是有限的，所以并不是因为它访问快而全部使用这种<code>NoSQL</code>数据库，它与<code>MySQL</code>这种关系型数据库之间是相互合作的，共同完成任务的。</p><h3 id="五种数据类型"><a href="#五种数据类型" class="headerlink" title="五种数据类型"></a>五种数据类型</h3><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9B%BE.png" alt="五种数据类型图"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h4><ul><li>SET key value<br>设置指定key的值</li><li>GET key<br>获取指定key的值</li><li>SETEX key seconds value<br>设置指定key的值，并将key的过期时间设为seconds秒</li><li>SETNX key value<br>只有在key不存在时设置key的值</li></ul><h4 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h4><p>Redis hash是一个string类型的field和value的映射表,hash特别适合用于存储对象，常用命令:</p><ul><li>HSET key field value<br>将哈希表key中的字段field的值设为value</li><li>HGET key field<br>获取存储在哈希表中指定字段的值</li><li>HDEL key field<br>删除存储在哈希表中的指定字段</li><li>HKEYS key<br>获取哈希表中所有字段</li><li>HVALS key<br>获取哈希表中所有值</li><li>HGETALL key<br>获取在哈希表中指定key的所有字段和值</li></ul><h4 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h4><p>Redis列表是简单的字符串列表，按照插入顺序排序，常用命令:</p><ul><li>LPUSH key value1 [value2]<br>将一个或多个值插入到列表头部</li><li>LRANGE key start stop<br>获取列表指定范围内的元素</li><li>RPOP key<br>移除并获取列表最后一个元素</li><li>LLEN key<br>获取列表长度</li><li>BRPOP key1 [key2 ] timeout<br>移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li></ul><h4 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h4><p>Redis set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令:</p><ul><li><p>SADD key member1 [member2]</p><p>向集合添加一个或多个成员</p></li><li><p>SMEMBERS key<br>返回集合中的所有成员</p></li><li><p>SCARD key<br>获取集合的成员数</p></li><li><p>SINTER key1 [key2]<br>返回给定所有集合的交集</p></li><li><p>SUNION key1 [key2]<br>返回所有给定集合的并集</p></li><li><p>SDIFF key1 [key2]<br>返回给定所有集合的差集</p></li><li><p>SREM key member1 [member2]</p><p>移除集合中一个或多个成员</p></li></ul><h4 id="sorted-set类型"><a href="#sorted-set类型" class="headerlink" title="sorted set类型"></a>sorted set类型</h4><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。常用命令:</p><ul><li>ZADD key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li>ZRANGE key start stop [WITHSCORES]<br>通过索引区间返回有序集合中指定区间内的成员</li><li>ZINCRBY key increment member<br>有序集合中对指定成员的分数加上增量increment</li><li>ZREM key member [member …]<br>移除有序集合中的一个或多个成员</li></ul><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul><li>KEYS pattern<br>查找所有符合给定模式( pattern)的 key</li><li>EXISTS key<br>检查给定key是否存在</li><li>TYPE key<br>返回key所储存的值的类型</li><li>TTL key<br>返回给定 key的剩余生存时间(TTL, time to live)，以秒为单位</li><li>DEL key<br>该命令用于在key存在是删除key</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213519682.png" alt="image-20230803213519682"></p><h3 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>缓存空对象</li></ol><ul><li><p>优点：方便简单</p></li><li><p>缺点：可能造成额外的内存消耗，可能造成短期的不一致</p></li></ul><blockquote><p>若有用户恶意使用多个不同id进行查询，则redis会不断缓存很多没有用的null值造成浪费，但可以通过为key添加过期时间解决。</p><p>短期不一致是因为数据库已经更新数据而redis中仍为null值，其实可以通过插入数据的同时手动更改redis的值来解决。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213834986.png" alt="image-20230803213834986"></p><ol start="2"><li>布隆过滤</li></ol><p>在查询redis前先经过布隆过滤器，若redis中存在才放行。</p><ul><li>优点：内存占用少，没有多余的key</li><li>缺点：可能误判</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803214619650.png" alt="image-20230803214619650"></p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804102636911.png" alt="image-20230804102636911"></p><h3 id="常见解决方案-1"><a href="#常见解决方案-1" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ol><blockquote><p>同一时段大量的缓存key同时失效采用方案一。</p><p>redis宕机采用方案2，3，4，redis集群中主库挂了还要从库数据，用sentinel可以降级限流，多级缓存可用nginx，jvm等进行缓存。</p></blockquote><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存击穿问题也叫<code>热点Key问题</code>，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</strong></p><h3 id="常见解决方案-2"><a href="#常见解决方案-2" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>互斥锁</li></ol><blockquote><p>1000个进程来同时访问，一个进程拿到锁，其余999个进程都要等到线程1查询数据库重新写入缓存，释放锁之后才能访问，性能差，但是有强一致性</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804105357783.png" alt="image-20230804105357783"></p><ol start="2"><li>逻辑过期</li></ol><blockquote><p>就是在redis保存数据的时候多保存一个过期时间字段，通常是在活动开始到结束那一个时间段内都不会过期，也就不会突然失效了。若<strong>失效（这里说的失效指的是逻辑时间过期了）</strong>了也是要通过锁的形式去重新查数据库，存缓存，释放锁。</p><p>不过相对于互斥锁而言，这里的锁不一样了。这里线程1获得锁之后交给另外的线程去执行查数据库等操作，而线程1自身则返回旧的数据。其他进程在释放锁之前来访问都是返回的旧数据，只有当释放锁，即完成了查数据库，存入缓存，更新逻辑过期时间后才能返回新数据。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804110145305.png" alt="image-20230804110145305"></p><h3 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h3><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>没有额外的内存消耗，保证一致性，实现简单</td><td>线程需要等待，性能受影响，可能有死锁</td></tr><tr><td>逻辑过期</td><td>线程无需等待，性能较好</td><td>不保证一致性，有额外内存消耗，实现复杂</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习并部署项目</title>
      <link href="/2023/07/28/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/07/28/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>pwd</td><td>查看当前所在目录</td><td></td></tr><tr><td>touch</td><td>如果文件不存在则新建一个文件</td><td></td></tr><tr><td>ls</td><td>显示指定目录下的内容</td><td><code>-a</code>：显示所有文件及目录（以<code>.</code>开头的隐藏文件也会列出） <code>-l</code>：除文件名外，还会讲文件的形态、权限、拥有者、文件大小等详细信息列出，可简化为ll（常用）</td></tr><tr><td>cat</td><td>用于显示文件内容</td><td><code>-n</code>：由1开始对所有输出的行数编号</td></tr><tr><td>more</td><td>以分页的形式显示文件内容</td><td></td></tr><tr><td>tail</td><td>查看文件末尾的内容</td><td><code>-f</code>：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</td></tr><tr><td>mkdir</td><td>创建目录</td><td><code>-p</code>：确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</td></tr><tr><td>rmdir</td><td>删除空目录</td><td><code>-p</code>：当子目录被删除后使父目录为空目录的话，则一并删除</td></tr><tr><td>rm</td><td>删除文件或者目录</td><td><code>-r</code>：将目录及目录中所有文件（目录）逐一删除，即递归删除 <code>-f</code>：无需确认，直接删除</td></tr></tbody></table><h2 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>cp</td><td>用于复制文件或目录</td><td><code>-r</code>：如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</td></tr><tr><td>mv</td><td>为文件或目录改名、或将文件或目录移动到其它位置</td><td></td></tr></tbody></table><h2 id="打包压缩命令"><a href="#打包压缩命令" class="headerlink" title="打包压缩命令"></a>打包压缩命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>tar</td><td>对文件进行打包、解包、压缩、解压</td><td><code>-z</code>： 代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压 <code>-c</code>： 代表的是create，即创建新的包文件 <code>-x</code>： 代表的是extract，实现从包文件中还原文件 <code>-v</code>： 代表的是verbose，显示命令的执行过程 <code>-f</code>： 代表的是file，用于指定包文件的名称     <code>c</code>和<code>x</code>是互斥的，解压和压缩不能同时进行</td></tr></tbody></table><h2 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>vi、vim</td><td>对文件内容进行编辑</td><td></td></tr></tbody></table><ul><li>说明：</li></ul><ol><li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</li><li>vim在进行文本编辑时共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>插入模式</code>（Insert mode）和<code>底行模式</code>（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</li></ol><ul><li>针对vim中的三种模式说明如下：</li></ul><ol><li>命令模式<br>命令模式下可以查看文件内容、移动光标（上下左右箭头、<code>gg</code>(开头)、<code>G</code>（末尾））<br>通过vim命令打开文件后，默认进入命令模式<br>另外两种模式需要首先进入命令模式，才能进入彼此</li><li>插入模式<br>插入模式下可以对文件内容进行编辑<br>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现<code>INSERT</code>字样<br>在插入模式下按下ESC键，回到命令模式</li><li>底行模式<br>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找<br>通过 <code>:</code> 方式进入底行模式后，可以输入<code>wq</code>（保存并退出）、<code>q！</code>（不保存退出）、<code>set nu</code>（显示行号）</li></ol><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>find</td><td>在指定目录下查找文件</td><td><code>find dirName -option fileName</code></td></tr><tr><td>grep</td><td>从指定文件中查找指定的文本内容</td><td><code>grep word fileName</code></td></tr></tbody></table><p><code>grep</code>通常搭配管道符使用例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure><h2 id="权限命令"><a href="#权限命令" class="headerlink" title="权限命令"></a>权限命令</h2><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135026495.png" alt="image-20230728135026495"></p><hr><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135100975.png" alt="image-20230728135100975"></p><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><h2 id="手工部署"><a href="#手工部署" class="headerlink" title="手工部署"></a>手工部署</h2><ol><li>idea上进行clean和package操作，打包好的包存放在target目录下</li><li>将该jar包通过finalshell上传到linux上</li><li>执行命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar xxx.jar &amp;&gt;xxx.log &amp;</span><br></pre></td></tr></table></figure><blockquote><p><code>nohup</code>命令用于不挂断的运行程序，&amp;&gt;后面是将日志输出到指定文件，最后一个&amp;的作用是让程序在后台运行</p></blockquote><ol start="4"><li>结束程序运行就结束进程即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java <span class="comment">#找到相关进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号  <span class="comment">#结束对应进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security知识学习</title>
      <link href="/2023/07/23/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/07/23/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security原理相关知识"><a href="#Spring-Security原理相关知识" class="headerlink" title="Spring Security原理相关知识"></a>Spring Security原理相关知识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Spring Security是一个基于Spring框架的安全框架，主要用于对用户的认证授权等功能。</p><p><strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p><strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>流程图：</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723214953358.png" alt="image-20230723214953358"></p><p><strong>Spring Security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。</strong></p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的拦截器。</p><ul><li>详细流程图</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723215418090.png" alt="image-20230723215418090"></p><p> ⭐⭐</p><p>所谓认证授权的详细流程，就是用户在登录时提交用户名和密码，UsernamePasswordAuthenticationFilter过滤器把用户名和密码封装为Authentication对象进行认证，通过一系列过滤器，在loadUserByUsername方法中从数据库中查询对应的用户信息，并将用户信息和该用户的权限信息（授权）一并通过实现了UserDetails接口的实现类返回，并在返回中的过滤器中设置SecurityContextHolder存放用户的权限信息。</p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ol><li>如何对密码进行加密</li></ol><blockquote><p>在 Spring Security 中对密码进行加密通常使用的是密码编码器（PasswordEncoder）。PasswordEncoder 的作用是将明文密码加密成密文密码，以便于存储和校验。Spring Security 提供了多种常见的密码编码器，例如 BCryptPasswordEncoder。</p></blockquote><ol start="2"><li>SecurityContextHolder作用</li></ol><blockquote><p>SecurityContextHolder用于存储安全上下文（security context）的信息。当前操作的用户是谁，该用户是否已经被认证，他拥有哪些角色权限…这些都被保存在SecurityContextHolder中。</p><p>SecurityContextHolder默认使用ThreadLocal策略来存储认证信息。看到ThreadLocal 也就意味着，这是一种与线程绑定的策略。Spring Security在用户登录时自动绑定认证信息到当前线程，在用户退出时，自动清除当前线程的认证信息。</p></blockquote><ol start="3"><li>Spring Security是如何完成身份认证的？</li></ol><blockquote><ol><li><p>用户名和密码被过滤器获取到，封装成Authentication,通常情况下是UsernamePasswordAuthenticationToken这个实现类。</p></li><li><p>AuthenticationManager 身份管理器负责验证这个Authentication</p></li><li><p>认证成功后，AuthenticationManager身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）Authentication实例。</p></li><li><p>SecurityContextHolder安全上下文容器将第3步填充了信息的Authentication，通过SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀商城（spikemall）</title>
      <link href="/2023/05/27/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/"/>
      <url>/2023/05/27/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="秒杀商城（spikemall）"><a href="#秒杀商城（spikemall）" class="headerlink" title="秒杀商城（spikemall）"></a>秒杀商城（spikemall）</h1><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>本项目名为下单秒杀项目，主要实现了用户进行下单秒杀的服务，用户对商品进行下单，会有一系列的关于订单，库存，账户等的操作，用户进行支付也会有对应订单，库存，账户等的操作，其次作为一个完善的商城，该项目同样也包含了用户的注册，登录，登出，以及对商品进行查看等的功能。</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527103920081.png" alt="image-20230527103920081"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/PlanBBBBB/spikemall">PlanBBBBB&#x2F;spikemall: 分布式秒杀商城 (github.com)</a></p><h2 id="相关技术栈"><a href="#相关技术栈" class="headerlink" title="相关技术栈"></a>相关技术栈</h2><p>该项目主要使用了<code>springboot</code>，<code>mybatis-plus</code>，<code>springcloud</code>，<code>nacos</code>，<code>feign</code>，<code>rocketmq</code>，<code>redis</code>，<code>gateway</code>，<code>springsecurity</code>，<code>Sentinel</code>，<code>Seata</code>等技术。</p><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol><li>启动nacos</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 即可</p><ol start="2"><li>启动redis</li></ol><p>先启动redis-server.exe，再启动redis-cli.exe</p><ol start="3"><li>启动rocketmq</li></ol><p>先启动mqnamesrv.cmd，再启动mqbroker.cmd</p><ol start="4"><li>启动sentinel</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8090/">http://localhost:8090</a> 即可</p><ol start="5"><li>启动seata</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seata-server.bat</span><br></pre></td></tr></table></figure><ol start="6"><li>启动所有服务</li></ol><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><h3 id="spikemall-users（用户数据库）"><a href="#spikemall-users（用户数据库）" class="headerlink" title="spikemall_users（用户数据库）"></a>spikemall_users（用户数据库）</h3><h4 id="users（用户表）"><a href="#users（用户表）" class="headerlink" title="users（用户表）"></a>users（用户表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>昵称</td></tr><tr><td>phone</td><td>手机号</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>money</td><td>余额</td></tr><tr><td>power</td><td>权限</td></tr></tbody></table><hr><h4 id="oauth-client-details（spring-security用户客户端表）"><a href="#oauth-client-details（spring-security用户客户端表）" class="headerlink" title="oauth_client_details（spring security用户客户端表）"></a>oauth_client_details（spring security用户客户端表）</h4><table><thead><tr><th>名称</th></tr></thead><tbody><tr><td>client_id</td></tr><tr><td>resource_ids</td></tr><tr><td>client_secret</td></tr><tr><td>scope</td></tr><tr><td>authorized_grant_types</td></tr><tr><td>web_server_redirect_uri</td></tr><tr><td>authorities</td></tr><tr><td>access_token_validity</td></tr><tr><td>refresh_token_validity</td></tr><tr><td>additional_information</td></tr><tr><td>autoapprove</td></tr></tbody></table><p>该<code>oauth_client_details</code>表主要用于spring security整合oauth2.0时，作为认证授权服务器时的保存在数据库的客户端使用。</p><h3 id="spikemall-goods（商品数据库）"><a href="#spikemall-goods（商品数据库）" class="headerlink" title="spikemall_goods（商品数据库）"></a>spikemall_goods（商品数据库）</h3><h4 id="goods（商品表）"><a href="#goods（商品表）" class="headerlink" title="goods（商品表）"></a>goods（商品表）</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>商品名</td></tr><tr><td>price</td><td>商品价格</td></tr><tr><td>image</td><td>商品图片</td></tr><tr><td>description</td><td>商品描述</td></tr></tbody></table><h3 id="spike-mall-orders（订单数据库）"><a href="#spike-mall-orders（订单数据库）" class="headerlink" title="spike mall_orders（订单数据库）"></a>spike mall_orders（订单数据库）</h3><h4 id="orders（订单表）"><a href="#orders（订单表）" class="headerlink" title="orders（订单表）"></a>orders（订单表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>user_id</td><td>下单用户id</td></tr><tr><td>good_id</td><td>商品id</td></tr><tr><td>status</td><td>订单状态（0未支付，1已支付）</td></tr><tr><td>order_time</td><td>下单时间</td></tr><tr><td>check_time</td><td>结账时间</td></tr><tr><td>amount</td><td>实收金额</td></tr></tbody></table><h3 id="spikemall-repertory（库存数据库）"><a href="#spikemall-repertory（库存数据库）" class="headerlink" title="spikemall_repertory（库存数据库）"></a>spikemall_repertory（库存数据库）</h3><h4 id="repertory（库存表）"><a href="#repertory（库存表）" class="headerlink" title="repertory（库存表）"></a>repertory（库存表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>goods_id</td><td>商品id</td></tr><tr><td>stock</td><td>库存</td></tr><tr><td>begin_time</td><td>开始时间</td></tr><tr><td>end_time</td><td>结束时间</td></tr></tbody></table><h2 id="账户服务"><a href="#账户服务" class="headerlink" title="账户服务"></a>账户服务</h2><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><ul><li>使用场景</li></ul><p>本项目使用了springsecurity整合的oauth2.0，故所有调用的资源都需要在请求头中携带jwt令牌，登录功能实现的是获取令牌，而注册功能是本系统唯一一个不需要携带令牌就能访问的资源。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> Users user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usersService.register(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(Users user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> user.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> user.getAvatar();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//手机号格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;Users&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Users::getPhone, phone);</span><br><span class="line">        List&lt;Users&gt; list = list(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPasswordInvalid(password)) &#123;</span><br><span class="line">            <span class="comment">//密码格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;密码格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        newUser.setPhone(user.getPhone());</span><br><span class="line">        <span class="comment">//密码设置为加密形式</span></span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(password);</span><br><span class="line">        newUser.setPassword(encode);</span><br><span class="line">        newUser.setMoney(<span class="number">200L</span>);<span class="comment">//新用户送200</span></span><br><span class="line">        newUser.setPower(<span class="string">&quot;consumer&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user.getName() == <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setName(<span class="string">&quot;user_&quot;</span> + UUID.randomUUID(<span class="literal">true</span>).toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newUser.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (avatar != <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setAvatar(avatar);</span><br><span class="line">        &#125;</span><br><span class="line">        save(newUser);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="springsecurity登录功能⭐⭐⭐"><a href="#springsecurity登录功能⭐⭐⭐" class="headerlink" title="springsecurity登录功能⭐⭐⭐"></a>springsecurity登录功能⭐⭐⭐</h3><h4 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h4><p>本项目使用的是授权码模式，故是将账户服务作为一个认证授权的服务器，而其他的服务都是资源服务器，用户需要在认证授权服务器中获取到jwt令牌，并在访问其他服务时，在请求头携带jwt令牌才能访问其他服务的资源。</p><h4 id="获取授权码步骤"><a href="#获取授权码步骤" class="headerlink" title="获取授权码步骤"></a>获取授权码步骤</h4><ol><li>在浏览器输入<a href="http://localhost:8085/">http://localhost:8085</a>会自动跳转到<a href="http://localhost:8085/login">http://localhost:8085/login</a>，在表单中填写手机号和密码进行登录。</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101204919.png" alt="image-20230527101204919"></p><p>进入如下界面代表登录成功</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101318752.png" alt="image-20230527101318752"></p><ol start="2"><li>在浏览器中输入该网址<a href="http://localhost:8085/oauth/authorize?client_id=client&response_type=code&redirect_uri=http://www.baidu.com">http://localhost:8085/oauth/authorize?client_id&#x3D;client&amp;response_type&#x3D;code&amp;redirect_uri&#x3D;http://www.baidu.com</a>，跳转到百度首页之后，在上面url处找到授权码</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101354324.png" alt="image-20230527101354324"></p><p>点击Authorize进行授权</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101451035.png" alt="image-20230527101451035"></p><p>得到授权码</p><ol start="3"><li>将得到的授权码代入到以下url地址中，此处用postman进行操作：<a href="http://client:secret@localhost:8085/oauth/token?grant_type=authorization_code&code=prgYij&redirect_uri=http://www.baidu.com">http://client:secret@localhost:8085&#x2F;oauth&#x2F;token?grant_type&#x3D;authorization_code&amp;code&#x3D;prgYij&amp;redirect_uri&#x3D;http://www.baidu.com</a></li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101535264.png" alt="image-20230527101535264"></p><p>携带授权码，得到<code>access_token</code>，该<code>access_token</code>在前面拼接上<code>Bearer </code>即为jwt令牌。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>因为本身使用的就是springsecurity整合好的安全框架，故只是对认证授权服务器和资源服务器做了一系列的配置而已。</p><h3 id="获取用户余额功能"><a href="#获取用户余额功能" class="headerlink" title="获取用户余额功能"></a>获取用户余额功能</h3><ul><li>使用场景</li></ul><p>在支付功能进行中，会通过远程调用该方法，判断用户的余额是否充足，以进行后续的支付功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/money&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> usersService.getMoney(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="keyword">return</span> user.getMoney();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="扣减用户余额功能"><a href="#扣减用户余额功能" class="headerlink" title="扣减用户余额功能"></a>扣减用户余额功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付功能时，满足一切支付条件后会对用户余额进行扣减。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastMoney</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/reduce/&#123;lastMoney&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(<span class="meta">@PathVariable(&quot;lastMoney&quot;)</span> Long lastMoney, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        usersService.reduceMoney(userId, lastMoney);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(Long userId, Long lastMoney)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Users&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Users::getId, userId)</span><br><span class="line">                .set(Users::getMoney, lastMoney);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><h3 id="通过商品id查询价格功能"><a href="#通过商品id查询价格功能" class="headerlink" title="通过商品id查询价格功能"></a>通过商品id查询价格功能</h3><ul><li>使用场景</li></ul><p>在创建订单时，需要知道商品的价格，故这是一个远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过商品id查询价格(对外不开放)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPrice</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.getById(goodsId).getPrice();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看商品列表功能"><a href="#查看商品列表功能" class="headerlink" title="查看商品列表功能"></a>查看商品列表功能</h3><ul><li>使用场景</li></ul><p>用户可以查看商品，属于完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看商品列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.listByRedis();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先从缓存中查</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKey</span> <span class="operator">=</span> <span class="string">&quot;cache:goods&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKeyJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(goodsKey);</span><br><span class="line">        <span class="comment">//查到了就返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (goodsKeyJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(JSONUtil.toList(goodsKeyJson, Goods.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到再从数据库查</span></span><br><span class="line">        List&lt;Goods&gt; goodsList = query().orderByAsc(<span class="string">&quot;id&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (goodsList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺类型发生错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将从数据库查询结果存入缓存</span></span><br><span class="line">        stringRedisTemplate.opsForValue().setIfAbsent(goodsKey, JSONUtil.toJsonStr(goodsList), <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(goodsList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下单服务"><a href="#下单服务" class="headerlink" title="下单服务"></a>下单服务</h2><h3 id="下单功能"><a href="#下单功能" class="headerlink" title="下单功能"></a>下单功能</h3><ul><li>使用场景</li></ul><p>用户查看商品，选择好商品之后即可下单，下单功能会局限于商品是否在秒杀时间段内以及库存是否充足等条件，此处利用分布式锁来实现一人一单。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品功能，请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/spike/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> repertoryService.spikeGoods(jwt, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;解析jwt失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否满足时间、库存条件</span></span><br><span class="line">        <span class="type">Repertory</span> <span class="variable">spikeGood</span> <span class="operator">=</span> getById(goodsId);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> spikeGood.getBeginTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> spikeGood.getEndTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (now.isBefore(beginTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now.isAfter(endTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span> (spikeGood.getStock() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据userId 创建锁对象</span></span><br><span class="line">        <span class="type">SimpleRedisLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock(<span class="number">120</span>);</span><br><span class="line">        <span class="comment">// 加锁失败，说明当前用户开了多个线程抢商品，但是由于key是SETNX的，所以不能创建key，得等key的TTL到期或释放锁（删除key）</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许抢多次商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象</span></span><br><span class="line">            <span class="type">RepertoryService</span> <span class="variable">proxy</span> <span class="operator">=</span> (RepertoryService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(jwt, goodsId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            redisLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        <span class="comment">//一人一单要求</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> orderClient.findCount(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户以抢购此商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> stockClient.reduceStock(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该商品已抢购完&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成orderId（使用redisIdWorker）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送普通消息给MQ</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Order&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> jwt + <span class="string">&quot;_&quot;</span> + goodsId + <span class="string">&quot;_&quot;</span> + orderId;</span><br><span class="line">        rocketMQTemplate.convertAndSend(topic, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h2><h3 id="创建订单功能"><a href="#创建订单功能" class="headerlink" title="创建订单功能"></a>创建订单功能</h3><ul><li>使用场景</li></ul><p>在用户进行下单操作时进行远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><p>由于是在下单时进行的调用方法，故没有独立的接口。</p><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">(String jwt, Long goodsId, Long orderId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> goodClient.getPrice(goodsId, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        order.setId(orderId);</span><br><span class="line">        order.setGoodId(goodsId);</span><br><span class="line">        order.setOrderTime(LocalDateTime.now());</span><br><span class="line">        order.setStatus(<span class="number">0</span>);<span class="comment">//  0表示未支付</span></span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setAmount(price);</span><br><span class="line">        save(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送延迟消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> JSONUtil.toJsonStr(order);</span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Pay&quot;</span>;</span><br><span class="line">        Message&lt;String&gt; message = MessageBuilder.withPayload(orderJson)</span><br><span class="line">                .setHeader(MessageConst.PROPERTY_DELAY_TIME_LEVEL, <span class="string">&quot;3&quot;</span>) <span class="comment">// 设置延迟等级为3，即10秒</span></span><br><span class="line">                .build();</span><br><span class="line">        rocketMQTemplate.send(topic, message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看该用户是否购买过该商品功能（一人一单）"><a href="#查看该用户是否购买过该商品功能（一人一单）" class="headerlink" title="查看该用户是否购买过该商品功能（一人一单）"></a>查看该用户是否购买过该商品功能（一人一单）</h3><ul><li>使用场景</li></ul><p>用户在进行下单时，查看该用户是否已经购买过该商品，若已经购买过该商品，则不允许用户重复购买。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过查询订单查看该用户是否购买过该商品，实现一人一单（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/&#123;goodsId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;goodsId&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.findCount(userId, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(Long userId, Long goodsId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getGoodId, goodsId).eq(Orders::getUserId, userId);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看当前用户的所有订单功能"><a href="#查看当前用户的所有订单功能" class="headerlink" title="查看当前用户的所有订单功能"></a>查看当前用户的所有订单功能</h3><ul><li>使用场景</li></ul><p>用户可查看自己的所有订单，算是完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看当前用户的所有订单,请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.listByUser(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getUserId, userId);</span><br><span class="line">        List&lt;Orders&gt; ordersList = list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(ordersList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="支付服务"><a href="#支付服务" class="headerlink" title="支付服务"></a>支付服务</h2><h3 id="支付功能"><a href="#支付功能" class="headerlink" title="支付功能"></a>支付功能</h3><ul><li>使用场景</li></ul><p>用户在下单功能成功之后，再进行支付功能，在支付过程种会出现未在规定时间段内支付以及余额不足无法支付的情况，该情况下会对库存进行回滚，同时对创建好的订单进行删除，若满足支付条件，将对订单进行修改，同时对用户余额进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付功能,没登录不能支付，即请求头必须携带token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ordersService.pay(jwt, orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(String jwt, Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;order:&quot;</span> + orderId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(orderJson)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;订单号有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得order对象</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> JSONUtil.toBean(orderJson, Orders.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单时间超时</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">deadlineTime</span> <span class="operator">=</span> order.getOrderTime().plusMinutes(<span class="number">30</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">nowTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (nowTime.isAfter(deadlineTime)) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;下单时间超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//余额不足</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">money</span> <span class="operator">=</span> userClient.getMoney(jwt);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> order.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (money &lt; price) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;余额不足，无法购买&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件成功，进行支付</span></span><br><span class="line">        <span class="comment">//1.更改订单状态</span></span><br><span class="line">        LambdaUpdateWrapper&lt;Orders&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(Orders::getId, order.getId())</span><br><span class="line">                .set(Orders::getCheckTime, nowTime)</span><br><span class="line">                .set(Orders::getStatus, <span class="number">1</span>);</span><br><span class="line">        update(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.扣减用户余额</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">lastMoney</span> <span class="operator">=</span> money - price;</span><br><span class="line">        userClient.reduceMoney(lastMoney, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="库存服务"><a href="#库存服务" class="headerlink" title="库存服务"></a>库存服务</h2><h3 id="扣减库存功能"><a href="#扣减库存功能" class="headerlink" title="扣减库存功能"></a>扣减库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行下单的时候，就直接对库存进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> repertoryService.reduceStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .gt(Repertory::getStock, <span class="number">0</span>)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="回滚库存功能"><a href="#回滚库存功能" class="headerlink" title="回滚库存功能"></a>回滚库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付的时候，若未在商品的秒杀时间段内，或自身余额不足的情况下会进行库存的回滚。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        repertoryService.rollbackStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock + 1&quot;</span>);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="网关服务"><a href="#网关服务" class="headerlink" title="网关服务"></a>网关服务</h2><p>由于项目是微服务项目，故使用gateway网关进行端口等统一配置处理很有必要，本项目除用户登录进行获取授权码及获取jwt令牌的所有请求资源的端口号均为10010。</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级部分学习</title>
      <link href="/2023/01/05/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/05/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h2 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h2><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230720221305377.png" alt="image-20230720221305377"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721105303089.png" alt="image-20230721105303089"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110407627.png" alt="image-20230721110407627"></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110713301.png" alt="image-20230721110713301"></p><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113246951.png" alt="image-20230721113246951"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113220684.png" alt="image-20230721113220684"></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165346891.png" alt="image-20230721165346891"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165901787.png" alt="image-20230721165901787"></p><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165718405.png" alt="image-20230721165718405"></p><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721172914954.png" alt="image-20230721172914954"></p><h1 id="事务相关知识"><a href="#事务相关知识" class="headerlink" title="事务相关知识"></a>事务相关知识</h1><h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ol><li><p>A 原子性（Atomicity） ⼀个事务的所有操作，要么全部完成，要么都没完成，不能结束在中间环节。如果事务在执⾏过程中发⽣错误，会被回滚到事务开始之前的状态 </p></li><li><p>C ⼀致性（Consistency） 在事务开始之前以及事务结束之后，数据库的完整性不能被破坏 </p></li><li><p>I 隔离性（Isolation） 允许多个并发事务同时对数据进⾏修改和读写的能⼒，它可以防⽌由于多个事务并发执⾏时由于交叉执⾏⽽导致的 数据不⼀致 </p></li><li><p>D 持久性（Durability） 事务处理结束了以后，对数据的修改是永久的，即使是发生了系统故障，数据也不会丢失</p><hr></li></ol><h2 id="四大隔离级别"><a href="#四大隔离级别" class="headerlink" title="四大隔离级别"></a>四大隔离级别</h2><ol start="0"><li><p>术语说明： </p><ul><li>脏读： ⼀个事务读取另⼀个事务还没有提交的数据 </li><li>不可重复读： 同⼀个事务内，两个相同的查询返回了不同的结果 </li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据 已经存在，好像出现了 “幻影”。</li></ul></li><li><p>RU 读不提交（Read Uncommited） 在该隔离级别下，事务之间完全不隔离，会产⽣脏读，⼀般情况不会使⽤ </p></li><li><p>RC 读提交（Read Commited） 本事务读取到的是其它事务提交的最新数据，但有⼀个问题在同⼀个事务中，前后两相同的select可能会读到不同的结果 </p></li><li><p>RR 可重复读（Repeatable Read） 在同⼀个事务中，select的结果是事务开始时时间点的状态，因此，同⼀个事务同样的select操作可以读到⼀致的结 果 </p></li><li><p>serializable串⾏化 读操作会隐式获取共享锁，保证不同事务之间的互斥 </p></li><li><p>⭐⭐问题：RR 可重复读为什么可以解决不可重复读，却不能解决幻读⭐⭐</p><blockquote><p>答：对于”可重复读（Repeatable Read）”隔离级别，它确实可以解决”不可重复读（Non-repeatable Read）”问题，因为在这个隔离级别下，事务在执行期间看到的数据保持一致，即使其他事务在这段时间内进行了更改，也不会影响当前事务。</p><p>解决”不可重复读”问题的关键是<strong>行级锁定</strong>。在”可重复读”隔离级别下，读取的数据行会被锁定，确保其他事务不能修改或删除这些数据，从而保持了数据的一致性，防止了其他事务的干扰。</p><p>然而，”可重复读”隔离级别并不能完全解决”幻读”问题。”幻读”问题是由于其他事务在当前事务执行期间插入或删除了符合当前事务查询条件的新数据，导致查询结果发生变化。<strong>在”可重复读”隔离级别下，行级锁只能保护已有数据的读取，但对于新数据的插入和删除并不会进行锁定。</strong>因此，其他事务仍然可以插入或删除新数据，从而导致当前事务的查询结果发生变化，产生了”幻读”问题。</p><p>要解决”幻读”问题，需要进一步升级到更高的隔离级别，如”串行化（Serializable）”。在”串行化”隔离级别下，事务会锁定整个范围，包括已有数据和符合查询条件的新数据，确保其他事务不能插入或删除这些数据，从而完全消除了”幻读”问题。但是，”串行化”隔离级别的性能较低，因为它限制了并发性，所以在实际应用中需要权衡隔离级别和性能的需求。</p></blockquote></li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230722210501764.png" alt="image-20230722210501764"></p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><p>示例图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164107248.png" alt="MySQL体系结构图"></p><p>包括四个层：</p><ol><li><strong>连接层</strong> 最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端&#x2F;服务端工具实现的类似于 TCP&#x2F;IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程 池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务 器也会为安全接入的每个客户端验证它所具有的操作权限。 </li><li><strong>服务层</strong> 第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部 分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解 析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大， 这样在解决大量读操作的环境中能够很好的提升系统的性能。 </li><li><strong>引擎层</strong> 存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通 信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库 中的索引是在存储引擎层实现的。 </li><li><strong>存储层</strong> 数据存储层， 主要是将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询 日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。</li></ol><p><strong>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 。存储引擎是基于表的，而不是 基于库的，所以存储引擎也可被称为表类型。</strong></p><h2 id="存储引擎类型"><a href="#存储引擎类型" class="headerlink" title="存储引擎类型"></a>存储引擎类型</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ol><li>特点</li></ol><ul><li><p>DML操作遵循ACID模型，支持事务；</p></li><li><p>行级锁，提高并发访问性能； </p></li><li><p>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</p></li></ul><ol start="2"><li>文件</li></ol><p>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结 构（frm-早期的 、sdi-新版的）、数据和索引。</p><ol start="3"><li>逻辑存储结构</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164013431.png" alt="逻辑存储结构图"></p><ul><li>表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以 包含多个Segment段。 </li><li>段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管 理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。 </li><li>区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为 16K， 即一个区中一共有64个连续的页。 </li><li>页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默 认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。 </li><li>行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时 所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。</li></ul><hr><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ol><li>特点</li></ol><ul><li><p>不支持事务，不支持外键</p></li><li><p>支持表锁，不支持行锁</p></li><li><p>访问速度快</p></li></ul><ol start="2"><li>文件</li></ol><ul><li><p>xxx.sdi：存储表结构信息 </p></li><li><p>xxx.MYD: 存储数据 </p></li><li><p>xxx.MYI: 存储索引</p></li></ul><hr><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为 临时表或缓存使用。</p><ol><li>特点</li></ol><ul><li><p>内存存放</p></li><li><p>hash索引（默认）</p></li></ul><ol start="2"><li>文件</li></ol><ul><li>xxx.sdi：存储表结构信息</li></ul><h3 id="三种常见存储引擎区别与对比"><a href="#三种常见存储引擎区别与对比" class="headerlink" title="三种常见存储引擎区别与对比"></a>三种常见存储引擎区别与对比</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724202707479.png" alt="三种常见存储引擎区别与对比"></p><p>重点对比InnoDB和MyISAM，分别是<strong>事务，外键和锁机制的区别</strong>。</p><h1 id="索引⭐⭐"><a href="#索引⭐⭐" class="headerlink" title="索引⭐⭐"></a>索引⭐⭐</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构 上实现高级查找算法，这种数据结构就是索引。</p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库 的IO成本</td><td>索引列也是要占用空间的。</td></tr><tr><td>通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消 耗。</td><td>索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><blockquote><p>MySQL默认是B+Tree结构</p></blockquote><h3 id="B-Tree-B-Tree"><a href="#B-Tree-B-Tree" class="headerlink" title="B-Tree&amp;B+Tree"></a>B-Tree&amp;B+Tree</h3><p>B-Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174758649.png" alt="B-Tree图"></p><hr><p>B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174633933.png" alt="B+Tree图"></p><p>B+Tree 与 B-Tree相比，主要有以下三点区别： </p><ul><li>所有的数据都会出现在叶子节点。 </li><li>叶子节点形成一个单向链表。 </li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。</li></ul><p><strong>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点 的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</strong></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730175227025.png" alt="hash索引图"></p><p>特点：</p><ol><li><p>Hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询（between，&gt;，&lt; ，…） </p></li><li><p>无法利用索引完成排序操作 </p></li><li><p>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索 引</p></li></ol><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><blockquote><p>为什么InnoDB存储引擎选择使用B+tree索引结构?</p></blockquote><ol><li>相对于二叉树，层级更少，搜索效率高； （B+树三层就能存放2200w的数据）</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储 的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低； </li><li>相对Hash索引，B+tree支持范围匹配及排序操作；</li></ol><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建, 只能有一个</td><td><code>PRIMARY</code></td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td><code>UNIQUE</code></td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比 较索引中的值</td><td>可以有多个</td><td><code>FULLTEXT</code></td></tr></tbody></table><hr><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有,而且只有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p><strong>聚集索引选取规则:</strong> </p><ul><li>如果存在主键，主键索引就是聚集索引。 </li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。 </li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引。</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>执行SQL语句的具体流程如图：</p><ol><li>先在二级索引处查到name&#x3D;Arm</li><li>再把在二级索引处查到的对应的id通过回标查询来到聚集索引处</li><li>得到id在通过聚集索引查到行数据</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730195655768.png" alt="回表查询图"></p><blockquote><p>回表查询： 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取 数据的方式，就称之为回表查询。</p></blockquote><h3 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h3><p>以下两条SQL语句，那个执行效率高? 为什么? </p><p>A. select * from user where id &#x3D; 10 ; </p><p>B. select * from user where name &#x3D; ‘Arm’ ; </p><p>备注: id为主键，name字段创建的有索引；</p><blockquote><p>解答： A 语句的执行性能要高于B 语句。 因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然 后再查询聚集索引，也就是需要进行回表查询。</p></blockquote><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><ol><li>创建索引</li></ol><p>创建的索引名一般命名为<code>idx_表名_字段名</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT ] INDEX index_name <span class="keyword">ON</span> table_name (index_col_name,... ) ;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name ;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name ;</span><br></pre></td></tr></table></figure><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><p>可通过查看SQL执行频率，慢查询日志，profile详情和explain方法来分析哪个SQL语句的执行速度慢。</p><h3 id="explain（重点掌握）"><a href="#explain（重点掌握）" class="headerlink" title="explain（重点掌握）"></a>explain（重点掌握）</h3><p>Explain 执行计划中各个字段的含义:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，<strong>值越大，越先执行</strong>)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr></tbody></table><h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><blockquote><p><strong>针对联合索引</strong>而言，联合索引字段中的第一个字段必须存在（不需要指定位置），若不存在第一个字段则整个索引失效，若后续其他字段中跳过了某个字段，则后续的部分索引失效</p></blockquote><p>举例：</p><p>创建下列三个字段的联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sku_price_num_weight <span class="keyword">ON</span> tb_sku(price,num,weight);</span><br></pre></td></tr></table></figure><p>正常查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>跳过中间的字段后，后续字段索引会失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span>  <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>具体可通过<code>EXPLAIN</code>来查看是否使用了索引，看索引的长度来判断哪个字段索引被使用了</p></blockquote><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><blockquote><p>此处举例大多都是会导致索引失效的例子</p></blockquote><h4 id="范围查询特殊情况"><a href="#范围查询特殊情况" class="headerlink" title="范围查询特殊情况"></a>范围查询特殊情况</h4><p>如果出现范围查询，则&gt;或&lt;之后的索引会失效</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述SQL中num&gt;10000，导致后面的weight的索引失效，只有price和num的索引生效</p><p>可以把&gt;,&lt;修改为&gt;&#x3D;,&lt;&#x3D;，修改之后就能避免这种情况发生，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h4><p>不要在索引列上进行运算操作， 索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone,<span class="number">10</span>,<span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h4><p>字符串类型字段使用时，不加引号，索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：其实可以理解为phone本身是varchar类型，这里做了隐式类型转换，也算的上是计算</p></blockquote><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="or连接条件"><a href="#or连接条件" class="headerlink" title="or连接条件"></a>or连接条件</h4><p>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。只有当or前后都有索引才能生效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">23</span>; #其中age字段无索引</span><br></pre></td></tr></table></figure><h4 id="数据分布影响⭐"><a href="#数据分布影响⭐" class="headerlink" title="数据分布影响⭐"></a>数据分布影响⭐</h4><p>如果MySQL评估使用索引比全表更慢，则不使用索引。MySQL自己评判。</p><blockquote><p>走不走索引取决于查询的数据占全表的多少，若查询的数据占了全表的大部分，则全表搜索更快，故选择全表搜索，反之则相反。</p></blockquote><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><blockquote><p>此处的SQL提示，指的是我们去提示SQL，而不是SQL提示我们。</p></blockquote><ul><li>使用条件：</li></ul><p>当一个字段既有单列索引又有联合索引时，MySQL默认使用联合索引，此时我们可以使用三种方式去提示SQL使用何种索引。</p><ol><li>建议（建议仅仅只是建议，具体用不用还要MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>忽略（<strong>建议</strong>MySQL忽略某个索引，但是要不要忽略也是MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>强迫（MySQL必须采用所选的索引）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引指的是查询的字段全部都能一次查出，无需回表查询。</p><p>举例说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status, name <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #需要回表查询</span><br></pre></td></tr></table></figure><p>在这个SQL语句中，<code>profession</code> ,<code>age</code> ,<code> status</code>这三个字段组成联合索引，而<code>name</code>字段没有索引，所以在<strong>二级索引</strong>中<code>profession</code> ,<code>age</code> ,<code> status</code>以及他们的叶子节点中存放的<code>id</code>字段都是可以直接找到的，若这条语句不需要额外查询<code>name</code>字段的话（如下SQL），那么这条语句就是覆盖索引，因为他不需要回表查询，但因为有了<code>name</code>字段，所以不光要在二级索引中查，还要带着<code>id</code>去聚集索引中查，这就是回表查询。回表查询自然就会慢了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #覆盖索引，不需要回表查询</span><br></pre></td></tr></table></figure><blockquote><p>尽量不要使用<code>select *</code> 的原因就是查询全部字段很大可能会因为有些字段没有索引，而导致需要回表查询。</p></blockquote><h4 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h4><p>一张表, 有四个字段(id, username, password, status), 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>答案: 针对于 username, password建立联合索引, sql为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_name_pass <span class="keyword">on</span> tb_user(username,password); </span><br></pre></td></tr></table></figure><p>这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。</p></blockquote><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让 索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建 立索引，这样可以大大节约索引空间，从而提高索引效率。<strong>降低索引体积，提高查询效率</strong></p><p>语法：其中的<code>n</code>是从头开始截取的位数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxxx <span class="keyword">on</span> table_name(<span class="keyword">column</span>(n)) ;</span><br></pre></td></tr></table></figure><p>具体<code>n</code>取多少，下列sql中选择性越接近1且截取长度越少的越好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email,<span class="number">1</span>,n)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user ;</span><br></pre></td></tr></table></figure><blockquote><p>例如n取10时选择性为1，取9，8，7，6，5时选择性都为0.985，n取4时选择性为0.913，此时的n就应该n&#x3D;5</p></blockquote><ul><li>执行流程：</li></ul><p>如 index1 (即email整个字符串的索引结构)，执行顺序是这样的:</p><ol><li>从index1索引树找到满足索引值是<code>zhangssxyz@xxx.com</code>的这条记录，取得ID2的值</li><li>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集!</li><li>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足email&#x3D;<code>hangssxyz@xxx.com</code>的条件了，循环结束, 这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</li></ol><p>如 index2 (即email(6)索结构) ，执行顺序是这样的:</p><ol><li>从index2索引树找到满足索引值是’zhangs的记录，找到的第一个是ID1;</li><li>到主键上查到主键值是ID1的行，判断出email的值不是<code>zhangssxyz@xxx.com</code>，这行记录丢弃</li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是hangs，取出ID2，再到ID索引上取整行然后判断，这次值对了，将这行记录加入结果集;</li><li>重复上一步，直到在idxe2上取到的值不是zhangs时，循环结束<br>在这个过程中，要回主键索引取4次数据，也就是扫描了4行。<br>通过这个对比，你很容易就可以发现，<strong>使用前缀索引后，可能会导致查询语句读数据的次数变多</strong></li></ol><p>取自<a href="https://blog.csdn.net/m0_37583655/article/details/127945182?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169119750916800211587211%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169119750916800211587211&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-127945182-null-null.142%5Ev92%5EchatgptT0_1&utm_term=%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B5%81%E7%A8%8B%E4%BB%80%E4%B9%88&spm=1018.2226.3001.4187">CSDN博主（靖节先生）-前缀索引详解</a></p><h3 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引&amp;&amp;联合索引"></a>单列索引&amp;&amp;联合索引</h3><ul><li><p>单列索引：即一个索引只包含单个列。 </p></li><li><p>联合索引：即一个索引包含了多个列。</p></li></ul><blockquote><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引， 而非单列索引。</p></blockquote><p>联合索引的B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805093203021.png" alt="联合索引的B+Tree图"></p><h2 id="索引设计原则⭐"><a href="#索引设计原则⭐" class="headerlink" title="索引设计原则⭐"></a>索引设计原则⭐</h2><ol><li>针对于数据量较大，且查询比较频繁的表建立索引。</li></ol><blockquote><p>数据量大指的是超过一百多万……</p></blockquote><ol start="2"><li><p>针对于常作为查询条件 (where)、排序(order by)、分组 (group by) 操作的字段建立索引。</p></li><li><p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p></li></ol><blockquote><p>区分度高的字段例如用户的手机号，身份证号，区分度低的例如性别，用户的状态等</p></blockquote><ol start="4"><li><p>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p></li><li><p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p></li><li><p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p></li><li><p>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p></li></ol><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ol><li>批量插入数据</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>每次insert都要建立sql连接，会浪费时间和性能</p></blockquote><ol start="2"><li>手动控制事务</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL默认是自动提交事务，所以每次insert都会重复的开启事务，关闭事务，浪费时间</p></blockquote><ol start="3"><li>主键顺序插入，性能要高于乱序插入</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主键乱序插入 : <span class="number">8</span> <span class="number">1</span> <span class="number">9</span> <span class="number">21</span> <span class="number">88</span> <span class="number">2</span> <span class="number">4</span> <span class="number">15</span> <span class="number">89</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line">主键顺序插入 : <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">15</span> <span class="number">21</span> <span class="number">88</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><ol start="4"><li>大批量插入数据</li></ol><blockquote><p>当插入的数据大于几百万条的时候再使用insert效果就不好了</p></blockquote><ul><li><p>客户端连接服务端时，加上参数 –local-infile </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –-local-infile -u root -p </span><br></pre></td></tr></table></figure></li><li><p>设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>下面这条sql从该<code>tb_sku1.sql</code>文件中加载数据到表<code>tb_sku</code>，以<code>,</code>分隔字段，以换行为一行数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql/tb_sku1.sql&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> `tb_sku` fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>SQL文件前几行代码如下：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805155150579.png" alt="image-20230805155150579"></p><h2 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h2><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><h2 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h2><h2 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h2><h2 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h2><h1 id="视图-存储过程-触发器"><a href="#视图-存储过程-触发器" class="headerlink" title="视图&#x2F;存储过程&#x2F;触发器"></a>视图&#x2F;存储过程&#x2F;触发器</h1><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h1 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h1><h1 id="MySQL管理"><a href="#MySQL管理" class="headerlink" title="MySQL管理"></a>MySQL管理</h1>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后续优化</title>
      <link href="/2023/01/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/"/>
      <url>/2023/01/05/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前完成了瑞吉外卖项目的全部功能，但未对性能进行优化，本次将使用redis等技术实现优化。</p><h2 id="缓存短信验证码"><a href="#缓存短信验证码" class="headerlink" title="缓存短信验证码"></a>缓存短信验证码</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>之前的短信验证码是存在session中的，相较于存在redis而言，它不那么安全，且不能设置短信验证码生效时间，故使用redis进行优化。</p><ul><li><p>在UserController类中注入redisTemplate对象</p></li><li><p>将验证码存入redis中，并设置验证码过期时间</p></li><li><p>从redis中获取验证码，并在登录成功后立即删除验证码</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将验证码存入Session</span></span><br><span class="line"><span class="comment">//session.setAttribute(phone, code);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将验证码存入redis中，并设置验证码过期时间</span></span><br><span class="line">redisTemplate.opsForValue().setIfAbsent(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从session中取出生成的验证码</span></span><br><span class="line"><span class="comment">//Object codeInSession = session.getAttribute(phone);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从redis中取出生成的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功后，删除redis中的数据</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure><hr><h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>移动端在登录过后，会经常访问展示菜品和套餐的界面，该界面的展示方法对应的是DishController和SetmealController中的两个list方法，故需要对该方法进行缓存优化，使得存在缓存时将缓存数据直接传给前端，而无需再访问数据库。</p><p>其次是要防止产生脏数据，如需要在save，update，status方法执行后将缓存清除，以免数据库的数据已经更改，而移动端页面因为存在缓存而不查询数据库导致数据的错乱。</p><p>此处需注意的是，我们不对delete方法做清除缓存的原因是：我们设计数据库表的时候对于菜品或者套餐的删除是逻辑删除，同时list展示方法也会有起售状态的限制，故无需再在delete方法上对缓存进行清除。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>此处对于key的处理是统一使用分类来进行区分，当我们点击某一个分类时，只需展示当前分类下的菜品，而其他分类的菜品数据并不需要展示。</p><h4 id="list方法"><a href="#list方法" class="headerlink" title="list方法"></a>list方法</h4><ul><li>动态获取key</li><li>判断是否存在缓存</li><li>缓存存在则无需查询数据库，直接返回缓存</li><li>缓存不存在则查询数据库，并将查询结果保存在缓存中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动端展示菜品数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">        <span class="comment">//动态获取一个key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断缓存是否存在</span></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList;</span><br><span class="line">        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存存在，则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (dishDtoList != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存不存在，则查询数据库，并将查询到的集合存入缓存中</span></span><br><span class="line">        dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">            <span class="comment">//获得菜品分类的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="comment">//根据id查询分类对象</span></span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前菜品的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">            dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">            dishDtoList.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将查询到的集合存入缓存中</span></span><br><span class="line">        redisTemplate.opsForValue().setIfAbsent(key, dishDtoList, <span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save方法"><a href="#save方法" class="headerlink" title="save方法"></a>save方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="status方法"><a href="#status方法" class="headerlink" title="status方法"></a>status方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量起售、停售菜品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">            dish.setStatus(status);</span><br><span class="line">            dishService.updateById(dish);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringCache技术"><a href="#SpringCache技术" class="headerlink" title="SpringCache技术"></a>SpringCache技术</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SpringCache是一个框架，实现了基本注解的缓存功能，只需要简单的添加一个注解，就能实现缓存功能</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">开启缓存注解功能</td></tr><tr><td align="center">@Cacheable</td><td align="center">在方法执行前spring先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td align="center">@CachePut</td><td align="center">将方法的返回值放到缓存中</td></tr><tr><td align="center">@CacheEvict</td><td align="center">将一条或者多条数据从缓存中删除</td></tr></tbody></table><hr><h2 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p>与菜品的分析基本一致，此处不过是用另一种较为简单的方式进行操作缓存而已</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li>导入maven坐标</li><li>在application.yml文件配置cache</li><li>在启动类上加上<code>@EnableCaching</code>注解</li><li>list方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId+&#x27;_&#x27;+#setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="5"><li>save方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="6"><li>update方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="7"><li>status方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br></pre></td></tr></table></figure><hr><h1 id="读写分离优化"><a href="#读写分离优化" class="headerlink" title="读写分离优化"></a>读写分离优化</h1><h2 id="为什么要读写分离"><a href="#为什么要读写分离" class="headerlink" title="为什么要读写分离"></a>为什么要读写分离</h2><p>因为之前对于数据库的增删改查都是对同一台服务器进行操作，不仅这样对单个服务器的压力很大，而且如果该服务器的硬盘损毁，则数据也会丢失，会不安全。而使用读写分离是基于MySQL提供的主从复制功能实现，我们可以对主库进行增删改的操作，对从库进行查找的操作，而对主库的修改会通过日志的形式同步修改到从库中，从而保证数据是正确的。</p><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.png" alt="读写分离图"></p><hr><h2 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h2><p>MySQL复制过程分成三步:</p><ul><li><p>master将改变记录到二进制日志（binary log)</p></li><li><p>slave将master的binary log拷贝到它的中继日志（relay log)</p></li><li><p>slave重做中继日志中的事件，将改变应用到自己的数据库中</p></li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/image-20230728162538415.png" alt="image-20230728162538415"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>后续的MySQL的读写分离优化，nginx，swagger等优化待续……</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2023/01/04/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/01/04/java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在学习瑞吉外卖项目时使用到的stream流操作，现在回来补一下，看的视频教程依然是<a href="https://www.bilibili.com/video/BV18J411W7cE/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a></p><h2 id="lambda表达式⭐⭐⭐"><a href="#lambda表达式⭐⭐⭐" class="headerlink" title="lambda表达式⭐⭐⭐"></a>lambda表达式⭐⭐⭐</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以理解为是匿名内部类的另一种写法，本质是注重做了什么。</p></blockquote><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><blockquote><ul><li><p>需要有一个接口，该接口中有且仅有一个抽象方法，其实也可以说是函数式接口。</p></li><li><p>必须要有上下文环境，即可以推导</p></li></ul></blockquote><h3 id="具体格式（形式）"><a href="#具体格式（形式）" class="headerlink" title="具体格式（形式）"></a>具体格式（形式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（调用的参数）-&gt;&#123;</span><br><span class="line">    执行的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，诸如<code>int</code>，<code>String</code>这样的变量类型可以省略，不过要省就全部一起省，只用一个调用参数的话小括号也可以省，只有一条执行语句大括号也可以省略，且此时<code>return</code>关键字也可以省略。</p><hr><h2 id="方法引用⭐⭐"><a href="#方法引用⭐⭐" class="headerlink" title="方法引用⭐⭐"></a>方法引用⭐⭐</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以用lambda表达式的地方就可以使用方法引用，可以说他们是孪生兄弟。</p></blockquote><h3 id="具体形式"><a href="#具体形式" class="headerlink" title="具体形式"></a>具体形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out::println</span><br></pre></td></tr></table></figure><p>可以理解为System.out这个对象调用了println这个方法，因为跟lambda类似，是可以推导出来的，（<strong>能推导的就是可以省略的</strong>）</p><h3 id="几种形式"><a href="#几种形式" class="headerlink" title="几种形式"></a>几种形式</h3><ol><li>引用类方法：</li></ol><p>​类名::静态方法（Interger::parseInt）</p><ol start="2"><li>引用对象的实例方法</li></ol><p>​对象::方法</p><ol start="3"><li>引用类的实例方法</li></ol><p>​类名::方法</p><ol start="4"><li>引用构造器</li></ol><p>​类名::new</p><blockquote><p>具体可以参考<a href="https://www.bilibili.com/video/BV12R4y157Be/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">mybatisplus学习</a>中的条件构造器</p></blockquote><hr><h2 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h2><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>在方法前可以加一个default代表默认方法，实现该接口的实现类不用必须重写该方法，但有需要也是可以重写的。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>在方法前加一个static就代表是静态方法，同样无须重写，甚至还可以有方法体。</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>加入private关键字就是私有方法了</p><hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个接口有且只有一个抽象方法就是函数式接口，可以加<code>@FunctionalInterface</code>注解表明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><p><strong>意义在于：函数式接口作为方法的参数时，可以把lambda表达式作为参数传递。</strong></p><p>下面例子中<code>Runnable</code>就是一个函数式接口，有且仅有一个run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        useThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useThread(()-&gt; System.out.println(<span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useThread</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p>意义在于：函数式接口作为方法的返回值时，可以把lambda表达式写到方法返回值处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        arrayList.sort(getByLong());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title function_">getByLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类</span></span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length() - s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用lambda</span></span><br><span class="line">        <span class="keyword">return</span> (s1, s2) -&gt; s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来代码优雅多了~~</p><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><ol><li><p>Supplier</p></li><li><p>Consumer</p></li><li><p>Predicate</p></li><li><p>Function</p><p><img src="/../assets/java8%E6%96%B0%E7%89%B9%E6%80%A7/%E5%9B%9B%E5%A4%A7%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="四大内置函数式接口"></p></li></ol><blockquote><p>其实我觉得没啥用，感觉多此一举了，下面举个例子吧，有需要再去看<a href="https://www.bilibili.com/video/BV18J411W7cE/?p=386&spm_id_from=pageDriver&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a>了，感觉也是用不上的，其实就是在这些常用API中使用lambda表达式而已。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>&#125;;</span><br><span class="line">        operateString(strArray, s -&gt; System.out.print(<span class="string">&quot;姓名：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]), s -&gt; System.out.println(<span class="string">&quot;，年龄：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operateString</span><span class="params">(String[] strArray, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : strArray) &#123;</span><br><span class="line">            con1.andThen(con2).accept(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="stream流⭐⭐⭐⭐⭐"><a href="#stream流⭐⭐⭐⭐⭐" class="headerlink" title="stream流⭐⭐⭐⭐⭐"></a>stream流⭐⭐⭐⭐⭐</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小乌龟&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李强&quot;</span>);</span><br><span class="line">        <span class="comment">//要求：对集合进行过滤，要“小”开头且长度为2的字符串，最后打印</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;小&quot;</span>)).filter(s -&gt; s.length() == <span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="流的生成操作"><a href="#流的生成操作" class="headerlink" title="流的生成操作"></a>流的生成操作</h3><ol><li><p>Collection体系的诸如list和set可直接调用stream流生成</p></li><li><p>map集合可以先生成<code>keySet</code>，<code>value</code>，<code>entrySet</code>，再通过stream流生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure></li><li><p>数组可以通过Stream的静态方法生成流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="流的中间操作"><a href="#流的中间操作" class="headerlink" title="流的中间操作"></a>流的中间操作</h3><ol><li><p>filter</p><p>用于过滤，方法中调用的参数是Predicate，该类中有一个test方法用于判断得到boolean值</p><p>例子可见实例处</p></li><li><p>limit</p><p>取前n个元素</p></li><li><p>skip</p><p>取n个元素之后的元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳过前2个元素之后去剩余元素的前2个元素并输出</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>静态方法concat</p><p>合并两个流</p></li><li><p>distinct</p><p>去除流中重复元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建第一个流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//创建第二个流</span></span><br><span class="line">Stream&lt;String&gt; stream2 = list.stream().skip(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//合并两个流，并要求字符串不能有重复</span></span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1, stream2);</span><br><span class="line">concat.distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="6"><li><p>sorted</p><p>排序，不加参数按自然排序，加比较器参数（使用lambda表达式）后按指定形式排序</p></li><li><p>map和mapToInt</p><p>将流中的元素由一种类型转换为另一种类型，而mapToInt是直接转换为Int型，拥有独有的sum用于统计总和</p></li></ol><h3 id="流的终止操作"><a href="#流的终止操作" class="headerlink" title="流的终止操作"></a>流的终止操作</h3><ol><li><p>forEach</p><p>使用参数进行操作，例如打印输出</p></li><li><p>count</p><p>统计流中个数</p></li></ol><h3 id="流的收集操作"><a href="#流的收集操作" class="headerlink" title="流的收集操作"></a>流的收集操作</h3><ol><li>toList</li><li>toSet</li><li>toMap</li></ol><p>三个方法的使用类似，下面就举一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = stream1.collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后端代码实现</title>
      <link href="/2022/12/31/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/12/31/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人参照<a href="https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.999.0.0&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员瑞吉外卖</a>视频进行学习，并完善了剩余功能。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="主要使用的技术"><a href="#主要使用的技术" class="headerlink" title="主要使用的技术"></a>主要使用的技术</h3><blockquote><ul><li><p>后端：<code>springboot，spring，springmvc，mybatis，mybatis-plus </code></p></li><li><p>前端：<code>html,css,js,vue,elementui</code></p></li></ul></blockquote><h3 id="搭建数据库（reggie）-表"><a href="#搭建数据库（reggie）-表" class="headerlink" title="搭建数据库（reggie）&#x2F;表"></a>搭建数据库（reggie）&#x2F;表</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8.png" alt="数据库表图"></p><p>具体表中的各个字段所代表的意义都已在数据库设计表中的注释提及</p><table><thead><tr><th>表名</th><th>表的描述</th></tr></thead><tbody><tr><td>employee（员工表）</td><td>用于存放后台管理人员的信息</td></tr><tr><td>category（分类表）</td><td>分类表中存放的是菜品的分类和套餐的分类</td></tr><tr><td>dish（菜品表）</td><td>存放的是菜品的信息，一个菜品必属于一个菜品分类，一个菜品分类也可以有不止一种菜品</td></tr><tr><td>dish_flavor（菜品口味表）</td><td>存放的是菜品口味的信息，一个菜品可以有多种口味，对应着就会有多条数据是隶属于一个菜品的，其中已经用菜品的<code>id</code>把对应的菜品和菜品口味关联好</td></tr><tr><td>setmeal（套餐表）</td><td>存放的是套餐的信息，一个套餐必属于一个套餐分类，一个套餐分类也可以有不止一种套餐</td></tr><tr><td>setmeal_dish（套餐菜品对应表）</td><td>存放的是套餐里所包含的菜品的信息（<strong>因为一个套餐是由若干个菜品相组成的</strong>），此处存放的信息就是该套餐下所包含的是哪些菜品</td></tr><tr><td>orders（订单表）</td><td>存放的是用户下单之后的订单的简单信息（包括订单号，订单状态，收货人，联系电话，地址，支付金额，下单时间）</td></tr><tr><td>order_details（订单明细表）</td><td>存放的是用户下单之后的订单的更多信息（包含了用户购买的是哪些菜品或套餐）</td></tr><tr><td>address_book（地址簿表）</td><td>存放的是用户的地址信息，也包含默认地址等</td></tr><tr><td>shoppingcart（购物车表）</td><td>存放的是用户通过移动端点击对应的菜品或套餐所加入的数据，清空购物车自然就是清空<strong>该用户</strong>的购物车数据</td></tr><tr><td>user（用户表）</td><td>存放的是用户的基本信息</td></tr></tbody></table><hr><h3 id="Idea中的基本配置"><a href="#Idea中的基本配置" class="headerlink" title="Idea中的基本配置"></a>Idea中的基本配置</h3><blockquote><p>通过mybatis-plus来逆向创建对应的pojo，mapper，service接口和serviceImpl实体类即可。</p></blockquote><h4 id="创建通用的R类（通用返回结果类）"><a href="#创建通用的R类（通用返回结果类）" class="headerlink" title="创建通用的R类（通用返回结果类）"></a>创建通用的R类（通用返回结果类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="设置静态资源映射"><a href="#设置静态资源映射" class="headerlink" title="设置静态资源映射"></a>设置静态资源映射</h4><blockquote><p>主要是让Spring可以扫描<code>backend</code>和<code>front</code>下的静态资源（HTML,CSS.JS）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台员工登录登出功能"><a href="#后台员工登录登出功能" class="headerlink" title="后台员工登录登出功能"></a>后台员工登录登出功能</h2><h3 id="员工登录功能"><a href="#员工登录功能" class="headerlink" title="员工登录功能"></a>员工登录功能</h3><blockquote><p><strong>员工登录功能</strong></p><ol><li><p>将页面提交过来的<code>password</code>进行<code>md5</code>加密</p></li><li><p>根据用户提交的用户名查询数据库</p></li><li><p>如果用户不存在则退出</p></li><li><p>密码比对，如果不成功则退出</p></li><li><p>查看账号是否已被禁用</p></li><li><p>登录成功，将员工的<code>id</code>存入<code>Session</code>(重点)中，（此处获得这个<code>id</code>的作用是让员工管理业面可显示出此时登录者的名字）并返回登录成功结果</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.将页面提交过来的password进行md5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据用户提交的用户名查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果用户不存在则退出</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.密码比对，如果不成功则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(emp.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.查看账号是否已被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="员工登出功能"><a href="#员工登出功能" class="headerlink" title="员工登出功能"></a>员工登出功能</h3><blockquote><ol><li><p>将登录时存在<code>Session</code>中的<code>id</code>释放出来</p></li><li><p>返回结果（注意：此时业面跳转不显示<strong>退出成功</strong>的原因是：因为显示<code>退出成功</code>的<code>html</code>页面已经关闭，故在登录页看不到<code>退出成功</code>的显示）</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="完善员工登录登出"><a href="#完善员工登录登出" class="headerlink" title="完善员工登录登出"></a>完善员工登录登出</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><blockquote><p>因为可以不通过登录而直接访问员工管理的页面，这显然是不合理的，需要通过设置一个拦截器，去让用户必须先登录才能访问员工管理页面。</p><ol><li><p>获取本次请求的URI</p></li><li><p>定义不需要处理的请求路径（即一个字符串数组）</p></li><li><p>创建一个<code>PATH_MATCHER</code>来比对路径上的通配符</p></li><li><p>判断本次请求是否需要处理</p></li><li><p>如果不需要处理，则直接放行</p></li><li><p>判断登录状态，如果已登录，则直接放行</p></li><li><p>如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,<span class="comment">//登录的请求路径</span></span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,<span class="comment">//登出的请求路径</span></span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,<span class="comment">//后台的静态资源</span></span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span><span class="comment">//移动端的静态资源</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls,String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="踩坑点"><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h4><blockquote><p>若没加<code>.getSession()</code>则会使登录成功后一直重新回到登录页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"><span class="keyword">return</span> R.success(emp);</span><br></pre></td></tr></table></figure><blockquote><p>如果还有问题，可以尝试去清除一下浏览器缓存</p></blockquote><hr><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><h3 id="新增员工功能"><a href="#新增员工功能" class="headerlink" title="新增员工功能"></a>新增员工功能</h3><hr><blockquote><p><strong>需求分析</strong>：因为前端页面展示的让用户新增员工时所填的信息有限，一部分<code>employee</code>分装对象中的属性，即表中的字段需要<strong>填入默认值</strong>，故该方法用于接收前端页面所传递过来的包装好的<code>employee</code>对象，并将<strong>该对象存进表中</strong>。</p></blockquote><blockquote><p>功能分析：</p><ol><li><p>设置默认密码(使用<code>md5</code>加密处理)</p></li><li><p>获取登录时传入<code>Session</code>中的<code>id</code></p></li><li><p>添加创建人信息（该创建人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加修改人信息（该修改人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加创建时间</p></li><li><p>添加更新时间</p></li><li><p>将该对象的属性存入表中</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置默认密码(使用md5加密处理)</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取登录时传入Session中的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="comment">//添加创建人信息</span></span><br><span class="line">        employee.setCreateUser(empId);</span><br><span class="line">        <span class="comment">//添加修改人信息</span></span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        <span class="comment">//添加创建时间</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//添加更新时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//将该对象的属性存入表中</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="完善新增员工功能"><a href="#完善新增员工功能" class="headerlink" title="完善新增员工功能"></a>完善新增员工功能</h3><blockquote><p><strong>需求分析</strong>：</p><p>因为<code>employee</code>表中的<code>username</code>字段被设置为了唯一的约束，故在前端页面填写时输入相同的<code>username</code>会抛出异常，故需要做出解决，提出错误信息。</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li><p>配置全局异常的一个类，让所有<code>Controller</code>层的类的异常都经过该类处理。</p></li><li><p>解决上述索引唯一的异常，为前端展示错误信息。</p></li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="员工分页查询显示到前端"><a href="#员工分页查询显示到前端" class="headerlink" title="员工分页查询显示到前端"></a>员工分页查询显示到前端</h2><h3 id="分页查询功能"><a href="#分页查询功能" class="headerlink" title="分页查询功能"></a>分页查询功能</h3><blockquote><p><strong>需求分析：</strong></p><p>前端发送<code>get</code>请求，把<code>page</code>当前页,<code>pageSize</code>每页显示条数,<code>name</code>查询名等参数传入<code>controller</code>层，后端进行分页查询和条件查询并把查询对象传回给前端</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li>添加mybatis-plus的分页插件</li><li>构造分页查询器</li><li>构造条件查询器</li><li>添加过滤条件（这里使用<code>like</code>而不是<code>eq</code>）</li><li>添加排序条件</li><li>执行查询，返回结果（结果中返回的<code>pageInfo</code>对象是因为查询完后会将数据封装到该对象中，并且与前端中相响应）</li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页查询器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//构造条件查询器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(name),Employee::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        employeeService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%9D%A1.png" alt="前端分页条"></p><blockquote><p>该处可去前端页面修改<code>list.html</code></p></blockquote><hr><h2 id="启用-禁用员工账号"><a href="#启用-禁用员工账号" class="headerlink" title="启用&#x2F;禁用员工账号"></a>启用&#x2F;禁用员工账号</h2><h3 id="启用-禁用员工账号功能实现"><a href="#启用-禁用员工账号功能实现" class="headerlink" title="启用&#x2F;禁用员工账号功能实现"></a>启用&#x2F;禁用员工账号功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>管理员账号<code>admin</code>可以对员工账号进行启用和禁用操作，而其他用户不可进行该操作</p><p><strong>代码实现：</strong></p><p>本质上是一个update操作，<code>status</code>和<code>id</code>已经从前端传入，需要额外更改的是更新人和更新时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><blockquote><p><strong>原因分析：</strong></p><p><code>js</code>对<code>Long</code>类型的数据的处理时丢失了精度，导致前端发送过来的<code>id</code>与数据库中的<code>id</code>不一致</p></blockquote><blockquote><p><strong>解决方案：</strong></p><p>将<code>json</code>中的<code>Long</code>型数据转成字符串，在配置中添加对应的方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器（写在WebMVCConfig中）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="编辑员工信息功能"><a href="#编辑员工信息功能" class="headerlink" title="编辑员工信息功能"></a>编辑员工信息功能</h2><h3 id="编辑员工信息功能实现"><a href="#编辑员工信息功能实现" class="headerlink" title="编辑员工信息功能实现"></a>编辑员工信息功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>用户点击编辑时进入编辑界面，此时登录页面时可以看到用户原本的信息，再经过修改信息后保存到数据库。</p></blockquote><hr><h4 id="回显功能实现（进入编辑页面可看到用户原始信息）"><a href="#回显功能实现（进入编辑页面可看到用户原始信息）" class="headerlink" title="回显功能实现（进入编辑页面可看到用户原始信息）"></a>回显功能实现（进入编辑页面可看到用户原始信息）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编辑功能实现"><a href="#编辑功能实现" class="headerlink" title="编辑功能实现"></a>编辑功能实现</h4><blockquote><p>注意：此处直接调用的是启用&#x2F;禁用员工账号时的方法，因为传入的是一个<code>employee</code>对象，故该方法是一个通用的  更新方法。</p></blockquote><hr><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><h3 id="为什么要对公共字段填充"><a href="#为什么要对公共字段填充" class="headerlink" title="为什么要对公共字段填充"></a>为什么要对公共字段填充</h3><blockquote><p>因为不论是在员工管理处还是菜品或者套餐管理处都需要添加诸如<code>createTime</code>，<code>updateTime</code>，<code>createUser</code>，以及<code>updateUser</code>这四个字段，故可以使用<code>mybatis-plus</code>提供的公共字段自动填充方法，省去手动为用户填写这四个信息。</p></blockquote><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><hr><h4 id="1-在employee表中这四个字段上添加相应属性"><a href="#1-在employee表中这四个字段上添加相应属性" class="headerlink" title="1.在employee表中这四个字段上添加相应属性"></a>1.在<code>employee</code>表中这四个字段上添加相应属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//此处要修改为LocalDateTime，因为数据库中与这里使用的类型不一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//与上同理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>updateTime</code>和<code>updateUser</code>需要在创建和更改时都做更改</p></blockquote><hr><h4 id="2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去"><a href="#2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去" class="headerlink" title="2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去"></a>2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去</h4><hr><h4 id="3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"><a href="#3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id" class="headerlink" title="3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"></a>3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</h4><blockquote><p>创建该工具类，因为在一次Http请求中线程是唯一的，故可以通过该方式得到存入Session中存放的id。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-自定义元数据对象处理器（即公共字段自动填充类）"><a href="#4-自定义元数据对象处理器（即公共字段自动填充类）" class="headerlink" title="4.自定义元数据对象处理器（即公共字段自动填充类）"></a>4.自定义元数据对象处理器（即公共字段自动填充类）</h4><blockquote><p>该类中重写两个方法，分别用于插入操作和更新操作时的自动填充。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-将Session中存放的id存入线程中"><a href="#5-将Session中存放的id存入线程中" class="headerlink" title="5.将Session中存放的id存入线程中"></a>5.将Session中存放的id存入线程中</h4><blockquote><p>在已登录的情况下将Session中存放的id存入线程中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="小结（逻辑）"><a href="#小结（逻辑）" class="headerlink" title="小结（逻辑）"></a>小结（逻辑）</h3><blockquote><p>在一次Http请求中线程是不会发生改变的，也就是说，在发送请求给后端时，经过过滤器，再经过Controller，最后在MyMetaObjecthandler实现自动填充方法时的线程的id都是不会发生改变的。</p><p>需要使用到线程的原因是因为在自动填充更新人和创建人的时候，需要将用户的id传入，但在MyMetaObjecthandler类中无法直接获得到Session中的id，故需要使用该方法。</p></blockquote><hr><h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="新增分类功能实现"><a href="#新增分类功能实现" class="headerlink" title="新增分类功能实现"></a>新增分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分类分页查询显示数据到页面上"><a href="#分类分页查询显示数据到页面上" class="headerlink" title="分类分页查询显示数据到页面上"></a>分类分页查询显示数据到页面上</h2><h3 id="分类分页查询功能实现"><a href="#分类分页查询功能实现" class="headerlink" title="分类分页查询功能实现"></a>分类分页查询功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">        categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p><strong>注意</strong>：因为分类表中包含着菜品分类和套餐分类，而对应的菜品表和套餐表中存在着一些关联，故规定菜品表（套餐表）中存在关联的分类不允许删除。</p></blockquote><h3 id="代码功能实现"><a href="#代码功能实现" class="headerlink" title="代码功能实现"></a>代码功能实现</h3><ul><li><strong>在<code>CategoryController</code>类中调用自定义方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">        categoryService.remove(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>在<code>CategoryService</code>接口中创建自定义方法<code>remove</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>在<code>CategoryServiceImpl</code>实现类中实现方法</strong></p><blockquote><p>通过查询菜品表或商品表中<code>CategoryId</code>与传入的<code>id</code>相等的数量，若大于零则证明存在关联，则不允许删除，则抛出一个自定义的异常</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除，删除前需判断条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">        <span class="comment">//查看是否关联菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看是否关联套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//无关联则进行删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>自定义异常类<code>CustomException</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将该异常交于之前定义的全局异常处理器处理</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="修改分类功能实现"><a href="#修改分类功能实现" class="headerlink" title="修改分类功能实现"></a>修改分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p>用于新增菜品时的图片的上传和回显</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//abc.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;<span class="comment">//dfsdfdfd.jpg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>点击新建菜品后，页面会立即发送一个请求（获取菜品分类信息列表）</strong></p><p><strong>菜品图片得上传和回显由之前完成</strong></p><p><strong>此处新增菜品所上传得数据不只有菜品表的信息，还有菜品口味表的信息，故接受数据需要一个新的类</strong></p></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>菜品分类展示为下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新建一个类用于接受前端发送的数据</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//菜品口味列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新添加一个方法用于一次修改两张表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="comment">//新增菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>实现该方法</strong></p><blockquote><p><strong>注意：此处需要开始事务，并且由前端传入的菜品口味数据中没有与之对应的菜品<code>id</code>，故需要拿到菜品口味的列表集合进行<code>id</code>的赋值。</strong></p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息保存到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜品口味存入菜品口味表</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品分页展示"><a href="#菜品分页展示" class="headerlink" title="菜品分页展示"></a>菜品分页展示</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>与员工和分类的查询的不同之处在于：<code>Dish</code>表中所有的只是分类的<code>id</code>而不是分类的名称，但前端页面需要展示的是分类的名称而不是<code>id</code>。</strong></p></blockquote><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>在基础上加以改变</p><ul><li>将分页对象pageInfo拷贝给dishDtoPage，但不拷贝records这个集合（该集合存储的是前端传入的数据）</li><li>将List<Dish>传给List<DishDto>的同时，将分类的名称也传入List<DishDto></li><li>实现方式为用列表存储多个DishDto对象，通过分类id得到分类对象，再通过分类对象得到分类名称，将分类名称放入DishDto对象中，并将Dish中的其他属性拷贝至DishDto中，最后统一由list收集DishDto对象。</li><li>将list对象传入分页对象的recodes属性中。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish record : records) &#123;</span><br><span class="line">   <span class="comment">//每轮循环创造一个新的disDto对象</span></span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record,dishDto);</span><br><span class="line"></span><br><span class="line">            list.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            DishDto dishDto = new DishDto();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            BeanUtils.copyProperties(item,dishDto);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            Long categoryId = item.getCategoryId();//分类id</span></span><br><span class="line"><span class="comment">//            //根据id查询分类对象</span></span><br><span class="line"><span class="comment">//            Category category = categoryService.getById(categoryId);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if(category != null)&#123;</span></span><br><span class="line"><span class="comment">//                String categoryName = category.getName();</span></span><br><span class="line"><span class="comment">//                dishDto.setCategoryName(categoryName);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return dishDto;</span></span><br><span class="line"><span class="comment">//        &#125;).collect(Collectors.toList());</span></span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量起售和停售"><a href="#菜品的批量起售和停售" class="headerlink" title="菜品的批量起售和停售"></a>菜品的批量起售和停售</h2><blockquote><p>需要修改：若菜品关联了套餐，则不允许停售</p></blockquote><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84.png" alt="请求路径"></p><blockquote><h6 id="注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"><a href="#注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入" class="headerlink" title="注意点：@PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"></a><strong>注意点：<code>@PathVariable</code>的使用，在有多个参数时需加上占位符的值才能让值传入</strong></h6></blockquote><hr><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">                dish.setStatus(status);</span><br><span class="line">                dishService.updateById(dish);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改菜品信息"><a href="#修改菜品信息" class="headerlink" title="修改菜品信息"></a>修改菜品信息</h2><h3 id="菜品信息回显功能"><a href="#菜品信息回显功能" class="headerlink" title="菜品信息回显功能"></a>菜品信息回显功能</h3><ul><li><strong>功能分析</strong></li></ul><blockquote><p><strong>将已有的菜品信息和菜品口味信息查询出来传回前端。</strong></p></blockquote><ul><li><strong>代码实现</strong></li><li><strong>在<code>DishService</code>接口中创建一个方法用于一次查两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询两张表</span></span><br><span class="line">    DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>实现该方法</strong></p><blockquote><p>将两张表的数据分别查出，再存入同一个dishDto对象中</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, id);</span><br><span class="line">        List&lt;DishFlavor&gt; list = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        dishDto.setFlavors(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>controller层调用该方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">        <span class="keyword">if</span> (dishDto != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到菜品信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改菜品功能"><a href="#修改菜品功能" class="headerlink" title="修改菜品功能"></a>修改菜品功能</h3><ul><li><strong>在<code>DishService</code>接口中创建一个方法用于一次修改两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>实现该方法</strong></li></ul><blockquote><ol><li><p>更新菜品基本信息</p></li><li><p>删除菜品口味原有信息</p></li><li><p>新增菜品口味信息</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息更新到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将口味表的数据清空</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, dishDto.getId());</span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再将菜品口味存入菜品口味表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.updateBatchById(flavors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量删除（逻辑删除）"><a href="#菜品的批量删除（逻辑删除）" class="headerlink" title="菜品的批量删除（逻辑删除）"></a>菜品的批量删除（逻辑删除）</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</strong></p></blockquote><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>主要代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithFlavor</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="comment">//需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品正处于起售状态不能删除(抛异常)</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish.getStatus().equals(<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品正处于起售状态不能删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品关联了其他套餐不能删除（抛异常）</span></span><br><span class="line">            List&lt;SetmealDish&gt; list = setmealDishService.list();</span><br><span class="line">            <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id.equals(setmealDish.getDishId()))&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品关联了其他套餐不能删除&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            queryWrapper.eq(id != <span class="literal">null</span>, Dish::getId, id);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品口味</span></span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, id);</span><br><span class="line">            dishFlavorService.remove(queryWrapper1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>要获得一个套餐分类的下拉列表</p></li><li><p>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</p></li><li><p>将套餐信息保存至数据库中（保存套餐的基本信息，保存套餐所包含的菜品的信息）</p></li></ol></blockquote><hr><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>获得一个套餐分类的下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//只查询起售的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将套餐信息保存至数据库中</strong>（主要代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐基本信息</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐包含的菜品</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐分页展示"><a href="#套餐分页展示" class="headerlink" title="套餐分页展示"></a>套餐分页展示</h2><h3 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的分页展示逻辑相同，都需要特别注意前端需要的是套餐的名称而不是<code>id</code></strong></p></blockquote><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo, setmealDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Setmeal record : records) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                setmealDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record, setmealDto);</span><br><span class="line"></span><br><span class="line">            list.add(setmealDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setmealDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="套餐的批量起售和停售"><a href="#套餐的批量起售和停售" class="headerlink" title="套餐的批量起售和停售"></a>套餐的批量起售和停售</h2><h3 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的批量起售和停售功能逻辑相同</strong></p></blockquote><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (setmeal != <span class="literal">null</span>) &#123;</span><br><span class="line">                setmeal.setStatus(status);</span><br><span class="line">                setmealService.updateById(setmeal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;套餐售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改套餐功能"><a href="#修改套餐功能" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h2><h3 id="套餐信息回显功能"><a href="#套餐信息回显功能" class="headerlink" title="套餐信息回显功能"></a>套餐信息回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="comment">//（套餐回显功能）</span></span><br><span class="line"><span class="keyword">public</span> SetmealDto <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line"></span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealDto);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(id != <span class="literal">null</span>, SetmealDish::getSetmealId, id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setmealDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改套餐功能-1"><a href="#修改套餐功能-1" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将套餐信息更新到菜品表中</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先将套餐菜品关系表的数据清空</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId, setmealDto.getId());</span><br><span class="line">    setmealDishService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再将套餐菜品关系填入表中</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐的批量删除"><a href="#套餐的批量删除" class="headerlink" title="套餐的批量删除"></a>套餐的批量删除</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><strong>处于起售状态的套餐不能删除，与菜品删除不同的是，删除套餐可不用删除菜品</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithDish</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (setmeal.getStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;存在套餐正处于起售状态不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="订单明细"><a href="#订单明细" class="headerlink" title="订单明细"></a>订单明细</h2><blockquote><p>见39.后台按条件查看订单</p></blockquote><h2 id="移动端短信验证登录（登出）"><a href="#移动端短信验证登录（登出）" class="headerlink" title="移动端短信验证登录（登出）"></a>移动端短信验证登录（登出）</h2><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><ul><li>导入maven坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里云短信服务--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.5</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>修改<code>LoginCheckFilter</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>获取验证码</li></ul><blockquote><p><strong>注意：此处因为没有阿里云短信服务的签名，所以真实发送短信的步骤就注释了，但生成的验证码可在控制台通过日志的形式查看。</strong></p><ol><li><p>获取手机号</p></li><li><p>生成随机的四位验证码</p></li><li><p>调用阿里云的短信服务API发送短信（已注释）</p></li><li><p>将验证码存入Session</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//生成随机的四位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> String.valueOf(ValidateCodeUtils.generateValidateCode(<span class="number">4</span>));</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用阿里云的短信服务API发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入Session</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;短信验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登录移动端"><a href="#登录移动端" class="headerlink" title="登录移动端"></a>登录移动端</h3><ul><li><strong>具体流程</strong></li></ul><blockquote><ol><li><p>获取前端发送过来的手机号</p></li><li><p>获取前端发送过来的验证码</p></li><li><p>从session中取出生成的验证码</p></li><li><p>如果能比对成功，证明登录成功</p></li><li><p>根据手机号判断是否为新用户，若是新用户则自动注册</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从session中取出生成的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">    <span class="comment">//比对验证码是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code)) &#123;</span><br><span class="line">        <span class="comment">//如果能比对成功，证明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(phone != <span class="literal">null</span>, User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据手机号判断是否为新用户，若是新用户则自动注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登出移动端"><a href="#登出移动端" class="headerlink" title="登出移动端"></a>登出移动端</h3><blockquote><p>注意要释放session</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">loginout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//释放session</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增地址"><a href="#新增地址" class="headerlink" title="新增地址"></a>新增地址</h2><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    addressBookService.save(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="地址列表显示"><a href="#地址列表显示" class="headerlink" title="地址列表显示"></a>地址列表显示</h2><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>将当前登录用户的所有地址显示为列表展示到移动端页面</p><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><hr><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">    <span class="comment">//设置地址对应的用户id</span></span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(addressBook.getUserId() != <span class="literal">null</span>, AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">    queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line">    List&lt;AddressBook&gt; list = addressBookService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h2><h3 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>先把该用户的所有地址都不设置为默认地址（故把所有该用户的<code>is_default</code>字段都设置为0）</p></li><li><p>设置该用户所选择的地址为默认地址</p></li></ol></blockquote><hr><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PutMapping(&quot;/default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="comment">//将该用户的所有地址都不设置为默认地址</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(userId != <span class="literal">null</span>, AddressBook::getUserId, userId);</span><br><span class="line">        updateWrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        addressBookService.update(updateWrapper);</span><br><span class="line">        <span class="comment">//将选择的该用户的地址设置为默认值</span></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查询用户的默认地址"><a href="#查询用户的默认地址" class="headerlink" title="查询用户的默认地址"></a>查询用户的默认地址</h2><h3 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/default&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改地址（需修改）"><a href="#修改地址（需修改）" class="headerlink" title="修改地址（需修改）"></a>修改地址（需修改）</h2><h3 id="地址的回显功能"><a href="#地址的回显功能" class="headerlink" title="地址的回显功能"></a>地址的回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到该用户地址&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改地址功能"><a href="#修改地址功能" class="headerlink" title="修改地址功能"></a>修改地址功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">    addressBookService.updateById(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h2><h3 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处无过多的逻辑分析，即使是默认地址也可以进行删除。</p></blockquote><hr><h3 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">    addressBookService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端主页展示（菜品、套餐）"><a href="#移动端主页展示（菜品、套餐）" class="headerlink" title="移动端主页展示（菜品、套餐）"></a>移动端主页展示（菜品、套餐）</h2><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a><strong>注意点</strong></h3><blockquote><ol><li><p>菜品，套餐的分类功能在前面已经写过了。移动端展示主页面需要该分类功能和购物车展示功能同时成功才能展示出来。</p></li><li><p>点击对应的菜品分类可查询出该分类下的所有菜品，注意该方法已经在之前新增套餐时的功能2中编写，但是当时只是让<code>DishDto</code>对象中新保存了菜品的名称，没有保存菜品的口味，故需要对该方法进行加强。</p></li><li><p>点击对应的套餐分类可查询出该分类下的所有套餐，需要添加该方法。</p></li></ol></blockquote><hr><h3 id="重新编写查询当前分类下的所有菜品功能"><a href="#重新编写查询当前分类下的所有菜品功能" class="headerlink" title="重新编写查询当前分类下的所有菜品功能"></a>重新编写查询当前分类下的所有菜品功能</h3><blockquote><p><strong>注意：只是新增了菜品口味的功能，不影响前面使用的功能（仅仅是对功能加强）</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">        <span class="comment">//获得菜品分类的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper1.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">        List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">        dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">        dishDtoList.add(dishDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="编写查询当前分类下的所有套餐功能"><a href="#编写查询当前分类下的所有套餐功能" class="headerlink" title="编写查询当前分类下的所有套餐功能"></a>编写查询当前分类下的所有套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h2><h3 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断添加的是菜品还是套餐</p></li><li><p>如果能查找出来对应的符合该用户且符合该菜品（套餐）这两个条件的购物车对象，则在数量上加一</p></li><li><p>如果查询不出来，则新增该购物车对象，并设置数量为1,且设置创建时间</p></li></ol></blockquote><hr><h3 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断添加的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//添加的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shoppingCartOne != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果存在该对象，则数量加一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">        shoppingCartOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不存在该对象，则新增该购物车对象，并设置数量为1,且设置创建时间</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        shoppingCartOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(shoppingCartOne);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h2><h3 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>根据每个用户的<code>id</code>来查，每个用户只能看到自己的购物车</p></blockquote><hr><h3 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h2><h3 id="需求分析-12"><a href="#需求分析-12" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>注意：仅删除该用户的所有购物车数据</p></blockquote><hr><h3 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删减购物车"><a href="#删减购物车" class="headerlink" title="删减购物车"></a>删减购物车</h2><h3 id="需求分析-13"><a href="#需求分析-13" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断删减的是菜品还是套餐（因为前端发送过来的数据要么为<code>DishId</code>，要么为<code>SetmealId</code>）</p></li><li><p>判断要删减的该对象的数量是否为1</p></li><li><p>若为1，则删除该数据</p></li><li><p>若不为1，则将数量减一</p></li></ol></blockquote><hr><h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断删减的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//删减的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//删减的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">    <span class="comment">//判断数量是否为1或大于1</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//数量为1则删除该该菜品（套餐）信息</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shoppingCartOne.getId();</span><br><span class="line">        shoppingCartService.removeById(id);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//数量不为1则该菜品（套餐）数量减1</span></span><br><span class="line">        shoppingCartOne.setNumber(number - <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删减商品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><h3 id="需求分析-14"><a href="#需求分析-14" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>前提</strong>：点击去支付后</p><ol><li><p>前端页面自动访问查询默认地址功能（前面已写好）</p></li><li><p>前端页面自动访问查询购物车信息功能（前面已写好）</p></li></ol></blockquote><blockquote><p><strong>具体步骤</strong>：</p><ol><li><p>获得当前用户id</p></li><li><p>查询当前用户的购物车数据</p></li><li><p>若购物车为空，则抛出异常</p></li><li><p>查询用户数据</p></li><li><p>查询地址数据</p></li><li><p>封装订单表数据（1条）</p></li><li><p>封装订单明细表数据（多条：原购物车有几条数据这里就有几条）</p></li><li><p>向订单表插入数据，一条数据</p></li><li><p>向订单明细表插入数据，多条数据</p></li><li><p>清空购物车数据</p></li></ol></blockquote><hr><h3 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">//获得当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">    List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">    <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(userId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">            + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">            + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">            + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="用户查看自己的订单"><a href="#用户查看自己的订单" class="headerlink" title="用户查看自己的订单"></a>用户查看自己的订单</h2><h3 id="需求分析-15"><a href="#需求分析-15" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>需将订单明细表中的数据也查询出来，故这里需要使用<code>OrderDto</code></p><p>需注意：在遍历的时候直接使用构造条件来查询导致<code>eq</code>叠加，从而导致后面查询的数据都是null，所有该处选择将方法方法外面进行调用</p></blockquote><hr><h3 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免在遍历的时候直接使用构造条件来查询导致eq叠加，从而导致后面查询的数据都是null</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;OrderDetail&gt; <span class="title function_">getOrderDetailListByOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailService.list(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> orderDetailList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//移动端分页展示订单</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">       Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">       Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.orderByAsc(Orders::getOrderTime);</span><br><span class="line">       queryWrapper.eq(Orders::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       ordersService.page(ordersPage, queryWrapper);</span><br><span class="line"></span><br><span class="line">       List&lt;Orders&gt; records = ordersPage.getRecords();</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;OrdersDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Orders record : records) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">           <span class="comment">//获取订单id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> record.getId();</span><br><span class="line"></span><br><span class="line">           List&lt;OrderDetail&gt; list1 = <span class="built_in">this</span>.getOrderDetailListByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">           BeanUtils.copyProperties(record, ordersDto);</span><br><span class="line">           ordersDto.setOrderDetails(list1);</span><br><span class="line"></span><br><span class="line">           list.add(ordersDto);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ordersDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台按条件查看订单"><a href="#后台按条件查看订单" class="headerlink" title="后台按条件查看订单"></a>后台按条件查看订单</h2><h3 id="需求分析-16"><a href="#需求分析-16" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处需要添加三个条件：</p><ol><li><p>订单号模糊查询</p></li><li><p>大于某时间</p></li><li><p>小于某时间</p></li></ol></blockquote><hr><h3 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(Orders::getOrderTime)</span><br><span class="line">            .like(number != <span class="literal">null</span>, Orders::getId, number)</span><br><span class="line">            .ge(beginTime != <span class="literal">null</span>, Orders::getOrderTime, beginTime)</span><br><span class="line">            .le(endTime != <span class="literal">null</span>, Orders::getOrderTime, endTime);</span><br><span class="line"></span><br><span class="line">    ordersService.page(ordersPage, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台修改订单状态"><a href="#后台修改订单状态" class="headerlink" title="后台修改订单状态"></a>后台修改订单状态</h2><h3 id="需求分析-17"><a href="#需求分析-17" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>前端发送过来的数据包含需改变的<code>status</code>和订单<code>id</code>，故可直接更改订单状态。</p></blockquote><hr><h3 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    ordersService.updateById(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改订单状态成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端点击套餐图片查看套餐具体菜品"><a href="#移动端点击套餐图片查看套餐具体菜品" class="headerlink" title="移动端点击套餐图片查看套餐具体菜品"></a>移动端点击套餐图片查看套餐具体菜品</h2><h3 id="需求分析-18"><a href="#需求分析-18" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>通过前端传入的套餐id在套餐菜品关系表中查询出该套餐下的所有菜品</p></li><li><p>将dish对象拷贝给<code>dishDto</code>对象</p></li><li><p>将存<code>dishDto</code>对象的集合传回前端</p></li></ol></blockquote><hr><h3 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">dish</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(SetmealDish::getSetmealId, id);</span><br><span class="line">        <span class="comment">//获取该套餐下的所有菜品</span></span><br><span class="line">        List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishDtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">dishId</span> <span class="operator">=</span> setmealDish.getDishId();</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line">            BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">            dishDtos.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="再来一单功能"><a href="#再来一单功能" class="headerlink" title="再来一单功能"></a>再来一单功能</h2><h3 id="需求分析-19"><a href="#需求分析-19" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>只有订单表中的status为4 的时候才能有再来一单的功能</p><p>点击再来一单按钮前端页面会直接跳转到购物车页面</p><p>根据<code>userId</code>，删除该用户此时所剩的购物车数据（清空购物车）</p><p>需要将原来购物车数据复制到购物车中</p></blockquote><hr><h3 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/again&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">again</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">    <span class="comment">//前端页面会直接跳转到购物车页面</span></span><br><span class="line">    <span class="comment">//故需要先将购物车中数据清除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据userId，删除该用户此时所剩的购物车数据(清空购物车)</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要将原来购物车数据复制到购物车中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> map.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper1.eq(OrderDetail::getOrderId,id);</span><br><span class="line">    List&lt;OrderDetail&gt; list = orderDetailService.list(queryWrapper1);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ShoppingCart&gt; shoppingCartsLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (OrderDetail orderDetail : list) &#123;</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        shoppingCart.setImage(orderDetail.getImage());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> orderDetail.getDishId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> orderDetail.getSetmealId();</span><br><span class="line">        <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是菜品那就添加菜品的查询条件</span></span><br><span class="line">            shoppingCart.setDishId(dishId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">            shoppingCart.setSetmealId(setmealId);</span><br><span class="line">        &#125;</span><br><span class="line">        shoppingCart.setName(orderDetail.getName());</span><br><span class="line">        shoppingCart.setDishFlavor(orderDetail.getDishFlavor());</span><br><span class="line">        shoppingCart.setNumber(orderDetail.getNumber());</span><br><span class="line">        shoppingCart.setAmount(orderDetail.getAmount());</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        shoppingCartsLists.add(shoppingCart);</span><br><span class="line">    &#125;</span><br><span class="line">    shoppingCartService.saveBatch(shoppingCartsLists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><blockquote><p>该项目后续可用<code>redis</code>，<code>mysql</code>主从复制，<code>nginx</code>等技术优化，还需后续完善…….</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
