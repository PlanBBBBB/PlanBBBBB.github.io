<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL相关面试题</title>
      <link href="/2024/01/08/%E9%9D%A2%E8%AF%95-MySQL%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/01/08/%E9%9D%A2%E8%AF%95-MySQL%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章取自黑马程序员</p><h1 id="MySQL面试题"><a href="#MySQL面试题" class="headerlink" title="MySQL面试题"></a>MySQL面试题</h1><blockquote><p><strong>面试官：</strong>MySQL中，如何定位慢查询?</p><p><strong>候选人：</strong></p><p>嗯~，我们当时做压测的时候有的接口非常的慢，接口的响应时间超过了2秒以上，因为我们当时的系统部署了运维的监控系统Skywalking ，在展示的报表中可以看到是哪一个接口比较慢，并且可以分析这个接口哪部分比较慢，这里可以看到SQL的具体的执行时间，所以可以定位是哪个sql出了问题</p><p>如果，项目中没有这种运维的监控系统，其实在MySQL中也提供了慢日志查询的功能，可以在MySQL的系统配置文件中开启这个慢日志的功能，并且也可以设置SQL执行超过多少时间来记录到一个日志文件中，我记得上一个项目配置的是2秒，只要SQL执行的时间超过了2秒就会记录到日志文件中，我们就可以在日志文件找到执行比较慢的SQL了。</p><p><strong>面试官：</strong>那这个SQL语句执行很慢, 如何分析呢？</p><p><strong>候选人：</strong>如果一条sql执行很慢的话，我们通常会使用mysql自动的执行计划explain来去查看这条sql的执行情况，比如在这里面可以通过key和key_len检查是否命中了索引，如果本身已经添加了索引，也可以判断索引是否有失效的情况，第二个，可以通过type字段查看sql是否有进一步的优化空间，是否存在全索引扫描或全盘扫描，第三个可以通过extra建议来判断，是否出现了回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复</p><p><strong>面试官：</strong>了解过索引吗？（什么是索引）</p><p><strong>候选人：</strong>嗯，索引在项目中还是比较常见的，它是帮助MySQL高效获取数据的数据结构，主要是用来提高数据检索的效率，降低数据库的IO成本，同时通过索引列对数据进行排序，降低数据排序的成本，也能降低了CPU的消耗</p><p><strong>面试官：</strong>索引的底层数据结构了解过嘛 ? </p><p><strong>候选人：</strong>MySQL的默认的存储引擎InnoDB采用的B+树的数据结构来存储索引，选择B+树的主要的原因是：第一阶数更多，路径更短，第二个磁盘读写代价B+树更低，非叶子节点只存储指针，叶子阶段存储数据，第三是B+树便于扫库和区间查询，叶子节点是一个双向链表</p><p><strong>面试官：</strong>B树和B+树的区别是什么呢？</p><p><strong>候选人</strong>：第一：在B树中，非叶子节点和叶子节点都会存放数据，而B+树的所有的数据都会出现在叶子节点，在查询的时候，B+树查找效率更加稳定</p><p>第二：在进行范围查询的时候，B+树效率更高，因为B+树都在叶子节点存储，并且叶子节点是一个双向链表</p><p><strong>面试官：</strong>什么是聚簇索引什么是非聚簇索引 ?</p><p><strong>候选人：</strong></p><p>好的~，聚簇索引主要是指数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个，一般情况下主键在作为聚簇索引的</p><p>非聚簇索引值的是数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个，一般我们自己定义的索引都是非聚簇索引</p><p><strong>面试官：</strong>知道什么是回表查询嘛 ?</p><p><strong>候选人：</strong>嗯，其实跟刚才介绍的聚簇索引和非聚簇索引是有关系的，回表的意思就是通过二级索引找到对应的主键值，然后再通过主键值找到聚集索引中所对应的整行数据，这个过程就是回表</p><p>【<strong>备注</strong>：如果面试官直接问回表，则需要先介绍聚簇索引和非聚簇索引】</p><p><strong>面试官：</strong>知道什么叫覆盖索引嘛 ? </p><p><strong>候选人：</strong>嗯~，清楚的</p><p>覆盖索引是指select查询语句使用了索引，在返回的列，必须在索引中全部能够找到，如果我们使用id查询，它会直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</p><p>如果按照二级索引查询数据的时候，返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select *，尽量在返回的列中都包含添加索引的字段</p><p><strong>面试官：</strong>MYSQL超大分页怎么处理 ?</p><p><strong>候选人：</strong>嗯，超大分页一般都是在数据量比较大时，我们使用了limit分页查询，并且需要对数据进行排序，这个时候效率就很低，我们可以采用覆盖索引和子查询来解决</p><p>先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了</p><p>因为查询id的时候，走的覆盖索引，所以效率可以提升很多</p><p><strong>面试官：</strong>索引创建原则有哪些？</p><p><strong>候选人：</strong>嗯，这个情况有很多，不过都有一个大前提，就是表中的数据要超过10万以上，我们才会创建索引，并且添加索引的字段是查询比较频繁的字段，一般也是像作为查询条件，排序字段或分组的字段这些。</p><p>还有就是，我们通常创建索引的时候都是使用复合索引来创建，一条sql的返回值，尽量使用覆盖索引，如果字段的区分度不高的话，我们也会把它放在组合索引后面的字段。</p><p>如果某一个字段的内容较长，我们会考虑使用前缀索引来使用，当然并不是所有的字段都要添加索引，这个索引的数量也要控制，因为添加索引也会导致新增改的速度变慢。</p><p><strong>面试官：</strong>什么情况下索引会失效 ?</p><p><strong>候选人：</strong>嗯，这个情况比较多，我说一些自己的经验，以前遇到过的</p><p>比如，索引在使用的时候没有遵循最左匹配法则，第二个是，模糊查询，如果%号在前面也会导致索引失效。如果在添加索引的字段上进行了运算操作或者类型转换也都会导致索引失效。</p><p>我们之前还遇到过一个就是，如果使用了复合索引，中间使用了范围查询，右边的条件索引也会失效</p><p>所以，通常情况下，想要判断出这条sql是否有索引失效的情况，可以使用explain执行计划来分析</p><p><strong>面试官：</strong>sql的优化的经验</p><p><strong>候选人：</strong>嗯，这个在项目还是挺常见的，当然如果直说sql优化的话，我们会从这几方面考虑，比如</p><p>建表的时候、使用索引、sql语句的编写、主从复制，读写分离，还有一个是如果量比较大的话，可以考虑分库分表</p><p><strong>面试官：</strong>创建表的时候，你们是如何优化的呢？</p><p><strong>候选人：</strong>这个我们主要参考的阿里出的那个开发手册《嵩山版》，就比如，在定义字段的时候需要结合字段的内容来选择合适的类型，如果是数值的话，像tinyint、int 、bigint这些类型，要根据实际情况选择。如果是字符串类型，也是结合存储的内容来选择char和varchar或者text类型</p><p><strong>面试官：</strong>那在使用索引的时候，是如何优化呢？</p><p><strong>候选人：</strong>【参考索引创建原则    进行描述】</p><p><strong>面试官：</strong>你平时对sql语句做了哪些优化呢？</p><p><strong>候选人：</strong>嗯，这个也有很多，比如SELECT语句务必指明字段名称，不要直接使用select * ，还有就是要注意SQL语句避免造成索引失效的写法；如果是聚合查询，尽量用union all代替union ，union会多一次过滤，效率比较低；如果是表关联的话，尽量使用innerjoin ，不要使用用left join right join，如必须使用 一定要以小表为驱动</p><p><strong>面试官：</strong>事务的特性是什么？可以详细说一下吗？</p><p><strong>候选人：</strong>嗯，这个比较清楚，ACID，分别指的是：原子性、一致性、隔离性、持久性；我举个例子：</p><p>A向B转账500，转账成功，A扣除500元，B增加500元，原子操作体现在要么都成功，要么都失败</p><p>在转账的过程中，数据要一致，A扣除了500，B必须增加500</p><p>在转账的过程中，隔离性体现在A像B转账，不能受其他事务干扰</p><p>在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）</p><p><strong>面试官</strong>：并发事务带来哪些问题？</p><p><strong>候选人</strong>：</p><p>我们在项目开发中，多个事务并发进行是经常发生的，并发也是必然的，有可能导致一些问题</p><p>第一是脏读， 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p><p>第二是不可重复读：比如在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p><p>第三是幻读（Phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><p><strong>面试官</strong>：怎么解决这些问题呢？MySQL的默认隔离级别是？</p><p><strong>候选人</strong>：解决方案是对事务进行隔离</p><p>MySQL支持四种隔离级别，分别有：</p><p>第一个是，未提交读（read uncommitted）它解决不了刚才提出的所有问题，一般项目中也不用这个。第二个是读已提交（read committed）它能解决脏读的问题的，但是解决不了不可重复读和幻读。第三个是可重复读（repeatable read）它能解决脏读和不可重复读，但是解决不了幻读，这个也是mysql默认的隔离级别。第四个是串行化（serializable）它可以解决刚才提出来的所有问题，但是由于让是事务串行执行的，性能比较低。所以，我们一般使用的都是mysql默认的隔离级别:可重复读</p><p><strong>面试官</strong>：undo log和redo log的区别</p><p><strong>候选人</strong>：好的，其中redo log日志记录的是数据页的物理变化，服务宕机可用来同步数据，而undo log 不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo log日志文件中新增一条delete语句，如果发生回滚就执行逆操作；</p><p>redo log保证了事务的持久性，undo log保证了事务的原子性和一致性</p><p><strong>面试官</strong>：事务中的隔离性是如何保证的呢？(你解释一下MVCC)</p><p><strong>候选人</strong>：事务的隔离性是由锁和mvcc实现的。</p><p>其中mvcc的意思是多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是undo log日志，第三个是readView读视图</p><p>隐藏字段是指：在mysql中给每个表都设置了隐藏字段，有一个是trx_id(事务id)，记录每一次操作的事务id，是自增的；另一个字段是roll_pointer(回滚指针)，指向上一个版本的事务版本记录地址</p><p>undo log主要的作用是记录回滚日志，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表</p><p>readView解决的是一个事务查询选择版本的问题，在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是rc隔离级别，每一次执行快照读时生成ReadView，如果是rr隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用</p><p><strong>面试官</strong>：MySQL主从同步原理 </p><p><strong>候选人</strong>：MySQL主从复制的核心就是二进制日志(DDL（数据定义语言）语句和 DML（数据操纵语言）语句)，它的步骤是这样的：</p><p>第一：主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</p><p>第二：从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</p><p>第三：从库重做中继日志中的事件，将改变反映它自己的数据</p><p><strong>面试官</strong>：你们项目用过MySQL的分库分表吗？</p><p><strong>候选人</strong>：</p><p>嗯，因为我们都是微服务开发，每个微服务对应了一个数据库，是根据业务进行拆分的，这个其实就是垂直拆分。</p><p><strong>面试官</strong>：那你之前使用过水平分库吗？</p><p><strong>候选人</strong>：</p><p>嗯，这个是使用过的，我们当时的业务是(xxx)，一开始，我们也是单库，后来这个业务逐渐发展，业务量上来的很迅速，其中(xx)表已经存放了超过1000万的数据，我们做了很多优化也不好使，性能依然很慢，所以当时就使用了水平分库。</p><p>我们一开始先做了3台服务器对应了3个数据库，由于库多了，需要分片，我们当时采用的mycat来作为数据库的中间件。数据都是按照id（自增）取模的方式来存取的。</p><p>当然一开始的时候，那些旧数据，我们做了一些清洗的工作，我们也是按照id取模规则分别存储到了各个数据库中，好处就是可以让各个数据库分摊存储和读取的压力，解决了我们当时性能的问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis相关面试题</title>
      <link href="/2024/01/08/%E9%9D%A2%E8%AF%95-Redis%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/01/08/%E9%9D%A2%E8%AF%95-Redis%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章取自黑马程序员</p><h1 id="Redis相关面试题"><a href="#Redis相关面试题" class="headerlink" title="Redis相关面试题"></a>Redis相关面试题</h1><blockquote><p><strong>面试官</strong>：什么是缓存穿透 ? 怎么解决 ?</p><p><strong>候选人</strong>：</p><p>嗯~~，我想一下</p><p>缓存穿透是指查询一个一定<strong>不存在</strong>的数据，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到 DB 去查询，可能导致 DB 挂掉。这种情况大概率是遭到了攻击。</p><p>解决方案的话，我们通常都会用布隆过滤器来解决它</p><p><strong>面试官</strong>：好的，你能介绍一下布隆过滤器吗？</p><p><strong>候选人</strong>：</p><p>嗯，是这样~</p><p>布隆过滤器主要是用于检索一个元素是否在一个集合中。我们当时使用的是redisson实现的布隆过滤器。</p><p>它的底层主要是先去初始化一个比较大数组，里面存放的二进制0或1。在一开始都是0，当一个key来了之后经过3次hash计算，模于数组长度找到数据的下标然后把数组中原来的0改为1，这样的话，三个数组的位置就能标明一个key的存在。查找的过程也是一样的。</p><p>当然是有缺点的，布隆过滤器有可能会产生一定的误判，我们一般可以设置这个误判率，大概不会超过5%，其实这个误判是必然存在的，要不就得增加数组的长度，其实已经算是很划分了，5%以内的误判率一般的项目也能接受，不至于高并发下压倒数据库。</p><p><strong>面试官</strong>：什么是缓存击穿 ? 怎么解决 ?</p><p><strong>候选人</strong>：</p><p>嗯！！</p><p>缓存击穿的意思是对于设置了过期时间的key，缓存在某个时间点过期的时候，恰好这时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把 DB 压垮。</p><p>解决方案有两种方式：</p><p>第一可以使用互斥锁：当缓存失效时，不立即去load db，先使用如 Redis 的 setnx 去设置一个互斥锁，当操作成功返回时再进行 load db的操作并回设缓存，否则重试get缓存的方法</p><p>第二种方案可以设置当前key逻辑过期，大概是思路如下：</p><p>①：在设置key的时候，设置一个过期时间字段一块存入缓存中，不给当前key设置过期时间</p><p>②：当查询的时候，从redis取出数据后判断时间是否过期</p><p>③：如果过期则开通另外一个线程进行数据同步，当前线程正常返回数据，这个数据不是最新</p><p>当然两种方案各有利弊：</p><p>如果选择数据的强一致性，建议使用分布式锁的方案，性能上可能没那么高，锁需要等，也有可能产生死锁的问题</p><p>如果选择key的逻辑删除，则优先考虑的高可用性，性能比较高，但是数据同步这块做不到强一致。</p><p><strong>面试官</strong>：什么是缓存雪崩 ? 怎么解决 ?</p><p><strong>候选人</strong>：</p><p>嗯！！</p><p>缓存雪崩意思是设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB 瞬时压力过重雪崩。与缓存击穿的区别：雪崩是很多key，击穿是某一个key缓存。</p><p>解决方案主要是可以将缓存失效时间分散开，比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><p><strong>面试官</strong>：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）</p><p><strong>候选人</strong>：嗯！就说我最近做的这个项目，里面有xxxx（<strong>根据自己的简历上写</strong>）的功能，需要让数据库与redis高度保持一致，因为要求时效性比较高，我们当时采用的读写锁保证的强一致性。</p><p>我们采用的是redisson实现的读写锁，在读的时候添加共享锁，可以保证读读不互斥，读写互斥。当我们更新数据的时候，添加排他锁，它是读写，读读都互斥，这样就能保证在写数据的同时是不会让其他线程读数据的，避免了脏数据。这里面需要注意的是读方法和写方法上需要使用同一把锁才行。</p><p><strong>面试官</strong>：那这个排他锁是如何保证读写、读读互斥的呢？</p><p><strong>候选人</strong>：其实排他锁底层使用也是setnx，保证了同时只能有一个线程操作锁住的方法</p><p><strong>面试官</strong>：你听说过延时双删吗？为什么不用它呢？</p><p><strong>候选人</strong>：延迟双删，如果是写操作，我们先把缓存中的数据删除，然后更新数据库，最后再延时删除缓存中的数据，其中这个延时多久不太好确定，在延时的过程中可能会出现脏数据，并不能保证强一致性，所以没有采用它。</p><p><strong>面试官</strong>：redis做为缓存，mysql的数据如何与redis进行同步呢？（双写一致性）</p><p><strong>候选人</strong>：嗯！就说我最近做的这个项目，里面有xxxx（<strong>根据自己的简历上写</strong>）的功能，数据同步可以有一定的延时（符合大部分业务）</p><p>我们当时采用的阿里的canal组件实现数据同步：不需要更改业务代码，部署一个canal服务。canal服务把自己伪装成mysql的一个从节点，当mysql数据更新以后，canal会读取binlog数据，然后在通过canal的客户端获取到数据，更新缓存即可。</p><p><strong>面试官</strong>：redis做为缓存，数据的持久化是怎么做的？</p><p><strong>候选人</strong>：在Redis中提供了两种数据持久化的方式：1、RDB  2、AOF</p><p><strong>面试官</strong>：这两种持久化方式有什么区别呢？</p><p><strong>候选人</strong>：RDB是一个快照文件，它是把redis内存存储的数据写到磁盘上，当redis实例宕机恢复数据的时候，方便从RDB的快照文件中恢复数据。</p><p>AOF的含义是追加文件，当redis操作写命令的时候，都会存储这个文件中，当redis实例宕机恢复数据的时候，会从这个文件中再次执行一遍命令来恢复数据</p><p><strong>面试官</strong>：这两种方式，哪种恢复的比较快呢？</p><p><strong>候选人</strong>：RDB因为是二进制文件，在保存的时候体积也是比较小的，它恢复的比较快，但是它有可能会丢数据，我们通常在项目中也会使用AOF来恢复数据，虽然AOF恢复的速度慢一些，但是它丢数据的风险要小很多，在AOF文件中可以设置刷盘策略，我们当时设置的就是每秒批量写入一次命令</p><p><strong>面试官</strong>：Redis的数据过期策略有哪些 ? </p><p><strong>候选人</strong>：</p><p>嗯~，在redis中提供了两种数据过期删除策略</p><p>第一种是惰性删除，在设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉它，反之返回该key。</p><p>第二种是 定期删除，就是说每隔一段时间，我们就对一些key进行检查，删除里面过期的key</p><p>定期清理的两种模式：</p><ul><li>SLOW模式是定时任务，执行频率默认为10hz，每次不超过25ms，以通过修改配置文件redis.conf 的 <strong>hz</strong> 选项来调整这个次数</li><li>FAST模式执行频率不固定，每次事件循环会尝试执行，但两次间隔不低于2ms，每次耗时不超过1ms</li></ul><p>Redis的过期删除策略：<strong>惰性删除 + 定期删除</strong>两种策略进行配合使用。</p><p><strong>面试官</strong>：Redis的数据淘汰策略有哪些 ? </p><p><strong>候选人</strong>：</p><p>嗯，这个在redis中提供了很多种，默认是noeviction，不删除任何数据，内部不足直接报错</p><p>是可以在redis的配置文件中进行设置的，里面有两个非常重要的概念，一个是LRU，另外一个是LFU</p><p>LRU的意思就是最少最近使用，用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。</p><p>LFU的意思是最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高</p><p>我们在项目设置的allkeys-lru，挑选最近最少使用的数据淘汰，把一些经常访问的key留在redis中</p><p><strong>面试官</strong>：数据库有1000万数据 ,Redis只能缓存20w数据, 如何保证Redis中的数据都是热点数据 ?</p><p><strong>候选人</strong>：</p><p>嗯，我想一下~~</p><p>可以使用 allkeys-lru （挑选最近最少使用的数据淘汰）淘汰策略，那留下来的都是经常访问的热点数据</p><p><strong>面试官</strong>：Redis的内存用完了会发生什么？</p><p><strong>候选人</strong>：</p><p>嗯~，这个要看redis的数据淘汰策略是什么，如果是默认的配置，redis内存用完以后则直接报错。我们当时设置的 allkeys-lru 策略。把最近最常访问的数据留在缓存中。</p><p><strong>面试官</strong>：Redis分布式锁如何实现 ? </p><p><strong>候选人</strong>：嗯，在redis中提供了一个命令setnx(SET if not exists)</p><p>由于redis的单线程的，用了命令之后，只能有一个客户端对某一个key设置值，在没有过期或删除key的时候是其他客户端是不能设置这个key的</p><p><strong>面试官</strong>：好的，那你如何控制Redis实现分布式锁有效时长呢？</p><p><strong>候选人</strong>：嗯，的确，redis的setnx指令不好控制这个问题，我们当时采用的redis的一个框架redisson实现的。</p><p>在redisson中需要手动加锁，并且可以控制锁的失效时间和等待时间，当锁住的一个业务还没有执行完成的时候，在redisson中引入了一个看门狗机制，就是说每隔一段时间就检查当前业务是否还持有锁，如果持有就增加加锁的持有时间，当业务执行完成之后需要使用释放锁就可以了</p><p>还有一个好处就是，在高并发下，一个业务有可能会执行很快，先客户1持有锁的时候，客户2来了以后并不会马上拒绝，它会自旋不断尝试获取锁，如果客户1释放之后，客户2就可以马上持有锁，性能也得到了提升。</p><p><strong>面试官</strong>：好的，redisson实现的分布式锁是可重入的吗？</p><p><strong>候选人</strong>：嗯，是可以重入的。这样做是为了避免死锁的产生。这个重入其实在内部就是判断是否是当前线程持有的锁，如果是当前线程持有的锁就会计数，如果释放锁就会在计算上减一。在存储数据的时候采用的hash结构，大key可以按照自己的业务进行定制，其中小key是当前线程的唯一标识，value是当前线程重入的次数</p><p><strong>面试官</strong>：redisson实现的分布式锁能解决主从一致性的问题吗</p><p><strong>候选人</strong>：这个是不能的，比如，当线程1加锁成功后，master节点数据会异步复制到slave节点，此时当前持有Redis锁的master节点宕机，slave节点被提升为新的master节点，假如现在来了一个线程2，再次加锁，会在新的master节点上加锁成功，这个时候就会出现两个节点同时持有一把锁的问题。</p><p>我们可以利用redisson提供的红锁来解决这个问题，它的主要作用是，不能只在一个redis实例上创建锁，应该是在多个redis实例上创建锁，并且要求在大多数redis节点上都成功创建锁，红锁中要求是redis的节点数量要过半。这样就能避免线程1加锁成功后master节点宕机导致线程2成功加锁到新的master节点上的问题了。</p><p>但是，如果使用了红锁，因为需要同时在多个节点上都添加锁，性能就变的很低了，并且运维维护成本也非常高，所以，我们一般在项目中也不会直接使用红锁，并且官方也暂时废弃了这个红锁</p><p><strong>面试官</strong>：好的，如果业务非要保证数据的强一致性，这个该怎么解决呢？</p><p><strong>候选人：</strong>嗯~，redis本身就是支持高可用的，做到强一致性，就非常影响性能，所以，如果有强一致性要求高的业务，建议使用zookeeper实现的分布式锁，它是可以保证强一致性的。</p><p><strong>面试官</strong>：Redis集群有哪些方案, 知道嘛 ? </p><p><strong>候选人</strong>：嗯~~，在Redis中提供的集群方案总共有三种：主从复制、哨兵模式、Redis分片集群</p><p><strong>面试官</strong>：那你来介绍一下主从同步</p><p><strong>候选人</strong>：嗯，是这样的，单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，可以搭建主从集群，实现读写分离。一般都是一主多从，主节点负责写数据，从节点负责读数据，主节点写入数据之后，需要把数据同步到从节点中</p><p><strong>面试官</strong>：能说一下，主从同步数据的流程</p><p><strong>候选人</strong>：嗯~~，好！主从同步分为了两个阶段，一个是全量同步，一个是增量同步</p><p>全量同步是指从节点第一次与主节点建立连接的时候使用全量同步，流程是这样的：</p><p>第一：从节点请求主节点同步数据，其中从节点会携带自己的replication id和offset偏移量。</p><p>第二：主节点判断是否是第一次请求，主要判断的依据就是，主节点与从节点是否是同一个replication id，如果不是，就说明是第一次同步，那主节点就会把自己的replication id和offset发送给从节点，让从节点与主节点的信息保持一致。</p><p>第三：在同时主节点会执行bgsave，生成rdb文件后，发送给从节点去执行，从节点先把自己的数据清空，然后执行主节点发送过来的rdb文件，这样就保持了一致</p><p>当然，如果在rdb生成执行期间，依然有请求到了主节点，而主节点会以命令的方式记录到缓冲区，缓冲区是一个日志文件，最后把这个日志文件发送给从节点，这样就能保证主节点与从节点完全一致了，后期再同步数据的时候，都是依赖于这个日志文件，这个就是全量同步</p><p>增量同步指的是，当从节点服务重启之后，数据就不一致了，所以这个时候，从节点会请求主节点同步数据，主节点还是判断不是第一次请求，不是第一次就获取从节点的offset值，然后主节点从命令日志中获取offset值之后的数据，发送给从节点进行数据同步</p><p><strong>面试官</strong>：怎么保证Redis的高并发高可用</p><p><strong>候选人</strong>：首先可以搭建主从集群，再加上使用redis中的哨兵模式，哨兵模式可以实现主从集群的自动故障恢复，里面就包含了对主从服务的监控、自动故障恢复、通知；如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主；同时Sentinel也充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端，所以一般项目都会采用哨兵的模式来保证redis的高并发高可用</p><p><strong>面试官</strong>：你们使用redis是单点还是集群，哪种集群</p><p><strong>候选人</strong>：嗯！，我们当时使用的是主从（1主1从）加哨兵。一般单节点不超过10G内存，如果Redis内存不足则可以给不同服务分配独立的Redis主从节点。尽量不做分片集群。因为集群维护起来比较麻烦，并且集群之间的心跳检测和数据通信会消耗大量的网络带宽，也没有办法使用lua脚本和事务</p><p><strong>面试官</strong>：redis集群脑裂，该怎么解决呢？</p><p><strong>候选人</strong>：嗯！ 这个在项目很少见，不过脑裂的问题是这样的，我们现在用的是redis的哨兵模式集群的</p><p>有的时候由于网络等原因可能会出现脑裂的情况，就是说，由于redis master节点和redis salve节点和sentinel处于不同的网络分区，使得sentinel没有能够心跳感知到master，所以通过选举的方式提升了一个salve为master，这样就存在了两个master，就像大脑分裂了一样，这样会导致客户端还在old master那里写入数据，新节点无法同步数据，当网络恢复后，sentinel会将old master降为salve，这时再从新master同步数据，这会导致old master中的大量数据丢失。</p><p>关于解决的话，我记得在redis的配置中可以设置：第一可以设置最少的salve节点个数，比如设置至少要有一个从节点才能同步数据，第二个可以设置主从数据复制和同步的延迟时间，达不到要求就拒绝请求，就可以避免大量的数据丢失</p><p><strong>面试官</strong>：redis的分片集群有什么作用</p><p><strong>候选人</strong>：分片集群主要解决的是，海量数据存储的问题，集群中有多个master，每个master保存不同数据，并且还可以给每个master设置多个slave节点，就可以继续增大集群的高并发能力。同时每个master之间通过ping监测彼此健康状态，就类似于哨兵模式了。当客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p><p><strong>面试官</strong>：Redis分片集群中数据是怎么存储和读取的？</p><p><strong>候选人</strong>：</p><p>嗯~，在redis集群中是这样的</p><p>Redis 集群引入了哈希槽的概念，有 16384 个哈希槽，集群中每个主节点绑定了一定范围的哈希槽范围， key通过 CRC16 校验后对 16384 取模来决定放置哪个槽，通过槽找到对应的节点进行存储。</p><p>取值的逻辑是一样的</p><p><strong>面试官</strong>：Redis是单线程的，但是为什么还那么快？</p><p><strong>候选人</strong>：</p><p>嗯，这个有几个原因吧~~~</p><p>1、完全基于内存的，C语言编写</p><p>2、采用单线程，避免不必要的上下文切换可竞争条件</p><p>3、使用多路I&#x2F;O复用模型，非阻塞IO</p><p>例如：bgsave 和 bgrewriteaof  都是在<strong>后台</strong>执行操作，不影响主线程的正常使用，不会产生阻塞</p><p><strong>面试官</strong>：能解释一下I&#x2F;O多路复用模型？</p><p><strong>候选人</strong>：嗯~~，I&#x2F;O多路复用是指利用单个线程来同时监听多个Socket ，并在某个Socket可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。目前的I&#x2F;O多路复用都是采用的epoll模式实现，它会在通知用户进程Socket就绪的同时，把已就绪的Socket写入用户空间，不需要挨个遍历Socket来判断是否就绪，提升了性能。</p><p>其中Redis的网络模型就是使用I&#x2F;O多路复用结合事件的处理器来应对多个Socket请求，比如，提供了连接应答处理器、命令回复处理器，命令请求处理器；</p><p>在Redis6.0之后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，将命令的转换使用了多线程，增加命令转换速度，在命令执行的时候，依然是单线程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合相关面试题</title>
      <link href="/2024/01/08/%E9%9D%A2%E8%AF%95-Java%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/01/08/%E9%9D%A2%E8%AF%95-Java%E9%9B%86%E5%90%88%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章取自黑马程序员</p><h1 id="Java集合相关面试题"><a href="#Java集合相关面试题" class="headerlink" title="Java集合相关面试题"></a>Java集合相关面试题</h1><h2 id="真实面试还原"><a href="#真实面试还原" class="headerlink" title="真实面试还原"></a>真实面试还原</h2><h3 id="Java常见的集合类"><a href="#Java常见的集合类" class="headerlink" title="Java常见的集合类"></a>Java常见的集合类</h3><p><mark><strong>面试官</strong></mark>：说一说Java提供的常见集合？（画一下集合结构图）</p><p><strong>候选人</strong>：</p><p>嗯~~，好的。</p><p>在java中提供了量大类的集合框架，主要分为两类：</p><p>第一个是Collection  属于单列集合，第二个是Map  属于双列集合</p><ul><li>在Collection中有两个子接口List和Set。在我们平常开发的过程中用的比较多像list接口中的实现类ArrarList和LinkedList。  在Set接口中有实现类HashSet和TreeSet。</li><li>在map接口中有很多的实现类，平时比较常见的是HashMap、TreeMap，还有一个线程安全的map:ConcurrentHashMap</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><mark><strong>面试官</strong></mark>：ArrayList底层是如何实现的？</p><p><strong>候选人</strong>：</p><p>嗯~，我阅读过arraylist的源码，我主要说一下add方法吧</p><p>第一：确保数组已使用长度（size）加1之后足够存下下一个数据 </p><p>第二：计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）</p><p>第三：确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。 </p><p>第四：返回添加成功布尔值。 </p><p><mark><strong>面试官</strong></mark>：ArrayList list&#x3D;new ArrayList(10)中的list扩容几次</p><p><strong>候选人</strong>：</p><p>​是new了一个ArrarList并且给了一个构造参数10，对吧？(问题一定要问清楚再答)</p><p><mark><strong>面试官</strong></mark>：是的</p><p><strong>候选人</strong>：</p><p>​    好的，在ArrayList的源码中提供了一个带参数的构造方法，这个参数就是指定的集合初始长度，所以给了一个10的参数，就是指定了集合的初始长度是10，这里面并没有扩容。</p><hr><p><mark><strong>面试官</strong></mark>：如何实现数组和List之间的转换</p><p><strong>候选人</strong>：</p><p>​嗯，这个在我们平时开发很常见</p><p>​    数组转list，可以使用jdk自动的一个工具类Arrars，里面有一个asList方法可以转换为数组</p><p>​    List 转数组，可以直接调用list中的toArray方法，需要给一个参数，指定数组的类型，需要指定数组的长度。</p><p><mark><strong>面试官</strong></mark>：用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗</p><p><strong>候选人</strong>：</p><p>Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址</p><p>list用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响</p><hr><p><mark><strong>面试官</strong></mark>：ArrayList 和 LinkedList 的区别是什么？</p><p><strong>候选人</strong>：</p><p>嗯，它们两个主要是底层使用的数据结构不一样，ArrayList 是动态数组，LinkedList 是双向链表，这也导致了它们很多不同的特点。</p><p>1，从操作数据效率来说</p><p>ArrayList按照下标查询的时间复杂度O(1)【内存是连续的，根据寻址公式】， LinkedList不支持下标查询</p><p>查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)</p><p>新增和删除</p><ul><li>ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)</li><li>LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)</li></ul><p>2，从内存空间占用来说</p><p>ArrayList底层是数组，内存连续，节省内存</p><p>LinkedList 是双向链表需要存储数据，和两个指针，更占用内存</p><p>3，从线程安全来说，ArrayList和LinkedList都不是线程安全的</p><p><mark><strong>面试官</strong></mark>：嗯，好的，刚才你说了ArrayList 和 LinkedList 不是线程安全的，你们在项目中是如何解决这个的线程安全问题的？</p><p><strong>候选人</strong>：</p><p>嗯，是这样的，主要有两种解决方案：</p><p>第一：我们使用这个集合，优先在方法内使用，定义为局部变量，这样的话，就不会出现线程安全问题。</p><p>第二：如果非要在成员变量中使用的话，可以使用线程安全的集合来替代</p><p>ArrayList可以通过Collections 的 synchronizedList 方法将 ArrayList 转换成线程安全的容器后再使用。</p><p>LinkedList 换成ConcurrentLinkedQueue来使用</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><mark><strong>面试官</strong></mark>：说一下HashMap的实现原理？</p><p><strong>候选人</strong>：</p><p>​嗯。它主要分为了一下几个部分：</p><p>1，底层使用hash表数据结构，即数组+（链表 | 红黑树）</p><p>2，添加数据时，计算key的值确定元素在数组中的下标</p><p>​key相同则替换</p><p>​不同则存入链表或红黑树中</p><p>3，获取数据通过key的hash计算数组下标获取元素</p><p><mark><strong>面试官</strong></mark>：HashMap的jdk1.7和jdk1.8有什么区别</p><p><strong>候选人</strong>：</p><ul><li><p>JDK1.8之前采用的拉链法，数组+链表</p></li><li><p>JDK1.8之后采用数组+链表+红黑树，链表长度大于8且数组长度大于64则会从链表转化为红黑树</p></li></ul><p><mark><strong>面试官</strong></mark>：好的，你能说下HashMap的put方法的具体流程吗？</p><p><strong>候选人</strong>：</p><p>嗯好的。</p><ol><li><p>判断键值对数组table是否为空或为null，否则执行resize()进行扩容（初始化）</p></li><li><p>根据键值key计算hash值得到数组索引</p></li><li><p>判断table[i]&#x3D;&#x3D;null，条件成立，直接新建节点添加</p></li><li><p>如果table[i]&#x3D;&#x3D;null ,不成立</p><p>4.1 判断table[i]的首个元素是否和key一样，如果相同直接覆盖value</p><p>4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对</p><p>4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value</p></li><li><p>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。</p></li></ol><p><mark><strong>面试官</strong></mark>：好的，刚才你多次介绍了hsahmap的扩容，能讲一讲HashMap的扩容机制吗？</p><p><strong>候选人</strong>：</p><p>好的</p><ul><li><p>在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是达到了扩容阈值（数组长度 * 0.75）</p></li><li><p>每次扩容的时候，都是扩容之前容量的2倍； </p></li><li><p>扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中</p><ul><li>没有hash冲突的节点，则直接使用 e.hash &amp; (newCap - 1) 计算新数组的索引位置</li><li>如果是红黑树，走红黑树的添加</li><li>如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &amp; oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上</li></ul></li></ul><p><mark><strong>面试官</strong></mark>：好的，刚才你说的通过hash计算后找到数组的下标，是如何找到的呢，你了解hashMap的寻址算法吗？</p><p><strong>候选人</strong>：</p><p>这个哈希方法首先计算出key的hashCode值，然后通过这个hash值右移16位后的二进制进行按位<strong>异或运算</strong>得到最后的hash值。</p><p>在putValue的方法中，计算数组下标的时候使用hash值与数组长度取模得到存储数据下标的位置，hashmap为了性能更好，并没有直接采用取模的方式，而是使用了数组长度-1 得到一个值，用这个值按位与运算hash值，最终得到数组的位置。</p><p><mark><strong>面试官</strong></mark>：为何HashMap的数组长度一定是2的次幂？</p><p><strong>候选人</strong>：</p><p>嗯，好的。hashmap这么设计主要有两个原因：</p><p>第一：</p><p>计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模</p><p>第二：</p><p>扩容时重新计算索引效率更高：在进行扩容是会进行判断 hash值按位与运算旧数组长租是否 &#x3D;&#x3D; 0 </p><p>如果等于0，则把元素留在原来位置 ，否则新位置是等于旧位置的下标+旧数组长度</p><p><mark><strong>面试官</strong></mark>：好的，我看你对hashmap了解的挺深入的，你知道hashmap在1.7情况下的多线程死循环问题吗？</p><p><strong>候选人</strong>：</p><p>嗯，知道的。是这样</p><p>jdk7的的数据结构是：数组+链表</p><p>在数组进行扩容的时候，因为链表是<strong>头插法</strong>，在进行数据迁移的过程中，有可能导致死循环</p><p>比如说，现在有两个线程</p><p>线程一：<strong>读取</strong>到当前的hashmap数据，数据中一个链表，在准备扩容时，线程二介入</p><p>线程二也读取hashmap，直接进行扩容。因为是头插法，链表的顺序会进行颠倒过来。比如原来的顺序是AB，扩容后的顺序是BA，线程二执行结束。</p><p>当线程一再继续执行的时候就会出现死循环的问题。</p><p>线程一先将A移入新的链表，再将B插入到链头，由于另外一个线程的原因，B的next指向了A，所以B-A-B,形成循环。</p><p>当然，JDK 8 将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），<strong>尾插法</strong>，就避免了jdk7中死循环的问题。</p><p><mark><strong>面试官</strong></mark>：好的，hashmap是线程安全的吗？</p><p><strong>候选人</strong>：不是线程安全的</p><p><mark><strong>面试官</strong></mark>：那我们想要使用线程安全的map该怎么做呢？</p><p><strong>候选人</strong>：我们可以采用ConcurrentHashMap进行使用，它是一个线程安全的HashMap</p><p><mark><strong>面试官</strong></mark>：那你能聊一下ConcurrentHashMap的原理吗？</p><p><strong>候选人</strong>：好的，请参考《多线程相关面试题》中的ConcurrentHashMap部分的讲解</p><hr><p><mark><strong>面试官</strong></mark>：HashSet与HashMap的区别？</p><p><strong>候选人</strong>：嗯，是这样。</p><p>HashSet底层其实是用HashMap实现存储的, HashSet封装了一系列HashMap的方法. 依靠HashMap来存储元素值,(利用hashMap的key键进行存储), 而value值默认为Object对象. 所以HashSet也不允许出现重复值, 判断标准和HashMap判断标准相同, 两个元素的hashCode相等并且通过equals()方法返回true.</p><p><mark><strong>面试官</strong></mark>：HashTable与HashMap的区别</p><p><strong>候选人</strong>：</p><p>嗯，他们的主要区别是有几个吧</p><p>第一，数据结构不一样，hashtable是数组+链表，hashmap在1.8之后改为了数组+链表+红黑树</p><p>第二，hashtable存储数据的时候都不能为null，而hashmap是可以的</p><p>第三，hash算法不同，hashtable是用本地修饰的hashcode值，而hashmap经常了二次hash</p><p>第四，扩容方式不同，hashtable是当前容量翻倍+1，hashmap是当前容量翻倍</p><p>第五，hashtable是线程安全的，操作数据的时候加了锁synchronized，hashmap不是线程安全的，效率更高一些</p><p>在实际开中不建议使用HashTable，在多线程环境下可以使用ConcurrentHashMap类</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程相关面试题</title>
      <link href="/2024/01/06/%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/01/06/%E9%9D%A2%E8%AF%95-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章取自黑马程序员，仅供学习使用</p><h1 id="Java多线程相关面试题"><a href="#Java多线程相关面试题" class="headerlink" title="Java多线程相关面试题"></a>Java多线程相关面试题</h1><h2 id="1-线程的基础知识"><a href="#1-线程的基础知识" class="headerlink" title="1.线程的基础知识"></a>1.线程的基础知识</h2><h3 id="1-1-线程和进程的区别？"><a href="#1-1-线程和进程的区别？" class="headerlink" title="1.1 线程和进程的区别？"></a>1.1 线程和进程的区别？</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的。</p><p><strong>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20221026105350827.png" alt="image-20221026105350827"></p><p>一个进程之内可以分为一到多个线程。</p><p>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</p><p>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。在 windows 中进程是不活动的，只是作为线程的容器</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20221026105442158.png" alt="image-20221026105442158"></p><p><strong>二者对比</strong></p><ul><li><mark>进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务</mark></li><li><mark>不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间</mark></li><li><mark>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)</mark></li></ul><h3 id="1-2-并行和并发有什么区别？"><a href="#1-2-并行和并发有什么区别？" class="headerlink" title="1.2 并行和并发有什么区别？"></a>1.2 并行和并发有什么区别？</h3><blockquote><p>难易程度：☆</p><p>出现频率：☆</p></blockquote><p>单核CPU</p><ul><li><p>单核CPU下线程实际还是串行执行的</p></li><li><p>操作系统中有一个组件叫做任务调度器，将cpu的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于cpu在线程间（时间片很短）的切换非常快，人类感觉是同时运行的 。</p></li><li><p>总结为一句话就是： 微观串行，宏观并行</p></li></ul><p>一般会将这种线程轮流使用CPU的做法称为并发（concurrent）</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230503203246348.png" alt="image-20230503203246348"></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20221026105607248.png" alt="image-20221026105607248"></p><p>多核CPU</p><p>每个核（core）都可以调度运行线程，这时候线程可以是并行的。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230503203330700.png" alt="image-20230503203330700"></p><p><mark><strong>并发（concurrent）是同一时间应对（dealing with）多件事情的能力</strong></mark></p><p><mark><strong>并行（parallel）是同一时间动手做（doing）多件事情的能力</strong></mark></p><blockquote><p>举例：</p><ul><li><p>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发</p></li><li><p>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一个人用锅时，另一个人就得等待）</p></li><li><p>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</p></li></ul></blockquote><h3 id="1-3-创建线程的四种方式"><a href="#1-3-创建线程的四种方式" class="headerlink" title="1.3 创建线程的四种方式"></a>1.3 创建线程的四种方式</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>参考回答：</p><p>共有四种方式可以创建线程，分别是：继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程</p><p>详细创建方式参考下面代码：</p><p>① <strong>继承Thread类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyThread...run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyThread对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>() ;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用start方法启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>实现runnable接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyRunnable...run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyRunnable对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Thread对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用start方法启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ <strong>实现Callable接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyCallable...call...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyCallable对象</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建F</span></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;String&gt;(mc) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Thread对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft) ;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用start方法启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用ft的get方法获取执行结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> ft.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ <strong>线程池创建线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExecutors</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyRunnable...run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        threadPool.submit(<span class="keyword">new</span> <span class="title class_">MyExecutors</span>()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-runnable-和-callable-有什么区别"><a href="#1-4-runnable-和-callable-有什么区别" class="headerlink" title="1.4 runnable 和 callable 有什么区别"></a>1.4 runnable 和 callable 有什么区别</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>参考回答：</p><ol><li>Runnable 接口run方法<mark>没有返回值</mark>；Callable接口call方法<mark>有返回值</mark>，是个泛型，和Future、FutureTask配合可以用来<mark>获取异步执行的结果</mark></li><li>Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</li><li>Callable接口的call()方法<mark>允许抛出异常</mark>；而Runnable接口的run()方法的<mark>异常只能在内部消化</mark>，不能继续上抛</li></ol><h3 id="1-5-线程的-run-和-start-有什么区别？"><a href="#1-5-线程的-run-和-start-有什么区别？" class="headerlink" title="1.5 线程的 run()和 start()有什么区别？"></a>1.5 线程的 run()和 start()有什么区别？</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆</p></blockquote><p>start(): <mark>用来启动线程</mark>，通过该线程调用run方法执行run方法中所定义的逻辑代码。<mark>start方法只能被调用一次</mark>。</p><p>run(): 封装了要被线程执行的代码，<mark>可以被调用多次</mark>。</p><h3 id="1-6-线程包括哪些状态，状态之间是如何变化的"><a href="#1-6-线程包括哪些状态，状态之间是如何变化的" class="headerlink" title="1.6 线程包括哪些状态，状态之间是如何变化的"></a>1.6 线程包括哪些状态，状态之间是如何变化的</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>线程的状态可以参考JDK中的Thread类中的枚举State</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 尚未启动的线程的线程状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 可运行线程的线程状态。处于可运行状态的线程正在 Java 虚拟机中执行，但它可能正在等待来自 * 操作系统的其他资源，例如处理器。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程阻塞等待监视器锁的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法或在调          * 用Object.wait后重新进入同步块/方法。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 等待线程的线程状态。由于调用以下方法之一，线程处于等待状态：</span></span><br><span class="line"><span class="comment">* Object.wait没有超时</span></span><br><span class="line"><span class="comment">         * 没有超时的Thread.join</span></span><br><span class="line"><span class="comment">         * LockSupport.park</span></span><br><span class="line"><span class="comment">         * 处于等待状态的线程正在等待另一个线程执行特定操作。</span></span><br><span class="line"><span class="comment">         * 例如，一个对对象调用Object.wait()的线程正在等待另一个线程对该对象调用Object.notify()* 或Object.notifyAll() 。已调用Thread.join()的线程正在等待指定线程终止。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 具有指定等待时间的等待线程的线程状态。由于以指定的正等待时间调用以下方法之一，线程处于定          * 时等待状态：</span></span><br><span class="line"><span class="comment">* Thread.sleep</span></span><br><span class="line"><span class="comment">* Object.wait超时</span></span><br><span class="line"><span class="comment">* Thread.join超时</span></span><br><span class="line"><span class="comment">* LockSupport.parkNanos</span></span><br><span class="line"><span class="comment">* LockSupport.parkUntil</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 已终止线程的线程状态。线程已完成执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>状态之间是如何变化的</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230503203629212.png" alt="image-20230503203629212"></p><p>分别是</p><ul><li><mark>新建</mark><ul><li>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态</li><li>此时未与操作系统底层线程关联</li></ul></li><li><mark>可运行</mark><ul><li>调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong></li><li>此时与底层线程关联，由操作系统调度执行</li></ul></li><li><mark>终结</mark><ul><li>线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong></li><li>此时会取消与底层线程关联</li></ul></li><li><mark>阻塞</mark><ul><li>当<mark>获取锁失败后</mark>，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，此时不占用 cpu 时间</li><li>当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</li></ul></li><li><mark>等待</mark><ul><li>当<mark>获取锁成功后，但由于条件不满足</mark>，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合<strong>等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>等待</strong>线程，恢复为<strong>可运行</strong>状态</li></ul></li><li><mark>有时限等待</mark><ul><li>当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从<strong>可运行</strong>状态释放锁进入 Monitor 等待集合进行<strong>有时限等待</strong>，同样不占用 cpu 时间</li><li>当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的<strong>有时限等待</strong>线程，恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>如果等待超时，也会从<strong>有时限等待</strong>状态恢复为<strong>可运行</strong>状态，并重新去竞争锁</li><li>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</li></ul></li></ul><h3 id="1-7-新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？"><a href="#1-7-新建-T1、T2、T3-三个线程，如何保证它们按顺序执行？" class="headerlink" title="1.7 新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？"></a>1.7 新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的<strong>join</strong>()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。</p><p>代码举例：</p><p>为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JoinTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        &#125;) ;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();                          <span class="comment">// 加入线程t1,只有t1线程执行完毕以后，再次执行该线程</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        &#125;) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();                              <span class="comment">// 加入线程t2,只有t2线程执行完毕以后，再次执行该线程</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        &#125;) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-notify-和-notifyAll-有什么区别？"><a href="#1-8-notify-和-notifyAll-有什么区别？" class="headerlink" title="1.8 notify()和 notifyAll()有什么区别？"></a>1.8 notify()和 notifyAll()有什么区别？</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆</p></blockquote><p><mark>notifyAll：唤醒所有wait的线程</mark></p><p><mark>notify：只随机唤醒一个 wait 线程</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitNotify</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="keyword">while</span> (!flag)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...wating...&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...flag is true&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="keyword">while</span> (!flag)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...wating...&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;...flag is true&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; hold lock&quot;</span>);</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-9-在-java-中-wait-和-sleep-方法的不同？"><a href="#1-9-在-java-中-wait-和-sleep-方法的不同？" class="headerlink" title="1.9 在 java 中 wait 和 sleep 方法的不同？"></a>1.9 在 java 中 wait 和 sleep 方法的不同？</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>参考回答：</p><p>共同点</p><ul><li>wait() ，wait(long) 和 sleep(long) 的效果<mark>都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态</mark></li></ul><p>不同点</p><ul><li><p>方法归属不同</p><ul><li>sleep(long) 是 Thread 的静态方法</li><li>而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有</li></ul></li><li><p>醒来时机不同</p><ul><li>执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来</li><li><mark>wait(long) 和 wait() 还可以被 notify 唤醒</mark>，wait() 如果不唤醒就一直等下去</li><li>它们都可以被打断唤醒</li></ul></li><li><p>锁特性不同（重点）</p><ul><li><mark>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</mark></li><li><mark>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）</mark></li><li><mark>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）</mark></li></ul></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WaitSleepCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        sleeping();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">illegalWait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LOCK.wait();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">waiting</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    get(<span class="string">&quot;t&quot;</span>).debug(<span class="string">&quot;waiting...&quot;</span>);</span><br><span class="line">                    LOCK.wait(<span class="number">5000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    get(<span class="string">&quot;t&quot;</span>).debug(<span class="string">&quot;interrupted...&quot;</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            main.debug(<span class="string">&quot;other...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleeping</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    get(<span class="string">&quot;t&quot;</span>).debug(<span class="string">&quot;sleeping...&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">5000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    get(<span class="string">&quot;t&quot;</span>).debug(<span class="string">&quot;interrupted...&quot;</span>);</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (LOCK) &#123;</span><br><span class="line">            main.debug(<span class="string">&quot;other...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10-如何停止一个正在运行的线程？"><a href="#1-10-如何停止一个正在运行的线程？" class="headerlink" title="1.10 如何停止一个正在运行的线程？"></a>1.10 如何停止一个正在运行的线程？</h3><blockquote><p>难易程度：☆☆</p><p>出现频率：☆☆</p></blockquote><p>参考回答：</p><p>有三种方式可以停止线程</p><ul><li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li><li>使用stop方法强行终止（不推荐，方法已作废）</li><li><mark>使用interrupt方法中断线程</mark></li></ul><p>代码参考如下：</p><p>① <strong>使用退出标志，使线程正常退出</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterrupt1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span> ;     <span class="comment">// 线程执行的退出标记</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread...run...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyThread对象</span></span><br><span class="line">        <span class="type">MyInterrupt1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterrupt1</span>() ;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程休眠6秒</span></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更改标记为true</span></span><br><span class="line">        t1.flag = <span class="literal">true</span> ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>使用stop方法强行终止</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterrupt2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span> ;     <span class="comment">// 线程执行的退出标记</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyThread...run...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建MyThread对象</span></span><br><span class="line">        <span class="type">MyInterrupt2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInterrupt2</span>() ;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程休眠2秒</span></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用stop方法</span></span><br><span class="line">        t1.stop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ <strong>使用interrupt方法中断线程</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterrupt3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.打断阻塞的线程</span></span><br><span class="line">        <span class="comment">/*Thread t1 = new Thread(()-&gt;&#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;t1 正在运行...&quot;);</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;, &quot;t1&quot;);</span></span><br><span class="line"><span class="comment">        t1.start();</span></span><br><span class="line"><span class="comment">        Thread.sleep(500);</span></span><br><span class="line"><span class="comment">        t1.interrupt();</span></span><br><span class="line"><span class="comment">        System.out.println(t1.isInterrupted());*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.打断正常的线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line">                <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;打断状态：&quot;</span>+interrupted);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//        t2.interrupt();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-线程中并发锁"><a href="#2-线程中并发锁" class="headerlink" title="2.线程中并发锁"></a>2.线程中并发锁</h2><h3 id="2-1-讲一下synchronized关键字的底层原理？"><a href="#2-1-讲一下synchronized关键字的底层原理？" class="headerlink" title="2.1 讲一下synchronized关键字的底层原理？"></a>2.1 讲一下synchronized关键字的底层原理？</h3><blockquote><p>难易程度：☆☆☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><h4 id="2-1-1-基本使用"><a href="#2-1-1-基本使用" class="headerlink" title="2.1.1 基本使用"></a>2.1.1 基本使用</h4><p>如下抢票的代码，如果不加锁，就会出现超卖或者一张票卖给多个人</p><p>Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到一张票,剩余:&quot;</span> + ticketNum);</span><br><span class="line">            <span class="comment">// 非原子性操作</span></span><br><span class="line">            ticketNum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketDemo</span> <span class="variable">ticketDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketDemo</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                ticketDemo.getTicket();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-Monitor"><a href="#2-1-2-Monitor" class="headerlink" title="2.1.2 Monitor"></a>2.1.2 Monitor</h4><p>Monitor 被翻译为监视器，是由jvm提供，c++语言实现</p><p>在代码中想要体现monitor需要借助javap命令查看clsss的字节码，比如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到这个类的class文件，在class文件目录下执行<code>javap -v SyncTest.class</code>，反编译效果如下：</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504165342501.png" alt="image-20230504165342501"></p><blockquote><ul><li>monitorenter    上锁开始的地方</li><li>monitorexit        解锁的地方</li><li>其中被monitorenter和monitorexit包围住的指令就是上锁的代码</li><li>有两个monitorexit的原因，第二个monitorexit是为了防止锁住的代码抛异常后不能及时释放锁</li></ul></blockquote><p>在使用了synchornized代码块时需要指定一个对象，所以synchornized也被称为对象锁</p><p>monitor主要就是跟这个对象产生关联，如下图</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504165833809.png" alt="image-20230504165833809"></p><p>Monitor内部具体的存储结构：</p><ul><li><p>Owner：存储当前获取锁的线程的，只能有一个线程可以获取</p></li><li><p>EntryList：关联没有抢到锁的线程，处于Blocked状态的线程</p></li><li><p>WaitSet：关联调用了wait方法的线程，处于Waiting状态的线程</p></li></ul><p>具体的流程：</p><ul><li>代码进入synchorized代码块，先让lock（对象锁）关联的monitor，然后判断Owner是否有线程持有</li><li>如果没有线程持有，则让当前线程持有，表示该线程获取锁成功</li><li>如果有线程持有，则让当前线程进入entryList进行阻塞，如果Owner持有的线程已经释放了锁，在EntryList中的线程去竞争锁的持有权（非公平）</li><li>如果代码块中调用了wait()方法，则会进去WaitSet中进行等待</li></ul><p>🔴🟡🟢参考回答：</p><ul><li><p>Synchronized【对象锁】采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】</p></li><li><p>它的底层由monitor实现的，monitor是jvm级别的对象（ C++实现），线程获得锁需要使用对象（锁）关联monitor</p></li><li><p>在monitor内部有三个属性，分别是owner、entrylist、waitset</p></li><li><p><mark>其中owner是关联的获得锁的线程，并且只能关联一个线程；entrylist关联的是处于阻塞状态的线程；waitset关联的是处于Waiting状态的线程</mark></p></li></ul><h3 id="2-2-synchronized关键字的底层原理-进阶"><a href="#2-2-synchronized关键字的底层原理-进阶" class="headerlink" title="2.2 synchronized关键字的底层原理-进阶"></a>2.2 synchronized关键字的底层原理-进阶</h3><p>Monitor实现的锁属于重量级锁，你了解过锁升级吗？</p><ul><li><p>Monitor实现的锁属于重量级锁，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。</p></li><li><p>在JDK 1.6引入了两种新型锁机制：偏向锁和轻量级锁，它们的引入是为了解决在没有多线程竞争或基本没有竞争的场景下因使用传统锁机制带来的性能开销问题。</p></li></ul><h4 id="2-2-1-对象的内存结构"><a href="#2-2-1-对象的内存结构" class="headerlink" title="2.2.1 对象的内存结构"></a>2.2.1 对象的内存结构</h4><p>在HotSpot虚拟机中，对象在内存中存储的布局可分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504172253826.png" alt="image-20230504172253826"></p><p>我们需要重点分析MarkWord对象头</p><h4 id="2-2-2-MarkWord"><a href="#2-2-2-MarkWord" class="headerlink" title="2.2.2 MarkWord"></a>2.2.2 MarkWord</h4><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504172541922.png" alt="image-20230504172541922"></p><blockquote><ul><li><p>hashcode：25位的对象标识Hash码</p></li><li><p>age：对象分代年龄占4位</p></li><li><p>biased_lock：偏向锁标识，占1位 ，0表示没有开始偏向锁，1表示开启了偏向锁</p></li><li><p>thread：持有偏向锁的线程ID，占23位</p></li><li><p>epoch：偏向时间戳，占2位</p></li><li><p>ptr_to_lock_record：轻量级锁状态下，指向栈中锁记录的指针，占30位</p></li><li><p>ptr_to_heavyweight_monitor：重量级锁状态下，指向对象监视器Monitor的指针，占30位</p></li></ul></blockquote><p>我们可以通过lock的标识，来判断是哪一种锁的等级</p><ul><li>后三位是001表示无锁</li><li>后三位是101表示偏向锁</li><li>后两位是00表示轻量级锁</li><li>后两位是10表示重量级锁</li></ul><h4 id="2-2-3-再说Monitor重量级锁"><a href="#2-2-3-再说Monitor重量级锁" class="headerlink" title="2.2.3 再说Monitor重量级锁"></a>2.2.3 再说Monitor重量级锁</h4><p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，<strong>该对象头的Mark Word 中就被设置指向 Monitor 对象的指针</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504172957271.png" alt="image-20230504172957271"></p><p>简单说就是：每个对象的对象头都可以设置monoitor的指针，让对象与monitor产生关联</p><h4 id="2-2-4-轻量级锁"><a href="#2-2-4-轻量级锁" class="headerlink" title="2.2.4 轻量级锁"></a>2.2.4 轻量级锁</h4><p>在很多的情况下，在Java程序运行时，同步块中的代码都是不存在竞争的，不同的线程交替的执行同步块中的代码。这种情况下，用重量级锁是没必要的。因此JVM引入了轻量级锁的概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加锁的流程</strong></p><p>1.在线程栈中创建一个Lock Record，将其obj字段指向锁对象。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504173520412.png" alt="image-20230504173520412"></p><p>2.通过CAS指令将Lock Record的地址存储在对象头的mark word中（数据进行交换），如果对象处于无锁状态则修改成功，代表该线程获得了轻量级锁。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504173611219.png" alt="image-20230504173611219"></p><p>3.如果是当前线程已经持有该锁了，代表这是一次锁重入。设置Lock Record第一部分为null，起到了一个重入计数器的作用。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504173922343.png" alt="image-20230504173922343"></p><p>4.如果CAS修改失败，说明发生了竞争，需要膨胀为重量级锁。</p><p><strong>解锁过程</strong></p><p>1.遍历线程栈,找到所有obj字段等于当前锁对象的Lock Record。</p><p>2.如果Lock Record的Mark Word为null，代表这是一次重入，将obj设置为null后continue。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504173955680.png" alt="image-20230504173955680"></p><p>3.如果Lock Record的 Mark Word不为null，则利用CAS指令将对象头的mark word恢复成为无锁状态。如果失败则膨胀为重量级锁。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504174045458.png" alt="image-20230504174045458"></p><h4 id="2-2-5-偏向锁"><a href="#2-2-5-偏向锁" class="headerlink" title="2.2.5 偏向锁"></a>2.2.5 偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。</p><p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现</p><p>这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加锁的流程</strong></p><p>1.在线程栈中创建一个Lock Record，将其obj字段指向锁对象。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504174525256.png" alt="image-20230504174525256"></p><p>2.通过CAS指令将Lock Record的<strong>线程id</strong>存储在对象头的mark word中，同时也设置偏向锁的标识为101，如果对象处于无锁状态则修改成功，代表该线程获得了偏向锁。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504174505031.png" alt="image-20230504174505031"></p><p>3.如果是当前线程已经持有该锁了，代表这是一次锁重入。设置Lock Record第一部分为null，起到了一个重入计数器的作用。与轻量级锁不同的时，这里不会再次进行cas操作，只是判断对象头中的线程id是否是自己，因为缺少了cas操作，性能相对轻量级锁更好一些</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504174736226.png" alt="image-20230504174736226"></p><p>解锁流程参考轻量级锁</p><h4 id="2-2-6-参考回答"><a href="#2-2-6-参考回答" class="headerlink" title="2.2.6 参考回答"></a>2.2.6 参考回答</h4><p>Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。</p><table><thead><tr><th></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>重量级锁</td><td>底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。</td></tr><tr><td>轻量级锁</td><td>线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性</td></tr><tr><td>偏向锁</td><td>一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark  word中是否是自己的线程id即可，而不是开销相对较大的CAS命令</td></tr></tbody></table><p><strong>一旦锁发生了竞争，都会升级为重量级锁</strong></p><h3 id="2-3你谈谈-JMM（Java-内存模型）"><a href="#2-3你谈谈-JMM（Java-内存模型）" class="headerlink" title="2.3你谈谈 JMM（Java 内存模型）"></a>2.3你谈谈 JMM（Java 内存模型）</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>JMM(Java Memory Model)<mark>Java内存模型</mark>,是java虚拟机规范中所定义的一种内存模型。</p><p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504181638237.png" alt="image-20230504181638237"></p><p>特点：</p><ol><li><p>所有的共享变量都存储于主内存(计算机的RAM)这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。</p></li><li><p>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本。</p></li><li><p>线程对变量的所有的操作(读，写)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存完成。</p></li></ol><p>🔴🟡🟢总结：</p><ul><li>JMM(Java Memory Model)<mark>Java内存模型</mark>，定义了<mark>共享内存</mark>中<mark>多线程程序读写操作的行为规范</mark>，通过这些规则来规范对内存的读写操作从而保证指令的正确性。</li><li>JMM把内存分为两块，一块是私有线程的工作区域(<mark>工作内存</mark>)，一块是所有线程的共享区域(<mark>主内存</mark>)</li><li>线程跟线程之间是<mark>相互隔离</mark>，线程跟线程<mark>交互需要通过主内存</mark></li></ul><h3 id="2-4-CAS-你知道吗？"><a href="#2-4-CAS-你知道吗？" class="headerlink" title="2.4 CAS 你知道吗？"></a>2.4 CAS 你知道吗？</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆</p></blockquote><h4 id="2-4-1-概述及基本工作流程"><a href="#2-4-1-概述及基本工作流程" class="headerlink" title="2.4.1 概述及基本工作流程"></a>2.4.1 概述及基本工作流程</h4><p>CAS的全称是： Compare And Swap(比较再交换)，它体现的一种乐观锁的思想，在无锁情况下保证线程操作共享数据的原子性。</p><p>在JUC（ java.util.concurrent ）包下实现的很多类都用到了CAS操作</p><ul><li><p>AbstractQueuedSynchronizer（AQS框架）</p></li><li><p>AtomicXXX类</p></li></ul><p>例子：</p><p>我们还是基于刚才学习过的JMM内存模型进行说明</p><ul><li>线程1与线程2都从主内存中获取变量int a &#x3D; 100,同时放到各个线程的工作内存中</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504181947319.png" alt="image-20230504181947319"></p><blockquote><p>一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当旧的预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。如果CAS操作失败，通过自旋的方式等待并再次尝试，直到成功</p></blockquote><ul><li>线程1操作：V：int a &#x3D; 100，A：int a &#x3D; 100，B：修改后的值：int a &#x3D; 101 (a++)<ul><li>线程1拿A的值与主内存V的值进行比较，判断是否相等</li><li>如果相等，则把B的值101更新到主内存中</li></ul></li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504182129820.png" alt="image-20230504182129820"></p><ul><li>线程2操作：V：int a &#x3D; 100，A：int a &#x3D; 100，B：修改后的值：int a &#x3D; 99(a–)<ul><li>线程2拿A的值与主内存V的值进行比较，判断是否相等(目前不相等，因为线程1已更新V的值99)</li><li>不相等，则线程2更新失败</li></ul></li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504181827330.png" alt="image-20230504181827330"></p><ul><li><p>自旋锁操作</p><ul><li><p>因为没有加锁，所以线程不会陷入阻塞，效率较高</p></li><li><p>如果竞争激烈，重试频繁发生，效率会受影响</p></li></ul></li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504182447552.png" alt="image-20230504182447552"></p><p>需要不断尝试获取共享内存V中最新的值，然后再在新的值的基础上进行更新操作，如果失败就继续尝试获取新的值，直到更新成功</p><h4 id="2-4-2-CAS-底层实现"><a href="#2-4-2-CAS-底层实现" class="headerlink" title="2.4.2 CAS 底层实现"></a>2.4.2 CAS 底层实现</h4><p>CAS 底层依赖于一个 Unsafe 类来直接调用操作系统底层的 CAS 指令</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504182737931.png" alt="image-20230504182737931"></p><p>都是native修饰的方法，由系统提供的接口执行，并非java代码实现，一般的思路也都是自旋锁实现</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504182838426.png" alt="image-20230504182838426"></p><p>在java中比较常见使用有很多，比如ReentrantLock和Atomic开头的线程安全类，都调用了Unsafe中的方法</p><ul><li>ReentrantLock中的一段CAS代码</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230504182958703.png" alt="image-20230504182958703"></p><h4 id="2-4-3-乐观锁和悲观锁的区别"><a href="#2-4-3-乐观锁和悲观锁的区别" class="headerlink" title="2.4.3 乐观锁和悲观锁的区别"></a>2.4.3 乐观锁和悲观锁的区别</h4><ul><li><p>CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</p></li><li><p>synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</p></li></ul><p>🔴🟡🟢总结：</p><ul><li>CAS的全称是: Compare And Swap(比较再交换)它体现的一种乐观锁的思想<mark>在无锁状态下保证线程操作数据的原子性</mark>。</li><li>CAS使用到的地方很多: AQS框架、AtomicXXX类</li><li>在操作共享变量的时候使用的自旋锁，效率上更高一些（<mark>因为没有加锁所以效率高</mark>）</li><li>CAS的底层是调用的<mark>Unsafe</mark>类中的方法，都是操作系统提供的，其他语言实现</li><li>乐观锁和悲观锁的区别如上👆</li></ul><p>🔴🟡🟢补充：</p><p><strong>重量级锁、轻量级锁、和偏向性锁</strong>是Java中用于实现线程同步的不同锁状态，它们在性能和应用场景上有一些区别。以下是它们的基本概念和区别：</p><ol><li><p><strong>偏向性锁（Biased Locking）：</strong></p><ul><li><strong>概念：</strong> 偏向性锁是为了在无竞争的情况下提高性能而引入的。它假设在大多数情况下，锁总是由同一线程多次获得。</li><li><strong>工作原理：</strong> 当一个线程第一次访问一个同步块时，偏向性锁会记录该线程的ID，并将对象头的Mark Word 设置为偏向锁。以后该线程再次进入同步块时，不再进行竞争，直接获取锁，避免了重量级锁的竞争开销。</li><li><strong>适用场景：</strong> 主要适用于单线程或者只有一个线程频繁访问同步块的情况。</li></ul></li><li><p><strong>轻量级锁（Lightweight Locking）：</strong></p><ul><li><strong>概念：</strong> 轻量级锁是为了在有少量竞争的情况下提高性能。当多个线程同时访问一个同步块时，会使用轻量级锁来减小竞争的代价。</li><li><strong>工作原理：</strong> 当线程尝试获取轻量级锁时，会将对象头的Mark Word 复制到线程的栈帧中，并尝试用CAS（Compare And Swap）原子指令将对象头的Mark Word 替换为指向线程栈帧的指针。如果替换成功，线程就获得了轻量级锁；否则，转为重量级锁。</li><li><strong>适用场景：</strong> 适用于线程交替执行同步块的情况，竞争不激烈。</li></ul></li><li><p><strong>重量级锁（Heavyweight Locking）：</strong></p><ul><li><strong>概念：</strong> 重量级锁是一种传统的锁机制，在多线程竞争激烈的情况下使用，它会引入阻塞来确保只有一个线程能够进入临界区。</li><li><strong>工作原理：</strong> 当线程尝试获取重量级锁时，如果轻量级锁获取失败，会升级为重量级锁。此时，其他线程将被阻塞，只有拥有锁的线程可以执行同步块内的代码。</li><li><strong>适用场景：</strong> 适用于高度竞争的情况，多个线程频繁竞争同一个锁。</li></ul></li></ol><p>总的来说，偏向性锁适用于单线程场景，轻量级锁适用于低竞争场景，而重量级锁适用于高竞争场景。Java的锁机制在运行时会根据实际情况自动选择使用哪种锁状态，以平衡性能和竞争的开销。</p><hr><h3 id="2-5-请谈谈你对-volatile-的理解"><a href="#2-5-请谈谈你对-volatile-的理解" class="headerlink" title="2.5 请谈谈你对 volatile 的理解"></a>2.5 请谈谈你对 volatile 的理解</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><h4 id="2-5-1-保证线程间的可见性"><a href="#2-5-1-保证线程间的可见性" class="headerlink" title="2.5.1 保证线程间的可见性"></a>2.5.1 保证线程间的可见性</h4><p>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。</p><p>一个典型的例子：永不停止的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.basic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见性例子</span></span><br><span class="line"><span class="comment">// -Xint</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForeverLoop</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stop = <span class="literal">true</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;modify stop to true...&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;stopped... c:&quot;</span>+ i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行上述代码的时候，发现foo()方法中的循环是结束不了的，也就说读取不到共享变量的值结束循环。</p><p>主要是因为在JVM虚拟机中有一个JIT（即时编辑器）给代码做了优化。</p><blockquote><p>上述代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">&gt;i++;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>在很短的时间内，这个代码执行的次数太多了，当达到了一个阈值，JIT就会优化此代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">&gt;i++;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>当把代码优化成这样子以后，及时<code>stop</code>变量改变为了<code>false</code>也依然停止不了循环</p></blockquote><p>解决方案：</p><p>第一：</p><p>在程序运行的时候加入vm参数<code>-Xint</code>表示禁用即时编辑器，不推荐，得不偿失（其他程序还要使用）</p><p>第二：</p><p>在修饰<code>stop</code>变量的时候加上<code>volatile</code>,表示当前代码禁用了即时编辑器，问题就可以解决，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-禁止进行指令重排序"><a href="#2-5-2-禁止进行指令重排序" class="headerlink" title="2.5.2 禁止进行指令重排序"></a>2.5.2 禁止进行指令重排序</h4><p>用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505082441116.png" alt="image-20230505082441116"></p><p>在去获取上面的结果的时候，有可能会出现4种情况</p><p>情况一：先执行actor2获取结果—&gt;0,0(正常)</p><p>情况二：先执行actor1中的第一行代码，然后执行actor2获取结果—&gt;0,1(正常)</p><p>情况三：先执行actor1中所有代码，然后执行actor2获取结果—&gt;1,1(正常)</p><p>情况四：先执行actor1中第二行代码，然后执行actor2获取结果—&gt;1,0(发生了指令重排序，影响结果)</p><p><strong>解决方案</strong></p><p>在变量上添加volatile，禁止指令重排序，则可以解决问题</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505082835588.png" alt="image-20230505082835588"></p><p>屏障添加的示意图</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505082923729.png" alt="image-20230505082923729"></p><ul><li>写操作加的屏障是阻止上方其它写操作越过屏障排到volatile变量写之下</li><li>读操作加的屏障是阻止下方其它读操作越过屏障排到volatile变量读之上</li></ul><p><strong>其他补充</strong></p><p>我们上面的解决方案是把volatile加在了int y这个变量上，我们能不能把它加在int x这个变量上呢？</p><p>下面代码使用volatile修饰了x变量</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505083124159.png" alt="image-20230505083124159"></p><p>屏障添加的示意图</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505083217904.png" alt="image-20230505083217904"></p><p>这样显然是不行的，主要是因为下面两个原则：</p><ul><li>写操作加的屏障是阻止上方其它写操作越过屏障排到volatile变量写之下</li><li>读操作加的屏障是阻止下方其它读操作越过屏障排到volatile变量读之上</li></ul><p><mark>所以，现在我们就可以总结一个volatile使用的小妙招：</mark></p><ul><li><mark>写变量让volatile修饰的变量的在代码最后位置</mark></li><li><mark>读变量让volatile修饰的变量的在代码最开始位置</mark></li></ul><p>🔴🟡🟢总结：</p><ol><li>保证线程间的可见性<br>用 volatile 修饰共享变量，能够防止编译器等优化发生（<strong>其实就是JVM的语法糖</strong>），让一个线程对共享变量的修改对另一个线程可见</li><li>禁止进行指令重排序<br>指令重排：用volatile 修饰共享变量会在读、写共享变量时加入不同的屏障阻止其他读写操作越过屏障，从而达到阻止重排序的效果</li></ol><h3 id="2-6-什么是AQS？"><a href="#2-6-什么是AQS？" class="headerlink" title="2.6 什么是AQS？"></a>2.6 什么是AQS？</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><h4 id="2-6-1-概述"><a href="#2-6-1-概述" class="headerlink" title="2.6.1 概述"></a>2.6.1 概述</h4><p>全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架，它是构建锁或者其他同步组件的基础框架</p><p>AQS与Synchronized的区别</p><table><thead><tr><th><strong>synchronized</strong></th><th><strong>AQS</strong></th></tr></thead><tbody><tr><td>关键字，c++ 语言实现</td><td>java  语言实现</td></tr><tr><td>悲观锁，自动释放锁</td><td>悲观锁，手动开启和关闭</td></tr><tr><td>锁竞争激烈都是重量级锁，性能差</td><td>锁竞争激烈的情况下，提供了多种解决方案</td></tr></tbody></table><p>AQS常见的实现类</p><ul><li><p>ReentrantLock      阻塞式锁</p></li><li><p>Semaphore        信号量</p></li><li><p>CountDownLatch   倒计时锁</p></li></ul><h4 id="2-6-2-工作机制"><a href="#2-6-2-工作机制" class="headerlink" title="2.6.2 工作机制"></a>2.6.2 工作机制</h4><ul><li>在AQS中维护了一个使用了volatile修饰的state属性来表示资源的状态，0表示无锁，1表示有锁</li><li>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</li><li>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505083840046.png" alt="image-20230505083840046"></p><blockquote><ul><li>线程0来了以后，去尝试修改state属性，如果发现state属性是0，就修改state状态为1，表示线程0抢锁成功</li><li>线程1和线程2也会先尝试修改state属性，发现state的值已经是1了，有其他线程持有锁，它们都会到FIFO队列中进行等待，</li><li>FIFO是一个双向队列，head属性表示头结点，tail表示尾结点</li></ul></blockquote><p><strong>如果多个线程共同去抢这个资源是如何保证原子性的呢？</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505084451193.png" alt="image-20230505084451193"></p><p>在去修改state状态的时候，使用的cas自旋锁来保证原子性，确保只能有一个线程修改成功，修改失败的线程将会进入FIFO队列中等待</p><p><strong>AQS是公平锁吗，还是非公平锁？</strong></p><ul><li><p>新的线程与队列中的线程共同来抢资源，是非公平锁</p></li><li><p>新的线程到队列中等待，只让队列中的head线程获取锁，是公平锁</p></li></ul><blockquote><p>比较典型的AQS实现类ReentrantLock，它默认就是非公平锁，新的线程与队列中的线程共同来抢资源</p></blockquote><p>🔴🟡🟢总结：</p><ul><li>AQS是多线程中的队列同步器。是一种<mark><strong>锁机制</strong></mark>，它是做为一个<mark>基础框架</mark>使用的像ReentrantLock、Semaphore都是基于AQS实现的</li><li>AQS内部维护了一个先进先出的双向队列，队列中存储的排队的线程</li><li>在AQS内部还有一个属性state，这个state就相当于是一个资源，默认是0(无锁状态)，如果队列中的有一个线程修改成功了state为1，则当前线程就相等于获取了资源</li><li>在对state修改的时候使用的cas操作，保证多个线程修改的情况下原子性</li></ul><h3 id="2-5-ReentrantLock的实现原理"><a href="#2-5-ReentrantLock的实现原理" class="headerlink" title="2.5 ReentrantLock的实现原理"></a>2.5 ReentrantLock的实现原理</h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><h4 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h4><p>ReentrantLock翻译过来是可重入锁，相对于synchronized它具备以下特点：</p><ul><li><p>可中断</p></li><li><p>可以设置超时时间</p></li><li><p>可以设置公平锁</p></li><li><p>支持多个条件变量</p></li><li><p>与synchronized一样，都支持重入</p></li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505091736569.png" alt="image-20230505091736569"></p><h4 id="2-5-2-实现原理"><a href="#2-5-2-实现原理" class="headerlink" title="2.5.2 实现原理"></a>2.5.2 实现原理</h4><p>ReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似</p><p>构造方法接受一个可选的公平参数（默认非公平锁），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高，在许多线程访问的情况下，公平锁表现出较低的吞吐量。</p><p>查看ReentrantLock源码中的构造方法：</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505091827720.png" alt="image-20230505091827720"></p><p>提供了两个构造方法，不带参数的默认为非公平</p><p>如果使用带参数的构造函数，并且传的值为true，则是公平锁</p><p>其中NonfairSync和FairSync这两个类父类都是Sync</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505092151244.png" alt="image-20230505092151244"></p><p>而Sync的父类是AQS，所以可以得出ReentrantLock底层主要实现就是基于AQS来实现的</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505091833629.png" alt="image-20230505091833629"></p><p><strong>工作流程</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505092340431.png" alt="image-20230505092340431"></p><ul><li><p>线程来抢锁后使用cas的方式修改state状态，修改状态成功为1，则让exclusiveOwnerThread属性指向当前线程，获取锁成功</p></li><li><p>假如修改状态失败，则会进入双向队列中等待，head指向双向队列头部，tail指向双向队列尾部</p></li><li><p>当exclusiveOwnerThread为null的时候，则会唤醒在双向队列中等待的线程</p></li><li><p>公平锁则体现在按照先后顺序获取锁，非公平体现在不在排队的线程也可以抢锁</p></li></ul><h3 id="2-6-synchronized和Lock有什么区别"><a href="#2-6-synchronized和Lock有什么区别" class="headerlink" title="2.6 synchronized和Lock有什么区别 ?"></a>2.6 synchronized和Lock有什么区别 ?</h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>参考回答</p><ul><li>语法层面<ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现</li><li>使用 synchronized 时，退出同步代码块锁会<strong>自动释放</strong>，而使用 Lock 时，<strong>需要手动调用 unlock 方法释放锁</strong></li></ul></li><li>功能层面<ul><li>二者<strong>均属于悲观锁</strong>、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如<strong>获取等待状态、公平锁、可打断、可超时、多条件变量</strong></li><li>Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock</li></ul></li><li>性能层面<ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul></li></ul><h3 id="2-7-死锁产生的条件是什么？"><a href="#2-7-死锁产生的条件是什么？" class="headerlink" title="2.7 死锁产生的条件是什么？"></a>2.7 死锁产生的条件是什么？</h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p><strong>死锁</strong>：一个线程需要同时获取多把锁，这时就容易发生死锁</p><blockquote><p>例如：</p><p>t1 线程获得A对象锁，接下来想获取B对象的锁</p><p>t2 线程获得B对象锁，接下来想获取A对象的锁 </p></blockquote><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Deadlock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;操作...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;操作...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出结果</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220902171032898.png" alt="image-20220902171032898"></p><p>此时程序并没有结束，这种现象就是死锁现象…线程t1持有A的锁等待获取B锁，线程t2持有B的锁等待获取A的锁。</p><h3 id="2-8-如何进行死锁诊断？"><a href="#2-8-如何进行死锁诊断？" class="headerlink" title="2.8 如何进行死锁诊断？"></a>2.8 如何进行死锁诊断？</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>当程序出现了死锁现象，我们可以使用jdk自带的工具：jps和 jstack</p><p>步骤如下：</p><p>第一：查看运行的线程</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220902171426738.png" alt="image-20220902171426738"></p><p>第二：使用jstack查看线程运行的情况，下图是截图的关键信息</p><p>运行命令：<code>jstack -l 46032</code></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220902172229567.png" alt="image-20220902172229567"></p><p><strong>其他解决工具，可视化工具</strong></p><ul><li>jconsole</li></ul><p>用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具</p><p>打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行</p><ul><li>VisualVM：故障处理工具</li></ul><p>能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈</p><p>打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行</p><h3 id="2-10-ConcurrentHashMap"><a href="#2-10-ConcurrentHashMap" class="headerlink" title="2.10  ConcurrentHashMap"></a>2.10  ConcurrentHashMap</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>ConcurrentHashMap 是一种线程安全的高效Map集合</p><p>底层数据结构：</p><ul><li><p>JDK1.7底层采用分段的数组+链表实现</p></li><li><p>JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表&#x2F;红黑二叉树。</p></li></ul><h4 id="（1）-JDK1-7中concurrentHashMap"><a href="#（1）-JDK1-7中concurrentHashMap" class="headerlink" title="（1） JDK1.7中concurrentHashMap"></a>（1） JDK1.7中concurrentHashMap</h4><p>数据结构</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505092654811.png" alt="image-20230505092654811"></p><blockquote><ul><li>提供了一个segment数组，在初始化ConcurrentHashMap 的时候可以指定数组的长度，默认是16，一旦初始化之后中间不可扩容</li><li>在每个segment中都可以挂一个HashEntry数组，数组里面可以存储具体的元素，HashEntry数组是可以扩容的</li><li>在HashEntry存储的数组中存储的元素，如果发生冲突，则可以挂单向链表</li></ul></blockquote><p>存储流程</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505093055382.png" alt="image-20230505093055382"></p><ul><li>先去计算key的hash值，然后确定segment数组下标</li><li>再通过hash值确定hashEntry数组中的下标存储数据</li><li>在进行操作数据的之前，会先判断当前segment对应下标位置是否有线程进行操作，为了线程安全使用的是ReentrantLock进行加锁，如果获取锁是被会使用cas自旋锁进行尝试</li></ul><h4 id="（2）-JDK1-8中concurrentHashMap"><a href="#（2）-JDK1-8中concurrentHashMap" class="headerlink" title="（2） JDK1.8中concurrentHashMap"></a>（2） JDK1.8中concurrentHashMap</h4><p>在JDK1.8中，放弃了Segment臃肿的设计，数据结构跟HashMap的数据结构是一样的：数组+红黑树+链表</p><p>采用 CAS + Synchronized来保证并发安全进行实现</p><ul><li><p>CAS控制数组节点的添加</p></li><li><p>synchronized只锁定当前链表或红黑二叉树的首节点，只要hash不冲突，就不会产生并发的问题 , 效率得到提升</p></li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505093507265.png" alt="image-20230505093507265"></p><p>🔴🟡🟢总结：</p><ol><li>底层数据结构:<br>JDK1.7底层采用分段的数组+链表实现<br>JDK18 采用的数据结构跟HashMap1.8的结构一样，数组+链表&#x2F;红黑二叉树</li><li>加锁的方式<br>JDK1.7采用Segment分段锁，底层使用的是ReentrantLock<br>JDK1.8采用CAS添加新节点，采用synchronized锁定链表或红黑二叉树的<mark>首节点</mark>，相对Segment分段锁粒度更细，性能更好</li></ol><h3 id="2-11-导致并发程序出现问题的根本原因是什么"><a href="#2-11-导致并发程序出现问题的根本原因是什么" class="headerlink" title="2.11 导致并发程序出现问题的根本原因是什么"></a>2.11 导致并发程序出现问题的根本原因是什么</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>Java并发编程三大特性</p><ul><li><p>原子性</p></li><li><p>可见性</p></li><li><p>有序性</p></li></ul><h4 id="（1）原子性"><a href="#（1）原子性" class="headerlink" title="（1）原子性"></a>（1）原子性</h4><p>一个线程在CPU中操作不可暂停，也不可中断，要不执行完成，要不不执行</p><p>比如，如下代码能保证原子性吗？</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505205200628.png" alt="image-20230505205200628"></p><p>以上代码会出现超卖或者是一张票卖给同一个人，执行并不是原子性的</p><p>解决方案：</p><p>1.synchronized：同步加锁</p><p>2.JUC里面的lock：加锁</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505210853493.png" alt="image-20230505210853493"></p><h4 id="（2）内存可见性"><a href="#（2）内存可见性" class="headerlink" title="（2）内存可见性"></a>（2）内存可见性</h4><p>内存可见性：让一个线程对共享变量的修改对另一个线程可见</p><p>比如，以下代码不能保证内存可见性</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505211002252.png" alt="image-20230505211002252"></p><p>解决方案：</p><ul><li><p>synchronized</p></li><li><p>volatile（推荐）</p></li><li><p>LOCK</p></li></ul><h4 id="（3）有序性"><a href="#（3）有序性" class="headerlink" title="（3）有序性"></a>（3）有序性</h4><p>指令重排：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的</p><p>还是之前的例子，如下代码：</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505211209336.png" alt="image-20230505211209336"></p><p>解决方案：</p><ul><li>volatile</li></ul><h2 id="3-线程池"><a href="#3-线程池" class="headerlink" title="3.线程池"></a>3.线程池</h2><h3 id="3-1-说一下线程池的核心参数（线程池的执行原理知道嘛）"><a href="#3-1-说一下线程池的核心参数（线程池的执行原理知道嘛）" class="headerlink" title="3.1 说一下线程池的核心参数（线程池的执行原理知道嘛）"></a>3.1 说一下线程池的核心参数（线程池的执行原理知道嘛）</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><p>线程池核心参数主要参考ThreadPoolExecutor这个类的7个参数的构造函数</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505220514872.png" alt="image-20230505220514872"></p><ul><li><p>corePoolSize 核心线程数目</p></li><li><p>maximumPoolSize 最大线程数目 &#x3D; (核心线程+救急线程的最大数目)</p></li><li><p>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</p></li><li><p>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</p></li><li><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p></li><li><p>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</p></li><li><p>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略</p></li></ul><p><strong>工作流程</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505220701835.png" alt="image-20230505220701835"></p><blockquote><p>1，任务在提交的时候，首先判断核心线程数是否已满，如果没有满则直接添加到工作线程执行</p><p>2，如果核心线程数满了，则判断阻塞队列是否已满，如果没有满，当前任务存入阻塞队列</p><p>3，如果阻塞队列也满了，则判断线程数是否小于最大线程数，如果满足条件，则使用临时线程执行任务</p><p>如果核心或临时线程执行完成任务后会检查阻塞队列中是否有需要执行的线程，如果有，则使用非核心线程执行任务</p><p>4，如果所有线程都在忙着（核心线程+临时线程），则走拒绝策略</p></blockquote><p>拒绝策略：</p><p>1.AbortPolicy：直接抛出异常，默认策略；</p><p>2.CallerRunsPolicy：用调用者所在的线程来执行任务；</p><p>3.DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</p><p>4.DiscardPolicy：直接丢弃任务；</p><h3 id="3-2-线程池中有哪些常见的阻塞队列"><a href="#3-2-线程池中有哪些常见的阻塞队列" class="headerlink" title="3.2 线程池中有哪些常见的阻塞队列"></a>3.2 线程池中有哪些常见的阻塞队列</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p><p>比较常见的有4个，用的最多是ArrayBlockingQueue和LinkedBlockingQueue</p><p>1.<mark><strong>ArrayBlockingQueue</strong></mark>：基于数组结构的有界阻塞队列，FIFO（先进先出）。</p><p>2.<mark><strong>LinkedBlockingQueue</strong></mark>：基于链表结构的有界阻塞队列，FIFO（先进先出）。</p><p>3.DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的</p><p>4.SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p><p><strong>ArrayBlockingQueue的LinkedBlockingQueue区别</strong></p><table><thead><tr><th><strong>LinkedBlockingQueue</strong></th><th><strong>ArrayBlockingQueue</strong></th></tr></thead><tbody><tr><td>默认无界，支持有界</td><td>强制有界</td></tr><tr><td>底层是链表</td><td>底层是数组</td></tr><tr><td>是懒惰的，创建节点的时候添加数据</td><td>提前初始化 Node  数组</td></tr><tr><td>入队会生成新 Node</td><td>Node需要是提前创建好的</td></tr><tr><td><mark>两把锁（头尾）</mark></td><td><mark>一把锁</mark></td></tr></tbody></table><p>左边是LinkedBlockingQueue加锁的方式，右边是ArrayBlockingQueue加锁的方式</p><ul><li>LinkedBlockingQueue读和写各有一把锁，<mark>性能</mark>相对较好</li><li>ArrayBlockingQueue只有一把锁，读和写公用，性能相对于LinkedBlockingQueue差一些</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505221424359.png" alt="image-20230505221424359"></p><h3 id="3-3-如何确定核心线程数"><a href="#3-3-如何确定核心线程数" class="headerlink" title="3.3 如何确定核心线程数"></a>3.3 如何确定核心线程数</h3><blockquote><p>难易程度：☆☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>在设置核心线程数之前，需要先熟悉一些执行线程池执行任务的类型</p><ul><li>IO密集型任务</li></ul><p>一般来说：文件读写、DB读写、网络请求等</p><p>推荐：核心线程数大小设置为2N+1    （N为计算机的CPU核数）</p><ul><li>CPU密集型任务</li></ul><p>一般来说：计算型代码、Bitmap转换、Gson转换等</p><p>推荐：核心线程数大小设置为N+1    （N为计算机的CPU核数）</p><p>java代码查看CPU核数</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505221837189.png" alt="image-20230505221837189"></p><p>🔴🟡🟢<strong>参考回答：</strong></p><p>① 高并发、任务执行时间短 –&gt;（ CPU核数+1 ），减少线程上下文的切换</p><p>② 并发不高、任务执行时间长</p><ul><li><p>IO密集型的任务 –&gt; (CPU核数 * 2 + 1)</p></li><li><p>计算密集型任务 –&gt; （ CPU核数+1 ）</p></li></ul><p>③ 并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）</p><h3 id="3-4-线程池的种类有哪些"><a href="#3-4-线程池的种类有哪些" class="headerlink" title="3.4 线程池的种类有哪些"></a>3.4 线程池的种类有哪些</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>在java.util.concurrent.Executors类中提供了大量创建连接池的静态方法，常见就有四种</p><ol><li><p>创建使用固定线程数的线程池</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505221959259.png" alt="image-20230505221959259"></p><ul><li><p>核心线程数与最大线程数一样，没有救急线程</p></li><li><p>阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE</p></li><li><p><mark>适用场景：适用于任务量已知，相对耗时的任务</mark></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FixedThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FixedThreadDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建一个固定大小的线程池，核心线程数和最大线程数都是3</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">FixedThreadDemo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505222050294.png" alt="image-20230505222050294"></p><ul><li><p>核心线程数和最大线程数都是1</p></li><li><p>阻塞队列是LinkedBlockingQueue，最大容量为Integer.MAX_VALUE</p></li><li><p><mark>适用场景：适用于按照顺序执行的任务</mark></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewSingleThreadCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//单个线程池，核心线程数和最大线程数都是1</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可缓存线程池</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505222126391.png" alt="image-20230505222126391"></p><ul><li><p>核心线程数为0</p></li><li><p>最大线程数是Integer.MAX_VALUE</p></li><li><p>阻塞队列为SynchronousQueue:不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。</p></li><li><p><mark>适用场景：适合任务数比较密集，但每个任务执行时间较短的情况</mark></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//修改睡眠时间，模拟线程执行需要花费的时间</span></span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">&quot;执行完了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建一个缓存的线程，没有核心线程数，最大线程数为Integer.MAX_VALUE</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">exec</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> <span class="title class_">Demo</span>());</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>提供了“延迟”和“周期执行”功能的ThreadPoolExecutor。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505222203615.png" alt="image-20230505222203615"></p><ul><li><p><mark>适用场景：有定时和延迟执行的任务</mark></p></li><li><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledThreadPoolCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">                System.out.println(name + <span class="string">&quot;, 开始：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;, 结束：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//按照周期执行的线程池，核心线程数为2，最大线程数为Integer.MAX_VALUE</span></span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledThreadPool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序开始：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * schedule 提交任务到线程池中</span></span><br><span class="line"><span class="comment">         * 第一个参数：提交的任务</span></span><br><span class="line"><span class="comment">         * 第二个参数：任务执行的延迟时间</span></span><br><span class="line"><span class="comment">         * 第三个参数：时间单位</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">0</span>, TimeUnit.SECONDS);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        scheduledThreadPool.schedule(<span class="keyword">new</span> <span class="title class_">Task</span>(), <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        scheduledThreadPool.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-5-为什么不建议用Executors创建线程池"><a href="#3-5-为什么不建议用Executors创建线程池" class="headerlink" title="3.5 为什么不建议用Executors创建线程池"></a>3.5 为什么不建议用Executors创建线程池</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><p>参考阿里开发手册《Java开发手册-嵩山版》</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220821003816845.png" alt="image-20220821003816845"></p><h2 id="4-线程使用场景问题"><a href="#4-线程使用场景问题" class="headerlink" title="4.线程使用场景问题"></a>4.线程使用场景问题</h2><h3 id="4-1-线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）"><a href="#4-1-线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）" class="headerlink" title="4.1 线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）"></a>4.1 线程池使用场景CountDownLatch、Future（你们项目哪里用到了多线程）</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><h4 id="4-1-2-案例一（es数据批量导入）"><a href="#4-1-2-案例一（es数据批量导入）" class="headerlink" title="4.1.2 案例一（es数据批量导入）"></a>4.1.2 案例一（es数据批量导入）</h4><p>在我们项目上线之前，我们需要把数据库中的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），当时我就想到可以使用线程池的方式导入，利用CountDownLatch来控制，就能避免一次性加载过多，防止内存溢出</p><p>整体流程就是通过CountDownLatch+线程池配合去执行</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505223219951.png" alt="image-20230505223219951"></p><p>详细实现流程：</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505223246059.png" alt="image-20230505223246059"></p><blockquote><p>详细实现代码，请查看当天代码</p></blockquote><h4 id="4-1-3-案例二（数据汇总）"><a href="#4-1-3-案例二（数据汇总）" class="headerlink" title="4.1.3 案例二（数据汇总）"></a>4.1.3 案例二（数据汇总）</h4><p>在一个电商网站中，用户下单之后，需要查询数据，数据包含了三部分：订单信息、包含的商品、物流信息；这三块信息都在不同的微服务中进行实现的，我们如何完成这个业务呢？</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505223442924.png" alt="image-20230505223442924"></p><blockquote><p>详细实现代码，请查看当天代码</p></blockquote><ul><li><p>在实际开发的过程中，难免需要调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池+future来提升性能</p></li><li><p>报表汇总</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505223536657.png" alt="image-20230505223536657"></p></li></ul><h4 id="4-1-4-案例二（异步调用）"><a href="#4-1-4-案例二（异步调用）" class="headerlink" title="4.1.4 案例二（异步调用）"></a>4.1.4 案例二（异步调用）</h4><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505223640038.png" alt="image-20230505223640038"></p><p>在进行搜索的时候，需要保存用户的搜索记录，而搜索记录不能影响用户的正常搜索，我们通常会开启一个线程去执行历史记录的保存，在新开启的线程在执行的过程中，可以利用线程提交任务</p><h3 id="4-1-如何控制某个方法允许并发访问线程的数量？"><a href="#4-1-如何控制某个方法允许并发访问线程的数量？" class="headerlink" title="4.1 如何控制某个方法允许并发访问线程的数量？"></a>4.1 如何控制某个方法允许并发访问线程的数量？</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆</p></blockquote><p>Semaphore [ˈsɛməˌfɔr] 信号量，是JUC包下的一个工具类，我们可以通过其限制执行的线程数量，达到限流的效果</p><p>当一个线程执行时先通过其方法进行获取许可操作，获取到许可的线程继续执行业务逻辑，当线程执行完成后进行释放许可操作，未获取达到许可的线程进行等待或者直接结束。</p><p>Semaphore两个重要的方法</p><p>lsemaphore.acquire()： 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）</p><p>lsemaphore.release()：释放一个信号量，此时信号量个数+1</p><p>线程任务类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreCase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建 semaphore 对象</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 2. 10个线程同时运行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 3. 获取许可</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 4. 释放许可</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h2><h3 id="5-1-谈谈你对ThreadLocal的理解"><a href="#5-1-谈谈你对ThreadLocal的理解" class="headerlink" title="5.1 谈谈你对ThreadLocal的理解"></a>5.1 谈谈你对ThreadLocal的理解</h3><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆☆</p></blockquote><h4 id="5-1-1-概述"><a href="#5-1-1-概述" class="headerlink" title="5.1.1 概述"></a>5.1.1 概述</h4><p>ThreadLocal是多线程中对于解决线程安全的一个操作类，它会为每个线程都分配一个独立的线程副本从而解决了变量并发访问冲突的问题。ThreadLocal 同时实现了线程内的资源共享</p><p>案例：使用JDBC操作数据库时，会将每一个线程的Connection放入各自的ThreadLocal中，从而保证每个线程都在各自的 Connection 上进行数据库的操作，避免A线程关闭了B线程的连接。</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224057228.png" alt="image-20230505224057228"></p><h4 id="5-1-2-ThreadLocal基本使用"><a href="#5-1-2-ThreadLocal基本使用" class="headerlink" title="5.1.2 ThreadLocal基本使用"></a>5.1.2 ThreadLocal基本使用</h4><p>三个主要方法：</p><ul><li><p>set(value) 设置值</p></li><li><p>get() 获取值</p></li><li><p>remove() 清除值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            threadLocal.set(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">            print(name);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;-after remove : &quot;</span> + threadLocal.get());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            threadLocal.set(<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">            print(name);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;-after remove : &quot;</span> + threadLocal.get());</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//打印当前线程中本地内存中本地变量的值</span></span><br><span class="line">        System.out.println(str + <span class="string">&quot; :&quot;</span> + threadLocal.get());</span><br><span class="line">        <span class="comment">//清除本地内存中的本地变量</span></span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-ThreadLocal的实现原理-源码解析"><a href="#5-1-3-ThreadLocal的实现原理-源码解析" class="headerlink" title="5.1.3 ThreadLocal的实现原理&amp;源码解析"></a>5.1.3 ThreadLocal的实现原理&amp;源码解析</h4><p>ThreadLocal本质来说就是一个线程内部存储类，从而让多个线程只操作自己内部的值，从而实现线程数据隔离</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224341410.png" alt="image-20230505224341410"></p><p>在ThreadLocal中有一个内部类叫做ThreadLocalMap，类似于HashMap</p><p>ThreadLocalMap中有一个属性table数组，这个是真正存储数据的位置</p><p><strong>set方法</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224626253.png" alt="image-20230505224626253"></p><p><strong>get方法&#x2F;remove方法</strong></p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224715087.png" alt="image-20230505224715087"></p><h4 id="5-1-4-ThreadLocal-内存泄露问题"><a href="#5-1-4-ThreadLocal-内存泄露问题" class="headerlink" title="5.1.4 ThreadLocal-内存泄露问题"></a>5.1.4 ThreadLocal-内存泄露问题</h4><p>Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用</p><ul><li>强引用：最为普通的引用方式，表示一个对象处于有用且必须的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224755797.png" alt="image-20230505224755797"></p><ul><li>弱引用：表示一个对象处于可能有用且非必须的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收</li></ul><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224812015.png" alt="image-20230505224812015"></p><p>每一个Thread维护一个ThreadLocalMap，在ThreadLocalMap中的Entry对象继承了WeakReference。其中key为使用弱引用的ThreadLocal实例，value为线程变量的副本</p><p><img src="/../assets/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230505224857538.png" alt="image-20230505224857538"></p><p>在使用ThreadLocal的时候，强烈建议：<strong>务必手动remove</strong></p><h2 id="6-真实面试还原"><a href="#6-真实面试还原" class="headerlink" title="6 真实面试还原"></a>6 真实面试还原</h2><h3 id="6-1-线程的基础知识"><a href="#6-1-线程的基础知识" class="headerlink" title="6.1 线程的基础知识"></a>6.1 线程的基础知识</h3><blockquote><p><strong>面试官</strong>：聊一下并行和并发有什么区别？</p><p><strong>候选人：</strong></p><p>是这样的~~</p><p>现在都是多核CPU，在多核CPU下</p><p>并发是同一时间应对多件事情的能力，多个线程轮流使用一个或多个CPU</p><p>并行是同一时间动手做多件事情的能力，4核CPU同时执行4个线程</p><hr><p><strong>面试官</strong>：说一下线程和进程的区别？</p><p><strong>候选人：</strong></p><p>嗯，好~</p><ul><li>进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务</li><li>不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)</li></ul><hr><p><strong>面试官</strong>：如果在java中创建线程有哪些方式？</p><p><strong>候选人：</strong></p><p>在java中一共有四种常见的创建方式，分别是：继承Thread类、实现runnable接口、实现Callable接口、线程池创建线程。通常情况下，我们项目中都会采用线程池的方式创建线程。</p><p><strong>面试官</strong>：好的，刚才你说的runnable 和 callable 两个接口创建线程有什么不同呢？</p><p><strong>候选人：</strong></p><p>是这样的~</p><p>最主要的两个线程一个是有返回值，一个是没有返回值的。</p><p>Runnable 接口run方法无返回值；Callable接口call方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果</p><p>还有一个就是，他们异常处理也不一样。Runnable接口run方法只能抛出运行时异常，也无法捕获处理；Callable接口call方法允许抛出异常，可以获取异常信息</p><p>在实际开发中，如果需要拿到执行的结果，需要使用Callalbe接口创建线程，调用FutureTask.get()得到可以得到返回值，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。</p><hr><p><strong>面试官</strong>：线程包括哪些状态，状态之间是如何变化的？</p><p><strong>候选人：</strong></p><p>在JDK中的Thread类中的枚举State里面定义了6中线程的状态分别是：新建、可运行、终结、阻塞、等待和有时限等待六种。</p><p>关于线程的状态切换情况比较多。我分别介绍一下</p><p>当一个线程对象被创建，但还未调用 start 方法时处于<strong>新建</strong>状态，调用了 start 方法，就会由<strong>新建</strong>进入<strong>可运行</strong>状态。如果线程内代码已经执行完毕，由<strong>可运行</strong>进入<strong>终结</strong>状态。当然这些是一个线程正常执行情况。</p><p>如果线程获取锁失败后，由<strong>可运行</strong>进入 Monitor 的阻塞队列<strong>阻塞</strong>，只有当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的<strong>阻塞</strong>线程，唤醒后的线程进入<strong>可运行</strong>状态</p><p>如果线程获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从<strong>可运行</strong>状态释放锁<strong>等待</strong>状态，当其它持锁线程调用 notify() 或 notifyAll() 方法，会恢复为<strong>可运行</strong>状态</p><p>还有一种情况是调用 sleep(long) 方法也会从<strong>可运行</strong>状态进入<strong>有时限等待</strong>状态，不需要主动唤醒，超时时间到自然恢复为<strong>可运行</strong>状态</p><p><strong>面试官</strong>：嗯，好的，刚才你说的线程中的 wait 和 sleep方法有什么不同呢？</p><p><strong>候选人：</strong></p><p>它们两个的相同点是都可以让当前线程暂时放弃 CPU 的使用权，进入阻塞状态。</p><p>不同点主要有三个方面：</p><p>第一：方法归属不同</p><p>sleep(long) 是 Thread 的静态方法。而 wait()，是 Object 的成员方法，每个对象都有</p><p>第二：线程醒来时机不同</p><p>线程执行 sleep(long) 会在等待相应毫秒后醒来，而 wait() 需要被 notify 唤醒，wait() 如果不唤醒就一直等下去</p><p>第三：锁特性不同</p><p>wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制</p><p>wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（相当于我放弃 cpu，但你们还可以用）</p><p>而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（相当于我放弃 cpu，你们也用不了）</p><p><strong>面试官</strong>：好的，我现在举一个场景，你来分析一下怎么做，新建 T1、T2、T3 三个线程，如何保证它们按顺序执行？</p><p><strong>候选人：</strong></p><p>嗯~~，我思考一下 （适当的思考或想一下属于正常情况，脱口而出反而太假[背诵痕迹]）</p><p>可以这么做，在多线程中有多种方法让线程按特定顺序执行，可以用线程类的<strong>join</strong>()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。</p><p>比如说：</p><p>使用join方法，T3调用T2，T2调用T1，这样就能确保T1就会先完成而T3最后完成</p><p><strong>面试官</strong>：在我们使用线程的过程中，有两个方法。线程的 run()和 start()有什么区别？</p><p><strong>候选人：</strong></p><p>start方法用来启动线程，通过该线程调用run方法执行run方法中所定义的逻辑代码。start方法只能被调用一次。run方法封装了要被线程执行的代码，可以被调用多次。</p><p><strong>面试官</strong>：那如何停止一个正在运行的线程呢？</p><p><strong>候选人</strong>：</p><p>有三种方式可以停止线程</p><p>第一：可以使用退出标志，使线程正常退出，也就是当run方法完成后线程终止，一般我们加一个标记</p><p>第二：可以使用线程的stop方法强行终止，不过一般不推荐，这个方法已作废</p><p>第三：可以使用线程的interrupt方法中断线程，内部其实也是使用中断标志来中断线程</p><p>我们项目中使用的话，建议使用第一种或第三种方式中断线程</p></blockquote><h3 id="6-2-线程中并发锁"><a href="#6-2-线程中并发锁" class="headerlink" title="6.2 线程中并发锁"></a>6.2 线程中并发锁</h3><blockquote><p><strong>面试官</strong>：讲一下synchronized关键字的底层原理？</p><p><strong>候选人</strong>：</p><p>嗯~~好的，</p><p>synchronized 底层使用的JVM级别中的Monitor 来决定当前线程是否获得了锁，如果某一个线程获得了锁，在没有释放锁之前，其他线程是不能或得到锁的。synchronized 属于悲观锁。</p><p>synchronized 因为需要依赖于JVM级别的Monitor ，相对性能也比较低。</p><p><strong>面试官</strong>：好的，你能具体说下Monitor 吗？</p><p><strong>候选人</strong>：</p><p>monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因</p><p>monitor内部维护了三个变量</p><ul><li><p>WaitSet：保存处于Waiting状态的线程</p></li><li><p>EntryList：保存处于Blocked状态的线程</p></li><li><p>Owner：持有锁的线程</p></li></ul><p>只有一个线程获取到的标志就是在monitor中设置成功了Owner，一个monitor中只能有一个Owner</p><p>在上锁的过程中，如果有其他线程也来抢锁，则进入EntryList 进行阻塞，当获得锁的线程执行完了，释放了锁，就会唤醒EntryList 中等待的线程竞争锁，竞争的时候是非公平的。</p><p><strong>面试官</strong>：好的，那关于synchronized 的锁升级的情况了解吗？</p><p><strong>候选人</strong>：</p><p>嗯，知道一些（要谦虚）</p><p>Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。</p><p>重量级锁：底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。</p><p>轻量级锁：线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性</p><p>偏向锁：一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark word中是否是自己的线程id即可，而不是开销相对较大的CAS命令</p><p>一旦锁发生了竞争，都会升级为重量级锁</p><p><strong>面试官</strong>：好的，刚才你说了synchronized它在高并发量的情况下，性能不高，在项目该如何控制使用锁呢？</p><p><strong>候选人</strong>：</p><p>嗯，其实，在高并发下，我们可以采用ReentrantLock来加锁。</p><p><strong>面试官</strong>：嗯，那你说下ReentrantLock的使用方式和底层原理？</p><p><strong>候选人</strong>：</p><p>好的，</p><p>ReentrantLock是一个可重入锁:，调用 lock 方 法获取了锁之后，再次调用 lock，是不会再阻塞，内部直接增加重入次数 就行了，标识这个线程已经重复获取一把锁而不需要等待锁的释放。</p><p>ReentrantLock是属于juc报下的类，属于api层面的锁，跟synchronized一样，都是悲观锁。通过lock()用来获取锁，unlock()释放锁。</p><p>它的底层实现原理主要利用<strong>CAS+AQS队列</strong>来实现。它支持公平锁和非公平锁，两者的实现类似</p><p>构造方法接受一个可选的公平参数（<strong>默认非公平锁</strong>），当设置为true时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高。</p><p><strong>面试官</strong>：好的，刚才你说了CAS和AQS，你能介绍一下吗？</p><p><strong>候选人</strong>：</p><p>好的。</p><p>CAS的全称是： Compare And Swap(比较再交换);它体现的一种乐观锁的思想，在无锁状态下保证线程操作数据的原子性。</p><ul><li><p>CAS使用到的地方很多：AQS框架、AtomicXXX类</p></li><li><p>在操作共享变量的时候使用的自旋锁，效率上更高一些</p></li><li><p>CAS的底层是调用的Unsafe类中的方法，都是操作系统提供的，其他语言实现</p></li></ul><p>AQS的话，其实就一个jdk提供的类AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架。</p><p>内部有一个属性 state 属性来表示资源的状态，默认state等于0，表示没有获取锁，state等于1的时候才标明获取到了锁。通过cas 机制设置 state 状态</p><p>在它的内部还提供了基于 FIFO 的等待队列，是一个双向列表，其中</p><ul><li><p>tail 指向队列最后一个元素</p></li><li><p>head  指向队列中最久的一个元素</p></li></ul><p>其中我们刚刚聊的ReentrantLock底层的实现就是一个AQS。</p><p><strong>面试官</strong>：synchronized和Lock有什么区别 ? </p><p><strong>候选人</strong>：</p><p>嗯~~，好的，主要有三个方面不太一样</p><p>第一，语法层面</p><ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现，退出同步代码块锁会自动释放</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现，需要手动调用 unlock 方法释放锁</li></ul><p>第二，功能层面</p><ul><li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量，同时Lock 可以实现不同的场景，如 ReentrantLock， ReentrantReadWriteLock</li></ul><p>第三，性能层面</p><ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul><p>统合来看，需要根据不同的场景来选择不同的锁的使用。</p><hr><p><strong>面试官</strong>：死锁产生的条件是什么？</p><p><strong>候选人</strong>：</p><p>嗯，是这样的，一个线程需要同时获取多把锁，这时就容易发生死锁，举个例子来说：</p><p>t1 线程获得A对象锁，接下来想获取B对象的锁</p><p>t2 线程获得B对象锁，接下来想获取A对象的锁 </p><p>这个时候t1线程和t2线程都在互相等待对方的锁，就产生了死锁</p><p><strong>面试官</strong>：那如果产出了这样的，如何进行死锁诊断？</p><p><strong>候选人</strong>：</p><p>这个也很容易，我们只需要通过jdk自动的工具就能搞定</p><p>我们可以先通过jps来查看当前java程序运行的进程id</p><p>然后通过jstack来查看这个进程id，就能展示出来死锁的问题，并且，可以定位代码的具体行号范围，我们再去找到对应的代码进行排查就行了。</p><hr><p><strong>面试官</strong>：请谈谈你对 volatile 的理解</p><p><strong>候选人</strong>：</p><p>嗯~~</p><p>volatile 是一个关键字，可以修饰类的成员变量、类的静态成员变量，主要有两个功能</p><p>第一：保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。</p><p>第二： 禁止进行指令重排序，可以保证代码执行有序性。底层实现原理是，添加了一个<strong>内存屏障</strong>，通过插入内存屏障禁止在内存屏障<strong>前后</strong>的指令执行重排序优化</p><hr><p><strong>本文作者</strong>：接《集合相关面试题》</p><p><strong>面试官</strong>：那你能聊一下ConcurrentHashMap的原理吗？</p><p><strong>候选人</strong>：</p><p>嗯好的，</p><p>ConcurrentHashMap 是一种线程安全的高效Map集合，jdk1.7和1.8也做了很多调整。</p><ul><li>JDK1.7的底层采用是<strong>分段的数组</strong>+<strong>链表</strong> 实现</li><li>JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表&#x2F;红黑二叉树。</li></ul><p>在jdk1.7中 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一 种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构 的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修 改时，必须首先获得对应的 Segment的锁。</p><p>Segment 是一种可重入的锁 ReentrantLock，每个 Segment 守护一个HashEntry 数组里得元 素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 锁</p><p>在jdk1.8中的ConcurrentHashMap 做了较大的优化，性能提升了不少。首先是它的数据结构与jdk1.8的hashMap数据结构完全一致。其次是放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保 证并发安全进行实现，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲 突，就不会产生并发 , 效率得到提升</p></blockquote><h3 id="6-3-线程池"><a href="#6-3-线程池" class="headerlink" title="6.3 线程池"></a>6.3 线程池</h3><blockquote><p><strong>面试官</strong>：线程池的种类有哪些？</p><p><strong>候选人</strong>：</p><p>嗯！是这样</p><p>在jdk中默认提供了4中方式创建线程池</p><p>第一个是：newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回 收空闲线程，若无可回收，则新建线程。 </p><p>第二个是：newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列 中等待。 </p><p>第三个是：newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。 </p><p>第四个是：newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><p><strong>面试官</strong>：线程池的核心参数有哪些？</p><p><strong>候选人</strong>：</p><p>在线程池中一共有7个核心参数：</p><ol><li><p>corePoolSize 核心线程数目 - 池中会保留的最多线程数</p></li><li><p>maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目</p></li><li><p>keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放</p></li><li><p>unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等</p></li><li><p>workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务</p></li><li><p>threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等</p></li><li><p>handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略</p></li></ol><p>  在拒绝策略中又有4中拒绝策略</p><p>  当线程数过多以后，第一种是抛异常、第二种是由调用者执行任务、第三是丢弃当前的任务，第四是丢弃最早排队任务。默认是直接抛异常。</p><p><strong>面试官</strong>：如何确定核心线程池呢？</p><p><strong>候选人</strong>：</p><p>是这样的，我们公司当时有一些规范，为了减少线程上下文的切换，要根据当时部署的服务器的CPU核数来决定，我们规则是：CPU核数+1就是最终的核心线程数。</p><p><strong>面试官</strong>：线程池的执行原理知道吗？</p><p><strong>候选人</strong>：</p><p>嗯~，它是这样的</p><p>首先判断线程池里的核心线程是否都在执行任务，如果不是则创建一个新的工作线程来执行任务。如果核心线程都在执行任务，则线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队 列里。如果工作队列满了，则判断线程池里的线程是否都处于工作状态，如果没有，则创建一个新的工作线程来执行任 务。如果已经满了，则交给拒绝策略来处理这个任务。</p><p><strong>面试官</strong>：为什么不建议使用Executors创建线程池呢？</p><p><strong>候选人</strong>：</p><p>好的，其实这个事情在阿里提供的最新开发手册《Java开发手册-嵩山版》中也提到了</p><p>主要原因是如果使用Executors创建线程池的话，它允许的请求队列默认长度是Integer.MAX_VALUE，这样的话，有可能导致堆积大量的请求，从而导致OOM（内存溢出）。</p><p>所以，我们一般推荐使用ThreadPoolExecutor来创建线程池，这样可以明确规定线程池的参数，避免资源的耗尽。</p></blockquote><h3 id="6-4-线程使用场景问题"><a href="#6-4-线程使用场景问题" class="headerlink" title="6.4 线程使用场景问题"></a>6.4 线程使用场景问题</h3><blockquote><p><strong>面试官</strong>：如果控制某一个方法允许并发访问线程的数量？</p><p><strong>候选人</strong>：</p><p>嗯~~，我想一下</p><p>在jdk中提供了一个Semaphore[seməfɔːr]类（信号量）</p><p>它提供了两个方法，semaphore.acquire() 请求信号量，可以限制线程的个数，是一个正数，如果信号量是-1,就代表已经用完了信号量，其他线程需要阻塞了</p><p>第二个方法是semaphore.release()，代表是释放一个信号量，此时信号量的个数+1</p><p><strong>面试官</strong>：好的，那该如何保证Java程序在多线程的情况下执行安全呢？</p><p><strong>候选人</strong>：</p><p>嗯，刚才讲过了导致线程安全的原因，如果解决的话，jdk中也提供了很多的类帮助我们解决多线程安全的问题，比如：</p><ul><li>JDK Atomic开头的原子类、synchronized、LOCK，可以解决原子性问题</li><li>synchronized、volatile、LOCK，可以解决可见性问题</li><li>Happens-Before 规则可以解决有序性问题</li></ul><hr><p><strong>面试官</strong>：你在项目中哪里用了多线程？</p><p><strong>候选人</strong>：</p><p>嗯~~，我想一下当时的场景[根据自己简历上的模块设计多线程场景]</p><p>参考场景一：</p><p>es数据批量导入</p><p>在我们项目上线之前，我们需要把数据量的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），如果分批执行的话，耗时也太久了。所以，当时我就想到可以使用线程池的方式导入，利用CountDownLatch+Future来控制，就能大大提升导入的时间。</p><p>参考场景二：</p><p>在我做那个xx电商网站的时候，里面有一个数据汇总的功能，在用户下单之后需要查询订单信息，也需要获得订单中的商品详细信息（可能是多个），还需要查看物流发货信息。因为它们三个对应的分别三个微服务，如果一个一个的操作的话，互相等待的时间比较长。所以，我当时就想到可以使用线程池，让多个线程同时处理，最终再汇总结果就可以了，当然里面需要用到Future来获取每个线程执行之后的结果才行</p><p>参考场景三：</p><p>《黑马头条》项目中使用的</p><p>我当时做了一个文章搜索的功能，用户输入关键字要搜索文章，同时需要保存用户的搜索记录（搜索历史），这块我设计的时候，为了不影响用户的正常搜索，我们采用的异步的方式进行保存的，为了提升性能，我们加入了线程池，也就说在调用异步方法的时候，直接从线程池中获取线程使用</p></blockquote><h3 id="6-5-其他"><a href="#6-5-其他" class="headerlink" title="6.5 其他"></a>6.5 其他</h3><blockquote><p><strong>面试官</strong>：谈谈你对ThreadLocal的理解</p><p><strong>候选人</strong>：</p><p>嗯，是这样的~~</p><p>ThreadLocal 主要功能有两个，第一个是可以<strong>实现资源对象的线程隔离</strong>，让每个线程各用各的资源对象，避免争用引发的线程安全问题，第二个是实现了<strong>线程内的资源共享</strong></p><p><strong>面试官</strong>：好的，那你知道ThreadLocal的底层原理实现吗？</p><p><strong>候选人</strong>：</p><p>嗯，知道一些~</p><p>在ThreadLocal内部维护了一个一个 ThreadLocalMap 类型的成员变量，用来存储资源对象</p><p>当我们调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中</p><p>当调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值</p><p>当调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值</p><p><strong>面试官</strong>：好的，那关于ThreadLocal会导致内存溢出这个事情，了解吗？</p><p><strong>候选人</strong>：</p><p>嗯，我之前看过源码，我想一下~~</p><p>是应为ThreadLocalMap 中的 key 被设计为弱引用，它是被动的被GC调用释放key，不过关键的是只有key可以得到内存释放，而value不会，因为value是一个强引用。</p><p>在使用ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收，建议主动的remove 释放 key，这样就能避免内存溢出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2023/12/30/Study-ElasticSearch/"/>
      <url>/2023/12/30/Study-ElasticSearch/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文学习自<a href="https://www.bilibili.com/video/BV1LQ4y127n4">https://www.bilibili.com/video/BV1LQ4y127n4</a></p><p>参考自：<a href="https://cyborg2077.github.io/2022/12/24/ElasticSearch/">https://cyborg2077.github.io/2022/12/24/ElasticSearch/</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>智学轩在线教育平台</title>
      <link href="/2023/12/29/Project-%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/"/>
      <url>/2023/12/29/Project-%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/PlanBBBBB/zhixuexuan">https://github.com/PlanBBBBB/zhixuexuan</a></p><h1 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h1><p><strong>2023.09 - 2023.11</strong></p><p><strong>智学轩在线教学平台</strong>       </p><p><strong>主要成员</strong></p><p><strong>项目描述：</strong> 本项目是一个面向大众用户职业技能学习的在线教育平台，提供了职业技能培训相关课程。项目基于B2B2C的业务模式，包括门户、个人学习中心、教学机构管理平台、运营平台、社交系统和系统管理6大模块。</p><p><strong>技术概述：</strong> 本项目采用SpringCloud微服务架构，使用Nacos实现服务的注册与发现，统一配置文件管理，Gateway网关实现动态路由以及负载均衡，使用Redis提高数据读取和检索效率，使用MinIO进行分布式文件存储，同时使用XXL-Job完成分布式任务调度。</p><p><strong>技术栈：</strong> SpringCloud + SpringSecurity + Nacos + Redis + MySQL + Mybatis + RabbitMQ + Elasticsearch + MinlO + XXL-Job+ Nginx+Vue</p><p><strong>项目职责：</strong></p><ol><li>负责课程内容管理模块的设计与开发，使Redis缓存课程信息减轻数据库压力，同时解决缓存穿透，缓存击穿、数据一致性等问题。</li><li>使用Elasticsearch为课程建立索引，提高课程检索效率，基于本地消息表加XXL-Job任务调度实现<strong>分布式事务控制</strong>。</li><li>使用<strong>线程池</strong>实现任务的并行处理，提高执行效率，同时基于消息表的状态字段来避免任务重复执行，保证任务的幂等性。</li><li>负责媒体资源管理模块的开发，将视频，图片，文档等媒体资源上传到MinIO分布式文件系统，实现大文件<strong>断点续传</strong>。</li><li>参与订单管理模块的开发，实现课程购买，代金券抢购等业务功能，使用RabbitMQ进行结果通知，基于延迟队列处理未支付订单。</li><li>使用RabbitMQ进行流量削峰，优化代金券抢购，同时解决了代金券超卖和重复下单问题，基于Redis+Lua脚本实现。</li><li>对各模块进行统一异常处理，自定义项目异常，对不同异常编写不同的处理逻辑，基于JSR303框架实现请求参数的合法性校验。</li><li>负责搭建Redis主从集群，加入Sentinel机制，实观读写分离，提高系统的高可用、高并发能力。</li></ol><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><strong>使用设计模式优化代码：</strong></p><p>登录、支付：（工厂+策略）<br>提供了很多种策略，都让spring容器管理<br>提供一个工厂：准备策略对象，根据参数提供对象</p><hr><p>下订单：（责任链）</p><p>参数校验 -&gt; 补充订单信息 -&gt; 计算相关信息 -&gt; 订单入库</p><h2 id="第7点"><a href="#第7点" class="headerlink" title="第7点"></a>第7点</h2><ol><li><p>系统如何处理异常？</p><ul><li>我们自定义一个统一的异常处理器去捕获并处理异常</li><li>使用控制器增强注解**@ControllerAdvice<strong>（也可以用@RestControllerAdvice）和异常处理注解</strong>@ExceptionHandler**来实现</li></ul></li><li><p>如何处理自定义异常？</p><ul><li>程序在编写代码时，根据校验结果主动抛出自定义异常类对象，<strong>抛出异常时指定详细的异常信息</strong>，异常处理器捕获异常信息记录、异常日志，<strong>并响应给用户</strong></li></ul></li><li><p>如何处理未知异常？</p><ul><li>接口执行过程中的一些运行时异常也会<strong>被异常处理器统一捕获</strong>，记录异常日志，统一响应给用户500错误</li><li>在异常处理其中还可以对某个异常类型进行单独处理（使用@ExceptionHandler来声明要捕获的异常类型）</li></ul></li><li><p>请求参数的合法性如何校验？</p><ul><li>使用基于<code>JSR-303</code>的校验框架实现，<code>SpringBoot</code>提供了<code>JSR-303</code>的支持，它就是<code>spring-boot-starter-validation</code>，它包括了很多校验规则，只需要在模型类中通过注解指定校验规则，在<code>Controller</code>方法上开启校验。</li></ul></li></ol><h2 id="第4点"><a href="#第4点" class="headerlink" title="第4点"></a>第4点</h2><h3 id="断点续传是怎么做的"><a href="#断点续传是怎么做的" class="headerlink" title="断点续传是怎么做的?"></a>断点续传是怎么做的?</h3><p>我们是基于分块上传的模式实现断点续传的需求，当文件上传一部分断网后前边已经上传过的不再上传。</p><ul><li>前端对文件分块</li><li>前端使用多线程一块一块上传，上传前给服务端发一个消息校验该分块是否上传，如果已上传则不再上传。</li><li>等所有分块上传完毕，服务端合并所有分块，校验文件的完整性（<strong>用md5值去校验</strong>）。因为分块全部上传到了服务器，服务器将所有分块按顺序进行合并，就是写每个分块文件内容按顺序依次写入一个文件中。使用字节流去读写文件。</li><li>前端给服务传了一个md5值，服务端合并文件后计算合并后文件的md5是否和前端传的一样，如果一样则说文件完整，如果不一样说明可能由于网络丢包导致文件不完整，这时上传失败需要重新上传</li></ul><h3 id="分块文件清理问题"><a href="#分块文件清理问题" class="headerlink" title="分块文件清理问题?"></a>分块文件清理问题?</h3><p>上传一个文件进行分块上传，上传一半不传了，之前上传到minio的分块文件要清理吗? 怎么做的?</p><ul><li><p>在数据库中有一张文件表记录minio中存储的文件信息。</p></li><li><p>文件开始上传时会写入文件表，状态为上传中，上传完成会更新状态为上传完成</p></li><li><p>当一个文件传了一半不再上传了说明该文件没有上传完成，会有<strong>定时任务</strong>去查询文件表中的记录，如果文件未上传完成则删除minio中没有上传成功的文件目录。</p></li></ul><h2 id="第2点和第3点"><a href="#第2点和第3点" class="headerlink" title="第2点和第3点"></a>第2点和第3点</h2><h3 id="xxl-job的工作原理是什么？xxl-job是什么？"><a href="#xxl-job的工作原理是什么？xxl-job是什么？" class="headerlink" title="xxl-job的工作原理是什么？xxl-job是什么？"></a>xxl-job的工作原理是什么？xxl-job是什么？</h3><ul><li><p>xxl-job分布式任务调度服务由调度中心和执行器组成，调度中心负责按任务调度策略向执行器下发任务，执行器负责接收任务，执行任务</p><ol><li><p>首先部署并启动xxl-job调度中心（一个java工程，打成jar包可以放到虚拟机上运行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar xxl-job-admin...  &amp; </span><br></pre></td></tr></table></figure></li><li><p>在微服务中添加xxl-job依赖，在微服务中配置执行器</p><ul><li>依赖</li><li>yml配置</li><li>配置类</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动微服务，执行器向调度中心上报自己</p></li><li><p>在微服务中写一个任务方法，并用xxl-job的注解去标记执行任务的方法名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XxlJob(&quot;testJob&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob</span><span class="params">()</span> &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始执行.......&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在调度中心配置任务调度策略，调度策略就是每个多长时间执行，又或者是每天&#x2F;每月的固定时间去执行等</p></li><li><p>在调度中心启动任务</p></li><li><p>调度中心根据任务调度策略，到达时间就开始下发任务给执行器</p></li><li><p>执行器收到任务就开始执行任务</p></li></ol></li></ul><h3 id="如何保证任务不重复执行？"><a href="#如何保证任务不重复执行？" class="headerlink" title="如何保证任务不重复执行？"></a>如何保证任务不重复执行？</h3><ol><li>调度中心按<strong>分片广播</strong>的方式去下发任务</li><li>执行器收到作业分片广播的参数：分片总数(shardTotal)和分片序号(shardIndex)，计算<code>任务id % 分片总数</code>(taskId % shardTotal)，如果结果等于分片序号，就去执行这个任务(taskId % shardTotal &#x3D; shardIndex)。这样就可以保证不同的执行器执行不同的任务</li><li>配置调度过期策略为<strong>忽略</strong>，避免同一个执行器多次重复执行同一个任务</li><li>配置任务阻塞处理策略为<strong>丢弃后续调度</strong>，注意：丢弃也没事，下一次调度还可以执行</li><li>另外还要保证任务处理的幂等性，执行过的任务可以打一个状态标记已完成（上面的代码设置status&#x3D;2即为完成），下次再次调度该任务时，判断该任务已完成，就不再执行</li></ol><h3 id="任务幂等性如何保证？"><a href="#任务幂等性如何保证？" class="headerlink" title="任务幂等性如何保证？"></a>任务幂等性如何保证？</h3><ul><li><p>幂等性描述的是一次和多次请求某一个资源，对于资源本身，应该返回同样的结果</p></li><li><p>幂等性是为了解决重复提交问题，例如：恶意刷单，重复支付等</p></li><li><p>解决幂等性的常用方案</p><ol><li>数据库约束，例如：唯一索引、主键</li><li>乐观锁：常用于数据库，更新数据时，根据乐观锁的状态去更新</li><li>唯一序列号，请求前生成的唯一序列号，携带序列号去请求，执行时在redis记录该序列号，用于表示该序列号请求已经执行过了，如果相同的序列号再次来执行，则说明是重复执行。</li></ol><p>本项目的解决方式是<mark><strong>在数据库中添加状态处理字段</strong></mark>，视频处理完成，则更新该字段为已完成，执行视频处理之前判断状态是否为已完成，若已完成则不处理</p></li></ul><h3 id="什么是分布式事务？"><a href="#什么是分布式事务？" class="headerlink" title="什么是分布式事务？"></a>什么是分布式事务？</h3><ul><li>由多个服务通过网络完成一个事务叫分布式事务</li><li>例如：课程发布操作不仅要在本地数据库插入课程信息，还要请求索引服务将课程信息添加到索引库，这里就存在分布式事务</li></ul><h3 id="分布式事务控制的方案有哪些？"><a href="#分布式事务控制的方案有哪些？" class="headerlink" title="分布式事务控制的方案有哪些？"></a>分布式事务控制的方案有哪些？</h3><ul><li>首先根据CAP原理决定我们的需求，是要实现CP还是AP</li><li>实现CP就是要实现强一致性，可以使用Seata框架基于AT、TCC模式去实现</li><li>我们项目中大部分实现的是AP，使用本地消息表加任务调度，保证分布式事务最终数据一致性</li></ul><h3 id="⭐⭐⭐如何使用本地消息表加任务调度完成分布式事务控制？"><a href="#⭐⭐⭐如何使用本地消息表加任务调度完成分布式事务控制？" class="headerlink" title="⭐⭐⭐如何使用本地消息表加任务调度完成分布式事务控制？"></a>⭐⭐⭐<strong>如何使用本地消息表加任务调度完成分布式事务控制？</strong></h3><ul><li>以<mark><strong>发布课程</strong></mark>为例进行说明，发布课程需要在内容管理数据库中写课程发布表记录，同时将课程信息同步到Redis、ElasticSearch、MinIO，这里存在分布式事务<ol><li>点击发布课程，使用本地事务向发布表写一个课程信息，同时向消息表写一个消息记录（标记发布的是哪门课程）</li><li>xxl-job的调度中心使用分片广播模式向执行器下发任务，开始扫描消息表，查询到了待处理消息</li><li>根据消息的内容将课程信息同步到Redis、ElasticSearch、MinIO</li><li>任务完成，删除消息表记录。整个分布式事务完成，最终保证了一致性</li></ol></li></ul><p><img src="/../assets/%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/image-20231229222033846.png" alt="image-20231229222033846"></p><hr><p><img src="/../assets/%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/image-20231229222007464.png" alt="image-20231229222007464"></p><h3 id="关于线程池的问题"><a href="#关于线程池的问题" class="headerlink" title="关于线程池的问题"></a>关于线程池的问题</h3><p>在使用<mark><strong>线程池实现任务</strong></mark>的并行处理、并结合消息表状态字段确保任务的幂等性，<mark><strong>可能涉及以下一些任务</strong></mark>：</p><ol><li><strong>课程内容更新：</strong><ul><li>当有<mark><strong>新的课程内容需要更新时，可以通过异步任务进行并行处理</strong></mark>，使用线程池来提高处理效率。</li><li>通过消息表记录课程更新任务的状态，避免重复执行，确保任务的幂等性。这可以包括课程信息的修改、添加新的教材等。</li></ul></li><li><mark><strong>媒体资源上传与处理</mark>：</strong>（本项目）<ul><li>媒体资源包括视频、图片、文档等，上传和处理这些资源可能是一个较为耗时的任务。</li><li><mark><strong>使用线程池实现并行处理上传任务（数据汇总）</strong></mark>，同时通过消息表记录上传任务的状态，确保幂等性。这可以包括将媒体资源上传到MinIO分布式文件系统，并处理大文件的断点续传。</li><li>数据汇总：如果所有接口（或部分接口）的没有依赖关系，就可以<mark><strong>使用线程池+future来提升性能</strong></mark></li></ul></li><li><strong>订单处理与通知：</strong><ul><li>订单管理模块可能需要处理用户购买课程的订单，进行库存扣减、支付状态更新等操作。</li><li>使用线程池进行订单处理任务的并行处理，通过消息表记录任务状态，确保订单处理的幂等性。同时，使用RabbitMQ进行结果通知，基于延迟队列处理未支付订单，以提高系统的稳定性。</li></ul></li></ol><p>总体而言，这些任务的异步处理和并行执行，通过线程池的机制可以有效提高系统的响应速度和处理能力。消息表的引入则有助于确保任务的幂等性，避免由于重复执行任务而引发的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2023/12/23/%E9%9D%A2%E8%AF%95-%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2023/12/23/%E9%9D%A2%E8%AF%95-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><img src="/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20231223180737280.png" alt="image-20231223180737280"></p><h1 id="Spring-Cloud-5大组件有哪些？"><a href="#Spring-Cloud-5大组件有哪些？" class="headerlink" title="Spring Cloud 5大组件有哪些？"></a>Spring Cloud 5大组件有哪些？</h1><p>早期我们一般认为的Spring Cloud五大组件是 </p><ul><li>Eureka   : 注册中心</li><li>Ribbon  : 负载均衡</li><li>Feign     : 远程调用</li><li>Hystrix :  服务熔断</li><li>Zuul&#x2F;Gateway  : 网关</li></ul><p>随着SpringCloudAlibba在国内兴起 , 我们项目中使用了一些阿里巴巴的组件 </p><ul><li><p>注册中心&#x2F;配置中心 Nacos</p></li><li><p>负载均衡 Ribbon</p></li><li><p>服务调用 Feign</p></li><li><p>服务保护 sentinel</p></li><li><p>服务网关 Gateway</p></li></ul><h1 id="服务注册和发现是什么意思？Spring-Cloud-如何实现服务注册发现？"><a href="#服务注册和发现是什么意思？Spring-Cloud-如何实现服务注册发现？" class="headerlink" title="服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？"></a>服务注册和发现是什么意思？Spring Cloud 如何实现服务注册发现？</h1><p><strong>主要三块大功能，分别是服务注册（提供者） 、服务发现（消费者）、服务状态监控（nacos）</strong></p><p>我们当时项目采用的nacos作为注册中心，这个是spring cloud体系中的一个核心组件</p><p><strong>服务注册</strong>：<mark><strong>服务提供者</strong></mark>需要把自己的信息注册到nacos，由nacos来保存这些信息，比如服务名称、ip、端口等等</p><p><strong>服务发现</strong>：消费者向nacos拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用</p><p><strong>服务监控</strong>：服务提供者会每隔30秒向nacos发送心跳，报告健康状态，如果nacos服务90秒没接收到心跳，从nacos中剔除</p><p><img src="/../assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20231230195313133.png" alt="image-20231230195313133"></p><h1 id="nacos与eureka的区别？"><a href="#nacos与eureka的区别？" class="headerlink" title="nacos与eureka的区别？"></a>nacos与eureka的区别？</h1><p>项目就是采用的nacos作为注册中心，选择nacos还要一个重要原因就是它支持配置中心，不过nacos作为注册中心，也比eureka要方便好用一些，主要相同不同点在于几点：</p><ul><li>共同点</li></ul><p>Nacos与eureka都支持服务注册和服务拉取，都支持服务提供者心跳方式做健康检测</p><ul><li>Nacos与Eureka的区别</li></ul><p>①Nacos支持<strong>服务端主动检测提供者状态</strong>：临时实例采用心跳模式，非临时实例采用主动检测模式</p><p>②临时实例心跳不正常会被剔除，非临时实例则不会被剔除</p><p>③Nacos支持服务列表变更的<strong>消息推送模式</strong>，服务列表更新更及时</p><p>④Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p><h1 id="项目的负载均衡如何实现的"><a href="#项目的负载均衡如何实现的" class="headerlink" title="项目的负载均衡如何实现的 ?"></a>项目的负载均衡如何实现的 ?</h1><blockquote><p>ribbon是集成在消费端的，因为已经拉取到了服务端的列表</p></blockquote><p>在服务调用过程中的负载均衡一般使用SpringCloud的Ribbon 组件实现  , Feign的底层已经自动集成了Ribbon  , 使用起来非常简单</p><p>当发起远程调用时，ribbon先从注册中心拉取服务地址列表，然后按照一定的路由策略选择一个发起远程调用，一般的调用策略是轮询</p><h1 id="Ribbon负载均衡策略有哪些"><a href="#Ribbon负载均衡策略有哪些" class="headerlink" title="Ribbon负载均衡策略有哪些 ?"></a>Ribbon负载均衡策略有哪些 ?</h1><ul><li><p>RoundRobinRule：<mark>简单轮询</mark>服务列表来选择服务器</p></li><li><p>WeightedResponseTimeRule：按照<mark>权重</mark>来选择服务器，响应时间越长，权重越小</p></li><li><p>RandomRule：<mark>随机</mark>选择一个可用的服务器</p></li><li><p>ZoneAvoidanceRule：<mark>区域</mark>敏感策略，以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做<mark>轮询</mark>(默认)</p></li></ul><h1 id="如果想自定义负载均衡策略如何实现"><a href="#如果想自定义负载均衡策略如何实现" class="headerlink" title="如果想自定义负载均衡策略如何实现 ?"></a>如果想自定义负载均衡策略如何实现 ?</h1><p>提供了两种方式：</p><ol><li><p>创建类实现IRule接口，可以指定负载均衡策略，这个是全局的，对所有的远程调用都起作用</p></li><li><p>在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略，只是对配置的这个服务生效远程调用</p></li></ol><h1 id="什么是服务雪崩，怎么解决这个问题？"><a href="#什么是服务雪崩，怎么解决这个问题？" class="headerlink" title="什么是服务雪崩，怎么解决这个问题？"></a>什么是服务雪崩，怎么解决这个问题？</h1><p>服务雪崩是指<mark>一个服务失败，导致整条链路的服务都失败</mark>的情形，一般我们在项目解决的话就是两种方案，第一个是服务降级，第二个是服务熔断，如果流量太大的话，可以考虑限流</p><p><strong>服务降级</strong>：服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃，一般在实际开发中与feign接口整合，编写降级逻辑</p><p><strong>服务熔断</strong>：默认关闭，需要手动打开，如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔 5 秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求</p><h1 id="你们的微服务是怎么监控的？"><a href="#你们的微服务是怎么监控的？" class="headerlink" title="你们的微服务是怎么监控的？"></a>你们的微服务是怎么监控的？</h1><p>我们项目中采用的skywalking进行监控的</p><ol><li><p>skywalking主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。</p></li><li><p>我们还在skywalking设置了告警规则，特别是在项目上线以后，如果报错，我们分别设置了可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复</p></li></ol><h1 id="你们项目中有没有做过限流-怎么做的"><a href="#你们项目中有没有做过限流-怎么做的" class="headerlink" title="你们项目中有没有做过限流 ? 怎么做的 ?"></a>你们项目中有没有做过限流 ? 怎么做的 ?</h1><p>我当时做的xx项目，采用就是微服务的架构，为了解决这些突发流量，所以采用了限流。</p><p>【版本1】</p><p>我们当时采用的<strong>nginx</strong>限流操作，nginx使用的<mark><strong>漏桶算法</strong></mark>来实现过滤，让请求以固定的速率处理请求，可以应对突发流量，我们控制的速率是按照ip进行限流，限制的流量是每秒20</p><p>【版本2】</p><p>我们当时采用的是<strong>spring cloud gateway</strong>中支持局部过滤器RequestRateLimiter来做限流，使用的是令牌桶算法，可以根据ip或路径进行限流，可以设置每秒填充平均速率，和<mark><strong>令牌桶</strong></mark>总容量</p><h1 id="限流常见的算法有哪些呢？"><a href="#限流常见的算法有哪些呢？" class="headerlink" title="限流常见的算法有哪些呢？"></a>限流常见的算法有哪些呢？</h1><p>比较常见的限流算法有<strong>漏桶算法和令牌桶算法</strong></p><p>漏桶算法是<strong>把请求存入到桶中</strong>，以固定速率从桶中流出，可以让我们的服务做到<mark><strong>绝对的平均</strong></mark>，起到很好的限流效果</p><p>令牌桶算法<strong>在桶中存储的是令牌</strong>，按照一定的速率生成令牌，<mark><strong>每个请求都要先申请令牌</strong></mark>，申请到令牌以后才能正常请求，也可以起到很好的限流作用</p><p>它们的区别是，漏桶和令牌桶都可以处理突发流量，其中漏桶可以做到绝对的平滑，令牌桶有可能会产生突发大量请求的情况，一般nginx限流采用的漏桶，spring cloud gateway中可以支持令牌桶算法</p><h1 id="什么是CAP理论？"><a href="#什么是CAP理论？" class="headerlink" title="什么是CAP理论？"></a>什么是CAP理论？</h1><p>CAP主要是在分布式项目下的一个理论。包含了三项，一致性、可用性、分区容错性</p><ul><li><p>一致性(Consistency)是指更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致(<strong>强一致性)，不能存在中间状态</strong>。</p></li><li><p>可用性(Availability) 是指系统提供的服务<strong>必须一直处于可用的状态</strong>，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</p></li><li><p>分区容错性(Partition tolerance) 是指分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。</p></li></ul><h1 id="为什么分布式系统中无法同时保证一致性和可用性？"><a href="#为什么分布式系统中无法同时保证一致性和可用性？" class="headerlink" title="为什么分布式系统中无法同时保证一致性和可用性？"></a>为什么分布式系统中无法同时保证一致性和可用性？</h1><p>首先一个前提，对于分布式系统而言，分区容错性是一个最基本的要求，因此基本上我们在设计分布式系统的时候只能从一致性（C）和可用性（A）之间进行取舍。</p><p>如果保证了一致性（C）：对于节点N1和N2，当往N1里写数据时，N2上的操作必须被暂停，只有当N1同步数据到N2时才能对N2进行读写请求，在N2被暂停操作期间客户端提交的请求会收到失败或超时。显然，这与可用性是相悖的。</p><p>如果保证了可用性（A）：那就不能暂停N2的读写操作，但同时N1在写数据的话，这就违背了一致性的要求。</p><h1 id="什么是BASE理论？"><a href="#什么是BASE理论？" class="headerlink" title="什么是BASE理论？"></a>什么是BASE理论？</h1><p>这个也是CAP分布式系统设计理论</p><p>BASE是CAP理论中AP方案的延伸，核心思想是即使无法做到强一致性（StrongConsistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到<mark><strong>最终一致性</strong></mark>（Eventual Consitency）。它的思想包含三方面：</p><p>1、Basically Available（基本可用）：基本可用是指分布式系统在出现不可预知的故障的时候，允许损失部分可用性，但不等于系统不可用。</p><p>2、Soft state（软状态）：即是指<strong>允许系统中的数据存在中间状态</strong>，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</p><p>3、Eventually consistent（最终一致性）：强调系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。其本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><h1 id="你们采用哪种分布式事务解决方案？"><a href="#你们采用哪种分布式事务解决方案？" class="headerlink" title="你们采用哪种分布式事务解决方案？"></a>你们采用哪种分布式事务解决方案？</h1><p>本地消息表加任务调度完成分布式事务控制</p><p>详见：<a href="https://planbbbbb.github.io/2023/12/29/Project-%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/">https://planbbbbb.github.io/2023/12/29/Project-%E6%99%BA%E5%AD%A6%E8%BD%A9%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0/</a></p><h1 id="分布式服务的接口幂等性如何设计？"><a href="#分布式服务的接口幂等性如何设计？" class="headerlink" title="分布式服务的接口幂等性如何设计？"></a>分布式服务的接口幂等性如何设计？</h1><p>嗯，我们当时有一个xx项目的下单操作，采用的<mark><strong>token+redis</strong></mark>实现的，流程是这样的</p><p>第一次请求，也就是用户打开了商品详情页面，我们会发起一个请求，在后台生成一个<mark>唯一token存入redis</mark>，key就是用户的id，value就是这个token，同时把这个token返回前端</p><p>第二次请求，当用户点击了下单操作会后，会携带之前的token，后台先到redis进行验证，如果存在token，可以执行业务，同时删除token；如果不存在，则直接返回，不处理业务，就保证了同一个token只处理一次业务，就保证了幂等性</p><h1 id="xxl-job路由策略有哪些？"><a href="#xxl-job路由策略有哪些？" class="headerlink" title="xxl-job路由策略有哪些？"></a>xxl-job路由策略有哪些？</h1><p>xxl-job提供了很多的路由策略，我们平时用的较多就是：<mark><strong>轮询、故障转移、分片广播</strong></mark>…</p><h1 id="xxl-job任务执行失败怎么解决？"><a href="#xxl-job任务执行失败怎么解决？" class="headerlink" title="xxl-job任务执行失败怎么解决？"></a>xxl-job任务执行失败怎么解决？</h1><ol><li><p><strong>路由策略选择故障转移</strong>，优先使用健康的实例来执行任务</p></li><li><p>如果还有失败的，我们在创建任务时，可以设置<strong>重试</strong>次数</p></li><li><p>如果还有失败的，就可以<strong>查看日志</strong>或者配置邮件告警来通知相关负责人解决</p></li></ol><h1 id="如果有大数据量的任务同时都需要执行，怎么解决？"><a href="#如果有大数据量的任务同时都需要执行，怎么解决？" class="headerlink" title="如果有大数据量的任务同时都需要执行，怎么解决？"></a>如果有大数据量的任务同时都需要执行，怎么解决？</h1><p>我们会让<strong>部署多个实例</strong>，共同去执行这些批量的任务，其中任务的路由策略是<strong>分片广播</strong></p><p>在任务执行的代码中可以获取分片总数和当前分片，按照取模的方式分摊到各个实例执行就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>消息中间件</title>
      <link href="/2023/12/22/%E9%9D%A2%E8%AF%95-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2023/12/22/%E9%9D%A2%E8%AF%95-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章取自黑马程序员</p><p><img src="/../assets/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/image-20231222154658626.png" alt="image-20231222154658626"></p><h1 id="RabbitMQ-如何保证消息不丢失"><a href="#RabbitMQ-如何保证消息不丢失" class="headerlink" title="RabbitMQ-如何保证消息不丢失"></a>RabbitMQ-如何保证消息不丢失</h1><p>嗯！我们当时MYSQL和Redis的数据双写一致性就是采用RabbitMQ实现同步的，这里面就要求了消息的高可用性，我们要保证消息的不丢失。主要从三个层面考虑</p><p>第一个是开启<mark>生产者确认机制</mark>，确保生产者的消息能到达队列，如果报错可以先记录到日志中，再去修复数据</p><p>第二个是开启<mark>持久化功能</mark>，确保消息未消费前在队列中不会丢失，其中的交换机、队列、和消息都要做持久化</p><p>第三个是开启<mark>消费者确认机制</mark>为auto，由spring确认消息处理成功后完成ack，当然也需要设置一定的重试次数，我们当时设置了3次，如果重试3次还没有收到消息，就将失败后的消息投递到异常交换机，交由人工处理</p><h1 id="RabbitMQ消息的重复消费问题如何解决的"><a href="#RabbitMQ消息的重复消费问题如何解决的" class="headerlink" title="RabbitMQ消息的重复消费问题如何解决的"></a>RabbitMQ消息的重复消费问题如何解决的</h1><p>嗯，这个我们还真遇到过，是这样的，我们当时消费者是设置了自动确认机制，当服务还没来得及给MQ确认的时候，服务宕机了，导致服务重启之后，又消费了一次消息。这样就重复消费了</p><p>因为我们当时处理的支付（订单|业务唯一标识），它有一个业务的唯一标识，我们再处理消息时，先到数据库查询一下，这个数据是否存在，如果不存在，说明没有处理过，这个时候就可以正常处理这个消息了。如果已经存在这个数据了，就说明消息重复消费了，我们就不需要再消费了<mark><strong>（在业务上解决）</strong></mark></p><p><strong>面试官</strong>：那你还知道其他的解决方案吗？</p><p><strong>候选人</strong>：</p><p>其实这个就是典型的幂等的问题，比如，redis分布式锁、数据库的锁都是可以的</p><h1 id="RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）"><a href="#RabbitMQ中死信交换机-（RabbitMQ延迟队列有了解过嘛）" class="headerlink" title="RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）"></a>RabbitMQ中死信交换机 ? （RabbitMQ延迟队列有了解过嘛）</h1><p>我们当时的xx项目有一个xx业务，需要用到延迟队列，其中就是使用RabbitMQ来实现的。</p><p>延迟队列就是用到了死信交换机和TTL（消息存活时间）实现的。</p><p>如果消息超时未消费就会变成死信，在RabbitMQ中如果消息成为死信，队列可以绑定一个死信交换机，在死信交换机上可以绑定其他队列，在我们发消息的时候可以按照需求指定TTL的时间，这样就实现了延迟队列的功能了。</p><p>我记得RabbitMQ还有一种方式可以实现延迟队列，在RabbitMQ中安装一个死信插件，这样更方便一些，我们只需要在声明交互机的时候，指定这个就是死信交换机，然后在发送消息的时候直接指定超时时间就行了，相对于死信交换机+TTL要省略了一些步骤</p><p><strong>面试官</strong>：如果有100万消息堆积在MQ , 如何解决 ?</p><p><strong>候选人</strong>：</p><p>我在实际的开发中，没遇到过这种情况，不过，如果发生了堆积的问题，解决方案也所有很多的</p><p>第一：提高消费者的消费能力 ,可以使用<strong>多线程消费任务</strong></p><p>第二：<strong>增加更多消费者，提高消费速度</strong> </p><p>​ 使用工作队列模式, 设置多个消费者消费消费同一个队列中的消息</p><p>第三：<strong>扩大队列容积，提高堆积上限</strong> </p><p>可以使用RabbitMQ惰性队列，惰性队列的好处主要是</p><p>①接收到消息后直接存入磁盘而非内存</p><p>②消费者要消费消息时才会从磁盘中读取并加载到内存</p><p>③支持数百万条的消息存储</p><h1 id="RabbitMQ的高可用机制有了解过嘛"><a href="#RabbitMQ的高可用机制有了解过嘛" class="headerlink" title="RabbitMQ的高可用机制有了解过嘛"></a>RabbitMQ的高可用机制有了解过嘛</h1><p>我们当时项目在生产环境下，使用的集群，当时搭建是镜像模式集群，使用了3台机器。</p><p>镜像队列结构是一主多从，所有操作都是主节点完成，然后同步给镜像节点，如果主节点宕机后，镜像节点会替代成新的主节点，不过在主从同步完成前，主节点就已经宕机，可能出现数据丢失</p><p><strong>面试官</strong>：那出现丢数据怎么解决呢？</p><p><strong>候选人</strong>：</p><p>我们可以采用仲裁队列，与镜像队列一样，都是主从模式，支持主从数据同步，主从同步基于Raft协议，强一致。</p><p>并且使用起来也非常简单，不需要额外的配置，在声明队列的时候只要指定这个是仲裁队列即可</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程+多线程+IO</title>
      <link href="/2023/11/11/Study-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B+%E5%A4%9A%E7%BA%BF%E7%A8%8B+IO/"/>
      <url>/2023/11/11/Study-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B+%E5%A4%9A%E7%BA%BF%E7%A8%8B+IO/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章学习自：<a href="https://www.bilibili.com/video/BV1j54y1b7qv">https://www.bilibili.com/video/BV1j54y1b7qv</a></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零碎面试题</title>
      <link href="/2023/10/13/%E9%9D%A2%E8%AF%95-%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/10/13/%E9%9D%A2%E8%AF%95-%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="finally语句块什么时候不会执行"><a href="#finally语句块什么时候不会执行" class="headerlink" title="finally语句块什么时候不会执行"></a>finally语句块什么时候不会执行</h2><p>finally语句块在两种情况下不会执行:</p><ol><li>程序没有进入到try语句块因为异常导致程序终止,这个问题主要是开发人员在编写代码的时候,异常捕获的范围不够</li><li>在try或者cache语句块中,执行了System.exit(0)语句,导致JVM直接退出</li></ol><h1 id="场景题"><a href="#场景题" class="headerlink" title="场景题"></a>场景题</h1><h2 id="单点登录这块怎么实现的"><a href="#单点登录这块怎么实现的" class="headerlink" title="单点登录这块怎么实现的"></a>单点登录这块怎么实现的</h2><p>使用jwt解决单点登录的流程如下：</p><p><img src="/../assets/%E9%9D%A2%E8%AF%95-%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230521113941467.png" alt="image-20230521113941467"></p><p><strong>回答要点：</strong></p><p>1，先解释什么是单点登录</p><p>单点登录的英文名叫做：Single Sign On（简称<strong>SSO</strong>）</p><p>2，介绍自己项目中涉及到的单点登录</p><p>3，介绍单点登录的解决方案，以JWT为例</p><p>​   I.  用户访问其他系统，会在网关判断token是否有效</p><p>​     II.  如果token无效则会返回401（认证失败）前端跳转到登录页面</p><p>​    III.  用户发送登录请求，返回浏览器一个token，浏览器把token保存到cookie</p><p>​    IV.  再去访问其他服务的时候，都需要携带token，由网关统一验证后路由到目标服务</p><h2 id="权限认证是如何实现的"><a href="#权限认证是如何实现的" class="headerlink" title="权限认证是如何实现的"></a>权限认证是如何实现的</h2><p>Spring security</p><p><img src="/../assets/%E9%9D%A2%E8%AF%95-%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230521114432028.png" alt="image-20230521114432028"></p><h2 id="上传数据的安全性你们怎么控制"><a href="#上传数据的安全性你们怎么控制" class="headerlink" title="上传数据的安全性你们怎么控制"></a>上传数据的安全性你们怎么控制</h2><p>使用非对称加密（或对称加密），给前端一个公钥让他把数据加密后传到后台，后台解密后处理数据</p><ul><li>传输的数据很大建议使用对称加密，不过不能保存敏感信息</li><li>传输的数据较小，要求安全性高，建议采用非对称加密</li></ul><h2 id="你负责项目的时候遇到了哪些比较棘手的问题"><a href="#你负责项目的时候遇到了哪些比较棘手的问题" class="headerlink" title="你负责项目的时候遇到了哪些比较棘手的问题"></a>你负责项目的时候遇到了哪些比较棘手的问题</h2><p><strong>（1）设计模式</strong></p><ul><li>工厂模式+策略</li><li>责任链模式</li></ul><blockquote><p>回答思路</p><p>1，什么背景（技术问题）</p><p>2，过程（解决问题的过程）</p><p>3，最终落地方案</p></blockquote><p>举例：</p><p>①：介绍登录业务（一开始没有用设计模式，所有的登录方式都柔和在一个业务类中，不过，发现需求经常改）</p><p>②：登录方式经常会增加或更换，每次都要修改业务层代码，所以，经过我的设计，使用了工厂设计模式和策略模式，解决了，经常修改业务层代码的问题</p><p>③：详细介绍一下工厂模式和策略模式（参考前面设计模式的课程）</p><p><strong>（2）线上BUG</strong></p><ul><li>CPU飙高</li><li>内存泄漏</li><li>线程死锁</li></ul><p><strong>（3）调优</strong></p><ul><li>慢接口</li><li>慢SQL</li><li>缓存方案</li></ul><p><strong>（4）组件封装</strong></p><ul><li>分布式锁</li><li>接口幂等</li><li>分布式事务</li><li>支付通用</li></ul><h2 id="你们项目中日志怎么采集的"><a href="#你们项目中日志怎么采集的" class="headerlink" title="你们项目中日志怎么采集的"></a>你们项目中日志怎么采集的</h2><p>采用的ELK</p><p><img src="/../assets/%E9%9D%A2%E8%AF%95-%E9%9B%B6%E7%A2%8E%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230521232913086.png" alt="image-20230521232913086"></p><p>介绍ELK的三个组件：</p><ul><li>Elasticsearch是全文搜索分析引擎，可以对数据存储、搜索、分析</li><li>Logstash是一个数据收集引擎，可以动态收集数据，可以对数据进行过滤、分析，将数据存储到指定的位置</li><li>Kibana是一个数据分析和可视化平台，配合Elasticsearch对数据进行搜索，分析，图表化展示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM学习</title>
      <link href="/2023/10/03/%E9%9D%A2%E8%AF%95-SSM/"/>
      <url>/2023/10/03/%E9%9D%A2%E8%AF%95-SSM/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文学习自：<a href="https://www.bilibili.com/video/BV1yT411H7YK">https://www.bilibili.com/video/BV1yT411H7YK</a></p><h1 id="Spring中的单例bean是线程安全的吗"><a href="#Spring中的单例bean是线程安全的吗" class="headerlink" title="Spring中的单例bean是线程安全的吗"></a>Spring中的单例bean是线程安全的吗</h1><p><strong>通常情况下是线程安全</strong>的，线程安全的前提是无状态和不做修改，被Spring管理的bean是默认为单例模式的，即在整个应用程序中是全局共享一个的，一旦单例bean被初始化完成，它会被缓存起来，之后每次请求该bean时都会返回同一个实例。这确保了在整个应用程序中只有一个实例存在，因此不会发生竞争条件，从而保证了线程安全性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">// 这个就是有状态的对象，存在线程安全问题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService <span class="comment">// 这个被spring所管理的bean是单例的，没有线程安全问题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getByld/fid;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getByld</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">count++:</span><br><span class="line">System.out.println(count);</span><br><span class="line"><span class="keyword">return</span> userService.getByld(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="⭐什么是AOP，你们的项目中有没有使用到AOP"><a href="#⭐什么是AOP，你们的项目中有没有使用到AOP" class="headerlink" title="⭐什么是AOP，你们的项目中有没有使用到AOP"></a>⭐什么是AOP，你们的项目中有没有使用到AOP</h1><p>AOP是<mark>面向切面编程</mark>，在spring中用于将那些<strong>与业务无关</strong>，但却对多个对象产生影响的<strong>公共行为和逻辑</strong>，抽取公共模块复用，降低耦合，一般比如可以做为公共日志保存，事务处理等</p><p>我们当时在后台管理系统中，就是使用AOP来记录了系统的操作日志</p><p>主要思路是这样的，使用AOP中的环绕通知+切点表达式，这个表达式就是要找到要记录日志的方法，然后通过环绕通知的参数获取请求方法的参数，比如类信息、方法信息、注解、请求方式等，获取到这些参数以后，保存到数据库</p><h1 id="Spring中的事务是如何实现的"><a href="#Spring中的事务是如何实现的" class="headerlink" title="Spring中的事务是如何实现的"></a>Spring中的事务是如何实现的</h1><p>spring实现的<mark>事务本质就是AOP</mark>完成，对方法前后进行拦截，在执行方法之前开启事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><h1 id="⭐Spring中事务失效的场景有哪些"><a href="#⭐Spring中事务失效的场景有哪些" class="headerlink" title="⭐Spring中事务失效的场景有哪些"></a>⭐Spring中事务失效的场景有哪些</h1><p>第一个，如果方法上异常捕获处理，自己处理了异常，没有抛出，就会导致事务失效，所以一般处理了异常以后，别忘了跑出去就行了，<strong>即在catch块中抛出运行时异常</strong>。</p><p>第二个，如果方法抛出检查异常，如果报错也会导致事务失效，最后在spring事务的注解上，就是@Transactional上配置rollbackFor属性为Exception，这样别管是什么异常，都会回滚事务</p><p>第三，如果方法上不是public修饰的，也会导致事务失效</p><h1 id="⭐Spring的bean的生命周期✏️"><a href="#⭐Spring的bean的生命周期✏️" class="headerlink" title="⭐Spring的bean的生命周期✏️"></a>⭐Spring的bean的生命周期✏️</h1><p>Bean的生命周期大致可以分为四个阶段：实例化、属性赋值、初始化、销毁</p><p><a href="https://juejin.cn/post/7075168883744718856?searchId=20231231212710EF990A2551C424C4ECA6#heading-0">https://juejin.cn/post/7075168883744718856?searchId=20231231212710EF990A2551C424C4ECA6#heading-0</a></p><h1 id="⭐Springbean的循环依赖✏️"><a href="#⭐Springbean的循环依赖✏️" class="headerlink" title="⭐Springbean的循环依赖✏️"></a>⭐Springbean的循环依赖✏️</h1><h1 id="⭐SpringMVC执行流程✏️"><a href="#⭐SpringMVC执行流程✏️" class="headerlink" title="⭐SpringMVC执行流程✏️"></a>⭐SpringMVC执行流程✏️</h1><h1 id="⭐Springboot自动配置原理"><a href="#⭐Springboot自动配置原理" class="headerlink" title="⭐Springboot自动配置原理"></a>⭐Springboot自动配置原理</h1><p>在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：</p><ul><li><p>@SpringBootConfiguration</p></li><li><p>@EnableAutoConfiguration</p></li><li><p>@ComponentScan</p></li></ul><p>其中<code>@EnableAutoConfiguration</code>是实现自动化配置的核心注解。 </p><p>该注解通过<code>@Import</code>注解导入对应的配置选择器。关键的是内部就是<mark>读取</mark>了该项目和该项目引用的Jar包的的<mark>classpath路径下<strong>META-INF&#x2F;spring.factories</strong>文件中的所配置的类的全类名</mark>。 </p><p>在这些配置类中所定义的Bean会根据条件注解所<strong>指定的条件来决定</strong>是否需要将其导入到Spring容器中。</p><p>一般条件判断会有像<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。</p><p><img src="/../assets/%E9%9D%A2%E8%AF%95-SSM/e787ee7bfb1c417aa8624a5a5c9de438tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="SpringBoot自动配置流程.png"></p><h1 id="Spring-的常见注解有哪些"><a href="#Spring-的常见注解有哪些" class="headerlink" title="Spring 的常见注解有哪些"></a>Spring 的常见注解有哪些</h1><p>第一类是：声明bean，有@Component、@Service、@Repository、@Controller</p><p>第二类是：依赖注入相关的，有@Autowired、@Qualifier、@Resourse</p><p>第三类是：设置作用域 @Scope</p><p>第四类是：spring配置相关的，比如@Configuration，@ComponentScan 和 @Bean </p><p>第五类是：跟aop相关做增强的注解  @Aspect，@Before，@After，@Around，@Pointcut</p><h1 id="SpringMVC常见的注解有哪些"><a href="#SpringMVC常见的注解有哪些" class="headerlink" title="SpringMVC常见的注解有哪些"></a>SpringMVC常见的注解有哪些</h1><p>@RequestMapping：用于映射请求路径；</p><p>@RequestBody：注解实现接收http请求的json数据，将json转换为java对象；</p><p>@RequestParam：指定请求参数的名称；</p><p>@PathViriable：从请求路径下中获取请求参数(&#x2F;user&#x2F;{id})，传递给方法的形式参数；</p><p>@ResponseBody：注解实现将controller方法返回对象转化为json对象响应给客户端。</p><p>@RequestHeader：获取指定的请求头数据，还有像@PostMapping、@GetMapping这些。</p><p>@RestController：@Controller + @ResponseBody</p><h1 id="Springboot常见注解有哪些"><a href="#Springboot常见注解有哪些" class="headerlink" title="Springboot常见注解有哪些"></a>Springboot常见注解有哪些</h1><p>Spring Boot的核心注解是@SpringBootApplication , 他由几个注解组成 : </p><ul><li>@SpringBootConfiguration： 组合了- @Configuration注解，实现配置文件的功能；</li><li>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项</li><li>@ComponentScan：Spring：组件扫描</li></ul><h1 id="MyBatis执行流程"><a href="#MyBatis执行流程" class="headerlink" title="MyBatis执行流程"></a>MyBatis执行流程</h1><p>①读取MyBatis配置文件：mybatis-config.xml加载运行环境和映射文件</p><p>②构造会话工厂SqlSessionFactory，一个项目只需要一个，单例的，一般由spring进行管理</p><p>③会话工厂创建SqlSession对象，这里面就含了执行SQL语句的所有方法</p><p>④操作数据库的接口，Executor执行器，同时负责查询和缓存的维护</p><p>⑤Executor接口的执行方法中有一个MappedStatement类型的参数，封装了映射信息</p><p>⑥输入参数映射（将Java对象转换为数据库的信息）</p><p>⑦输出结果映射（将数据库的信息转换为Java对象）</p><h1 id="Mybatis是否支持延迟加载"><a href="#Mybatis是否支持延迟加载" class="headerlink" title="Mybatis是否支持延迟加载"></a>Mybatis是否支持延迟加载</h1><p>是支持的，延迟加载的意思是：它允许在需要时才加载关联对象的数据，而不是在主查询时就将关联对象的数据全部加载进来。</p><p>Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载</p><p>在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&#x3D;true|false，默认是关闭的</p><p><strong>延迟加载的例子：</strong></p><p>假设我们有两个实体类：<code>User</code> 和 <code>Order</code>，它们之间存在一对多的关联关系，即一个用户可以拥有多个订单。在这个示例中，<code>User</code>是主实体，<code>Order</code>是关联实体。</p><p>首先，定义 <code>User</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders; <span class="comment">// 关联对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造方法和其他属性的getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，定义 <code>Order</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String orderNumber;</span><br><span class="line">    <span class="keyword">private</span> User user; <span class="comment">// 关联对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造方法和其他属性的getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>UserMapper</code> 中，我们可以定义一个方法，通过用户ID查询用户信息及其关联的订单信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserWithOrders</span><span class="params">(Long userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 MyBatis 的 XML 配置文件中，我们可以使用 ResultMap 配置来指定关联对象的映射关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithOrdersMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Order&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;orderNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;order_number&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，在查询时，我们可以使用延迟加载，确保在需要时才加载关联对象的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="comment">// 获取 SqlSession 的方法，这里省略</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserWithOrders(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时关联对象 orders 并未被立即加载，只有在访问 orders 时才触发加载</span></span><br><span class="line">        List&lt;Order&gt; orders = user.getOrders();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在这里，访问 orders 属性，会触发延迟加载，查询关联的订单数据</span></span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Order ID: &quot;</span> + order.getId() + <span class="string">&quot;, Order Number: &quot;</span> + order.getOrderNumber());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例演示了通过 MyBatis 进行延迟加载，只在需要时才加载关联对象的数据，而不是在主查询时就将关联对象的数据全部加载进来。</p><h1 id="延迟加载的底层原理知道吗"><a href="#延迟加载的底层原理知道吗" class="headerlink" title="延迟加载的底层原理知道吗"></a>延迟加载的底层原理知道吗</h1><p>延迟加载在底层主要使用的CGLIB动态代理完成的</p><p>第一是，使用CGLIB创建目标对象的<strong>代理对象</strong>，这里的目标对象就是开启了延迟加载的mapper</p><p>第二个是当调用目标方法时，进入<strong>拦截器invoke方法</strong>，发现目标方法是null值，再执行sql查询</p><p>第三个是获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了</p><h1 id="Mybatis的一级、二级缓存用过吗"><a href="#Mybatis的一级、二级缓存用过吗" class="headerlink" title="Mybatis的一级、二级缓存用过吗"></a>Mybatis的一级、二级缓存用过吗</h1><p>mybatis的一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存</p><p>关于二级缓存需要单独开启</p><p>二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL session，默认也是采用 PerpetualCache，HashMap 存储。</p><p>如果想要开启二级缓存需要在全局配置文件和映射文件中开启配置才行。</p><p>Mybatis的二级缓存什么时候会清理缓存中的数据？</p><p>当某一个作用域(一级缓存 Session&#x2F;二级缓存Namespaces)的进行了<strong>新增、修改、删除操作后</strong>，默认该作用域下所有 select 中的缓存将被 clear。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2023/10/03/Study-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2023/10/03/Study-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>异或运算，也称为 XOR 运算，是一种逻辑运算符。它的运算规则是：对应位相同为0，不同为1。</p><p>7种位运算的详细特性和示例：</p><ol><li>与运算（AND）：</li></ol><ul><li>任何数和0做与运算，结果是0，即 x &amp; 0 &#x3D; 0。例如，5（101） &amp; 0 &#x3D; 0。</li><li>任何数和其自身做与运算，结果是自身，即 x &amp; x &#x3D; x。例如，5（101） &amp; 5（101） &#x3D; 5（101）。</li></ul><ol start="2"><li>或运算（OR）：</li></ol><ul><li>任何数和0做或运算，结果是自身，即 x | 0 &#x3D; x。例如，5（101） | 0 &#x3D; 5（101）。</li><li>任何数和其自身做或运算，结果是自身，即 x | x &#x3D; x。例如，5（101） | 5（101） &#x3D; 5（101）。</li></ul><ol start="3"><li>异或运算（XOR）：</li></ol><ul><li>任何数和0做异或运算，结果是自身，即 x ^ 0 &#x3D; x。例如，5（101） ^ 0 &#x3D; 5（101）。</li><li>任何数和其自身做异或运算，结果是0，即 x ^ x &#x3D; 0。例如，5（101） ^ 5（101） &#x3D; 0。</li><li>异或运算满足交换律和结合律，即 a ^ b ^ c &#x3D; a ^ (b ^ c) &#x3D; (a ^ b) ^ c。例如，5（101） ^ 3（011） ^ 4（100） &#x3D; 5 ^ (3 ^ 4) &#x3D; (5 ^ 3) ^ 4。</li></ul><ol start="4"><li>非运算（NOT）：</li></ol><ul><li>非运算会反转操作数的所有位。例如，~5（101） &#x3D; 2（010）。</li></ul><ol start="5"><li>左移运算（SHL）：</li></ol><ul><li>左移n位等于乘以2的n次方，即 x &lt;&lt; n &#x3D; x * 2^n。例如，5（101） &lt;&lt; 2 &#x3D; 20（10100）。</li><li>左移运算不改变操作数的符号位。</li></ul><ol start="6"><li>逻辑右移运算（SHR）：</li></ol><ul><li>右移n位等于除以2的n次方，即 x &gt;&gt; n &#x3D; x &#x2F; 2^n。例如，20（10100） &gt;&gt; 2 &#x3D; 5（101）。</li><li>逻辑右移运算会用0填充移位后产生的空位。</li></ul><ol start="7"><li>算术右移运算（SAR）：</li></ol><ul><li>算术右移运算会用符号位填充移位后产生的空位，因此它可以保持负数的符号。例如，对于负数-5（1011） &gt;&gt;&gt; 2 &#x3D; -2（1110）。</li></ul><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231029205712433.png" alt="image-20231029205712433"></p><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231029204913410.png" alt="image-20231029204913410"></p><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231029204333810.png" alt="image-20231029204333810"></p><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231029204306242.png" alt="image-20231029204306242"></p><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h1 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h1><blockquote><p>是redis中的zset的底层数据结构实现之一，另外一个是hash</p></blockquote><p>跳跃表实质上是对一个有序的链表进行<strong>类似于二分查找</strong>的数据结构，其性能与红黑树，AVL树不相上下。</p><p>原本要依次遍历从1开始找17，现在从三级索引找到10，再从二级索引找到15，在一级索引就能找到17了。</p><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231023222430354.png" alt="跳跃表"></p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>用数组去构造二叉树的时候，都是遵循一个规则类似于左闭右闭，然后用索引去切割数组，而不是真的去浪费时间和空间去切割数组。</p><p>在找到结点后，想找其父节点时，可以在全局变量中定义一个<code>TreeNode pre</code>来记录前一个结点，这个前一个结点可以用来当他的父节点，也可以在二叉搜索树中记录中序遍历的前一个小于他的结点。</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>在二叉搜索树上求什么最值啊，差值之类的，就把它想成在一个有序数组（即对二叉搜索树做中序遍历）上求最值，求差值。</p><p>对于二叉搜索树的添加删除操作可以用TreeNode的返回值，让其返回值传递给上一层递归，让上一层递归去接住这个结果，比如在下一层返回到上一层可以清晰地知道上一层是左边还是右边的孩子应该去接住这个返回上来的结果。</p><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><p><strong>做题关键</strong>：回溯都可以画成一颗树，画成树层结构就好懂了</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ul><li>组合中最重要的是startIndex（下一次遍历的起始位置）</li></ul><p>如果是一个集合来求组合的话，就需要startIndex，</p><p>如果是多个集合取组合，各个集合之间相互不影响，那么就不用startIndex</p><p>组合模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; res;</span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        back(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt;= k) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= n-(k-list.size())+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            back(n, k, i + <span class="number">1</span>);</span><br><span class="line">            list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剪枝优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;&#x3D; 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;&#x3D; n - (k - path.size()) + 1，开始遍历</li></ol><h3 id="树层去重"><a href="#树层去重" class="headerlink" title="树层去重"></a>树层去重</h3><p>同一树层上不能取相同的值，否则就与之前的重复了</p><ul><li><strong>利用used数组做树层去重</strong>：这是要将<strong>数组进行排序后</strong>，前一个数和当前数相同，且前一个数没被使用过的情况（前一个数被使用了不能去，因为这是树枝上的，树枝不用去重）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;!used[i-<span class="number">1</span>]&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>利用HashSet做树层去重</strong>：当<strong>数组不能被排序时</strong>，例如递增子序列那题，本质上其实都是为了保证当前树层上不能取到同样的数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hashSet.contains(nums[i]))&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用HashSet做树层去重是<strong>通用方法</strong>，但是时间和空间复杂度上去了</p></blockquote><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><p>分割的本质还是组合</p><p>例如对于字符串abcdef：</p><ul><li>组合问题：选取一个a之后，在bcdef中再去选取第二个，选取b之后在cdef中再选取第三个…..。</li><li>切割问题：切割一个a之后，在bcdef中再去切割第二段，切割b之后在cdef中再切割第三段…..。</li></ul><p><img src="/../assets/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20231016103652105.png" alt="image-20231016103652105"></p><p>写法习惯：在for循环中遇到不符合条件的就直接continue跳过了</p><p>模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ArrayList&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        back(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(String s, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= s.length()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isPalindrome(s, startIndex, i)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);</span><br><span class="line">            list.add(str);</span><br><span class="line">            back(s, i + <span class="number">1</span>);</span><br><span class="line">            list.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) != s.charAt(right)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>如果把 子集问题、组合问题、分割问题都抽象为一棵树的话，<strong>那么组合问题和分割问题都是收集树的叶子节点，而子集问题是找树的所有节点！</strong></p><p>模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        back(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">back</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;</span><br><span class="line">            list.add(nums[i]);</span><br><span class="line">            back(nums, i + <span class="number">1</span>);</span><br><span class="line">            list.pollLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>上面三种其实都可以称为组合，排列不需要startIndex去规定遍历的起始位置，因为排列中每次都是从i&#x3D;0开始遍历完所有<strong>未被使用</strong>的数，这里的未被使用需要使用到used数组去判断，所以排列的题都需要有used数组</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><ol><li>首先是要确定dp数组和其下标的含义</li></ol><p><code>dp[i][j]</code>指的是在0到i的物品中选，且容量不超过j的最大价值</p><ol start="2"><li>确定递推公式</li></ol><p>要判断当前位置（即当前能选的物品和此时的最大容量j）的最大价值，只有两种情况，一种是不放当前的物品i，一种是放当前的物品i。</p><p>不放当前物品就是取<code>dp[i-1][j]</code>，其含义是在这个此时的最大容量时，不放当前能新放入的物品，而是取上一行，即该位置的正上方的值，意思就是，我不放当前这个物品i，那问题就转换为在0到i-1物品中去选且最大容量为j的问题。</p><p>放入当前物品i的问题又可以转换为不放入物品i时且背包容量为<code>j-weight[i]</code>的最大价值加上物品i的价值，而为什么是<code>j-weight[i]</code>呢，是使得刚好能够放入物品i的容量时，此时的最大价值。此时为<code>dp[i - 1][j - weight[i]] + value[i]</code>，含义就是在不放物品i时，且剩余容量能放物品i时的最大价值，此时再加上物品i的价值。</p><p><mark><strong>此时的背包容量减去物品i的重量所能放的最大价值加上物品i的价值</strong></mark></p><p>最后就是两个值取最大值。</p><p>而<code>j-weight[i]</code>可能会&lt;0，导致数组越界，此时的含义就是当前的整个容量j都不够去放这个物品i，此时取其正上方的值即可。</p><ol start="3"><li>遍历顺序</li></ol><p>从递推公式可知，当前位置的最大价值是由其正上方的值和左上方的值所确定的，所以其实只需要初始化整个二维数组的左上角即可，列就是全部为0，因为容量为0时不管怎么样都放不进去物品，故价值也为0；行的情况要根据第0个物品的weight来决定，当当前容量j&gt;&#x3D;其重量时代表可以放进去了，此时价值就为第0个物品的价值value[0]。</p><blockquote><p>滚动数组补充：其实就是把二维数组压缩成一维数组了，初始化还是一样，然后为了保证当前位置的值还是由其左上方和正上方所推导出的，故只能先遍历物品i，再倒序遍历容量j，这样才能不覆盖到上一层的值。</p></blockquote><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] value = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            weight[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            value[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化dp数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight[<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = value[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - weight[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[m - <span class="number">1</span>][n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一维滚动数组为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] value = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            weight[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            value[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化dp数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight[<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[j] = value[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么情况下可以使用01背包的解法："><a href="#什么情况下可以使用01背包的解法：" class="headerlink" title="什么情况下可以使用01背包的解法："></a>什么情况下可以使用01背包的解法：</h2><p>当一个数组既表示了物品的重量又表示了物品的价值，那么有：</p><ol><li>给一个数组，给一个数，判断该数组中的元素<mark>能否达到这个数的值</mark>，因为只能&lt;&#x3D;这个数的值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (j - nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - nums[i]] + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>给一个数组，给一个数，算出该数组中的元素<mark>能凑成这个数的方案数</mark>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (j - nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        dp[i][j] += dp[i - <span class="number">1</span>][j - nums[i]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两种对于<code>dp[i][j]</code>和i，j的定义也是不一样的，上面的<code>dp[i][j]</code>指的是最大价值，下面的指的是能装满该容量的方案数。</p><p>一和零：<mark>装满这个背包最多有多少个物品？</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= x; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= y; j--) &#123;</span><br><span class="line">        dp[i][j] = Math.max(dp[i][j], dp[i - x][j - y] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>01背包的这些例题都是给一个数组，然后给个数来进行对数组里的数做限制。</p><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>完全背包中物品可以使用无数次，而01背包的物品只能使用一次</p><blockquote><p>其实还是一个数组，然后给一个数进行限制，只不过数组里的数可以取多次了</p></blockquote><p>爬楼梯进阶版：（其实还是一个数组和一个数来限制，数组变成了1到m）</p><p>这次<strong>改为：一步一个台阶，两个台阶，三个台阶，…….，直到 m个台阶。问有多少种不同的方法可以爬到楼顶呢？</strong></p><p>这又有难度了，这其实是一个完全背包问题。</p><p>1阶，2阶，…. m阶就是物品，楼顶就是背包。</p><p>每一阶可以重复使用，例如跳了1阶，还可以继续跳1阶。</p><p>问跳到楼顶有几种方法其实就是问装满背包有几种方法。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] value = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            weight[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            value[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化dp数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight[<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[j] = value[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> weight[i]; j &lt;= n; j++) &#123;<span class="comment">//只修改了这里为正序遍历</span></span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求组合数或者排列数：</p><p>先遍历物品 i 再遍历背包 j 算的是组合数，先遍历背包 j 再遍历物品 i 算的是排列数</p><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>待补充。。。。。</p><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><p>当天的状态由前一天推导出来。</p><p>当天分为偷和不偷两种情况，</p><p>如果偷第i房间，那么dp[i] &#x3D; dp[i - 2] + nums[i] ，即：第i-1房一定是不考虑的，找出 下标i-2（包括i-2）以内的房屋，最多可以偷窃的金额为dp[i-2] 加上第i房间偷到的钱。</p><p>如果不偷第i房间，那么dp[i] &#x3D; dp[i - 1]，即考 虑i-1房，（<strong>注意这里是考虑，并不是一定要偷i-1房，这是很多同学容易混淆的点</strong>）</p><p>然后dp[i]取最大值，即dp[i] &#x3D; max(dp[i - 2] + nums[i], dp[i - 1]);</p><h2 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h2><p>列出<code>dp[i][0]</code>,<code>dp[i][1]</code>,<code>dp[i][2]</code>,<code>dp[i][3]</code>,<code>dp[i][4]</code>等等的状态，确定其可以由什么状态推导出来</p><h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><ol><li>连续</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (dp[i][j] &gt; res) res = dp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><blockquote><p>要求连续的话遇到不一致的就跳过了</p></blockquote><ol start="2"><li>不连续</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">   <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line">   <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">   <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">               dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (dp[i][j] &gt; res) res = dp[i][j];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><blockquote><p>要求可以不连续，那么解释如下<a href="https://leetcode.cn/problems/longest-common-subsequence/solutions/2530341/zui-chang-gong-gong-zi-xu-lie-dong-gui-j-mass/">https://leetcode.cn/problems/longest-common-subsequence/solutions/2530341/zui-chang-gong-gong-zi-xu-lie-dong-gui-j-mass/</a></p></blockquote><p><strong>判断子序列和不相交的线</strong>其实就是求两个字符串的最长公共子序列，最后判断最长公共子序列是否等于字符串s的长度。</p><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p><strong>通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了</strong>。时间复杂度为O(n)。</p><p><strong>顺序的描述为 从栈头到栈底的顺序</strong></p><p>如果求一个元素右边第一个更大元素，单调栈就是递增的，如果求一个元素右边第一个更小元素，单调栈就是递减的。</p><p>单调栈代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || temperatures[i] &lt;= temperatures[stack.peekFirst()]) &#123;</span><br><span class="line">                stack.addFirst(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temperatures[i] &gt; temperatures[stack.peekFirst()]) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peekFirst()]) &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">index</span> <span class="operator">=</span> stack.pollFirst();</span><br><span class="line">                    res[index] = i - index;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.addFirst(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>每次找到最小元素放到前面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择排序 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 外循环：未排序区间为 [i, n-1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内循环：找到未排序区间内的最小元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[k])</span><br><span class="line">                k = j; <span class="comment">// 记录最小元素的索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将该最小元素与未排序区间的首个元素交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[k];</span><br><span class="line">        nums[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>每次遍历把最大元素放在右边</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 冒泡排序 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 外循环：未排序区间为 [0, i]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 内循环：将未排序区间 [0, i] 中的最大元素交换至该区间的最右端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换 nums[j] 与 nums[j + 1]</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">                nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">                nums[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote><p>像打牌一样，将当前元素插入到前面已经排序好的序列中的合适位置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 插入排序 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 外循环：已排序元素数量为 1, 2, ..., n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> nums[i], j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 内循环：将 base 插入到已排序部分的正确位置</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; base) &#123;</span><br><span class="line">            nums[j + <span class="number">1</span>] = nums[j]; <span class="comment">// 将 nums[j] 向右移动一位</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j + <span class="number">1</span>] = base;        <span class="comment">// 将 base 赋值到正确位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>选出一个数，把数组分为严格比这个数小的左子数组和严格比这个数大的右子数组，然后递归地进行这样的操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 元素交换 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 哨兵划分 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 以 nums[left] 为基准数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = right;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[j] &gt;= nums[left])</span><br><span class="line">            j--;          <span class="comment">// 从右向左找首个小于基准数的元素</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; nums[i] &lt;= nums[left])</span><br><span class="line">            i++;          <span class="comment">// 从左向右找首个大于基准数的元素</span></span><br><span class="line">        swap(nums, i, j); <span class="comment">// 交换这两个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums, i, left);  <span class="comment">// 将基准数交换至两子数组的分界线</span></span><br><span class="line">    <span class="keyword">return</span> i;             <span class="comment">// 返回基准数的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 快速排序 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 子数组长度为 1 时终止递归</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 哨兵划分</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> partition(nums, left, right);</span><br><span class="line">    <span class="comment">// 递归左子数组、右子数组</span></span><br><span class="line">    quickSort(nums, left, pivot - <span class="number">1</span>);</span><br><span class="line">    quickSort(nums, pivot + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 合并左子数组和右子数组 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 左子数组区间 [left, mid], 右子数组区间 [mid+1, right]</span></span><br><span class="line">    <span class="comment">// 创建一个临时数组 tmp ，用于存放合并后的结果</span></span><br><span class="line">    <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化左子数组和右子数组的起始索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当左右子数组都还有元素时，比较并将较小的元素复制到临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt;= nums[j])</span><br><span class="line">            tmp[k++] = nums[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp[k++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将左子数组和右子数组的剩余元素复制到临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        tmp[k++] = nums[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        tmp[k++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将临时数组 tmp 中的元素复制回原数组 nums 的对应区间</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; tmp.length; k++) &#123;</span><br><span class="line">        nums[left + k] = tmp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 归并排序 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 当子数组长度为 1 时终止递归</span></span><br><span class="line">    <span class="comment">// 划分阶段</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>; <span class="comment">// 计算中点</span></span><br><span class="line">    mergeSort(nums, left, mid); <span class="comment">// 递归左子数组</span></span><br><span class="line">    mergeSort(nums, mid + <span class="number">1</span>, right); <span class="comment">// 递归右子数组</span></span><br><span class="line">    <span class="comment">// 合并阶段</span></span><br><span class="line">    merge(nums, left, mid, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用设计模式</title>
      <link href="/2023/10/03/%E9%9D%A2%E8%AF%95-%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/03/%E9%9D%A2%E8%AF%95-%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文参考自<a href="https://www.bilibili.com/video/BV1yT411H7YK">https://www.bilibili.com/video/BV1yT411H7YK</a></p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote><p>工厂模式最重要的意义就是<mark>解耦</mark></p></blockquote><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><p><strong>实现：</strong></p><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="/../assets/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20230521102122950.png" alt="image-20230521102122950"></p><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote><p>只要代码中有很长的if-else或switch 分支判断都可以采用策略模式优化</p></blockquote><p><img src="/../assets/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220913125209804-17039483861701.png" alt="image-20220913125209804"></p><p>如图可以选择不同的策略去实现不同的方案</p><h1 id="工厂-策略运用到项目"><a href="#工厂-策略运用到项目" class="headerlink" title="工厂+策略运用到项目"></a>工厂+策略运用到项目</h1><p><mark><strong>登录、支付</strong></mark>：<br>提供了很多种策略，都让spring容器管理<br>提供一个工厂：准备策略对象，根据参数提供对象</p><blockquote><p>比如可以微信登录，手机验证码登录，账号密码登录</p><p>还可以微信支付，支付宝支付等</p></blockquote><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>类似于SpringMVC中的过滤器链一样</p><p><strong>在项目中的运用</strong>就是：</p><p>下订单：</p><p>参数校验 -&gt; 补充订单信息 -&gt; 计算相关信息 -&gt; 订单入库</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式是一种设计模式，它确保<mark><strong>一个类只有一个实例，并提供一个全局访问点</strong></mark>。这样可以确保在整个应用程序中只有一个实例，从而避免了多次创建相同类的对象，节省了系统资源。</p><p>单例模式有几个关键点：</p><ol><li><strong>私有构造方法</strong>：确保其他类不能直接实例化该类。</li><li><strong>静态变量</strong>：保存类的唯一实例。</li><li><strong>静态方法</strong>：提供获取实例的全局访问点。</li></ol><p>以下是一个简单的单例模式的 Java 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnection</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 私有静态变量，用于保存唯一实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatabaseConnection instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 私有构造方法，防止外部直接实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DatabaseConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以进行一些数据库连接的初始化操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;创建数据库连接...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 公共静态方法，用于获取实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> DatabaseConnection <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果实例为空，创建一个新实例</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">DatabaseConnection</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，通过将构造方法设为私有，确保其他类不能直接实例化 DatabaseConnection类。通过提供静态方法 <code>getInstance()</code>，其他类可以获取 DatabaseConnection的唯一实例。在该方法中，如果实例为空，则创建一个新的实例，否则直接返回现有实例。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/10/03/Study-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/10/03/Study-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h1 id="I-O设备管理"><a href="#I-O设备管理" class="headerlink" title="I&#x2F;O设备管理"></a>I&#x2F;O设备管理</h1>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/10/03/Study-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/10/03/Study-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章参考自：</p><ol><li><p><a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></p></li><li><p><a href="https://frxcat.fun/pages/39e2a1/">https://frxcat.fun/pages/39e2a1/</a></p></li><li><p><a href="https://github.com/BloothOfYouth/Computer-Network-Notes">https://github.com/BloothOfYouth/Computer-Network-Notes</a></p></li></ol><p>做题视频：P12，P13，P18，P19，P23，P30</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li>网络</li></ol><p>计算机网络由若干的<strong>结点</strong>(node)和连接这些结点的<strong>链路</strong>(link)组成。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118164945924.png" alt="image-20231118164945924"></p><ol start="2"><li>互联网</li></ol><p>网络的网络就叫互联网，网络和网络之间还可以通过路由器相互连接起来，构造成一个更大的计算机网络。</p><ol start="3"><li>因特网</li></ol><p>世界上最大的互联网就是因特网。</p><ol start="4"><li>互联网的组成</li></ol><p>互联网主要包括下述两个部分：</p><ul><li>边缘部分</li></ul><ol><li>有所有连接在互联网上的主机组成</li><li>是用户<strong>直接使用</strong>的</li><li>用来通信和资源共享</li></ol><ul><li>核心部分</li></ul><ol><li>由大量网络和连接这些网络的路由器组成</li><li>主要为<strong>边缘部分提供服务</strong>的</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118165236589.png" alt="image-20231118165236589"></p><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><p><mark>从通信的角度来看，<strong>交换</strong> (switching)就是按照某种方式动态的分配传输线路的资源。</mark></p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>直接用电路进行连接传输资源</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118165516252.png" alt="image-20231118165516252"></p><p>电路交换通常需要以下的三个步骤。</p><ol><li>建立连接 (分配通信资源)</li><li>通话 (一直占用资源)</li><li>释放连接 (归还通信资源)</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118165544003.png" alt="image-20231118165544003"></p><h3 id="分组交换⭐⭐⭐"><a href="#分组交换⭐⭐⭐" class="headerlink" title="分组交换⭐⭐⭐"></a>分组交换⭐⭐⭐</h3><p><mark>一段信息通常会被分成多条信息。每条都是一段报文。</mark></p><p>在发送前会在每个分组前加上头信息。</p><p>分组交换通常会需要以下三个部分。</p><ol><li>发送方: 构造分组、发送分组</li><li>路由器: 缓存分组、转发分组</li><li>接收方: 接受分组、还原报文</li></ol><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><p>报文交换与分组交换类似，不过由于<mark>其报文的大小未做限制</mark>，因此对路由器等设备的空间要求较高，所以使用的较少。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118165825500.png" alt="image-20231118165825500"></p><h2 id="八个性能指标"><a href="#八个性能指标" class="headerlink" title="八个性能指标"></a>八个性能指标</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ul><li>在数字信道上传输比特的速率</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118170225088.png" alt="image-20231118170225088"></p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul><li><p>用来表示网络的通信线路所能传输数据的<strong>能力</strong>，通常为<mark>「最高数据率」</mark>。</p></li><li><p>单位 <code>b/s</code></p></li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul><li><p>在单位时间内通过某个网络(或信道、接口)的<strong>数据量</strong></p></li><li><p>吞吐量受到<strong>网络的带宽或额定速率</strong>的限制</p></li></ul><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><ul><li>主要由三部分时延<ul><li>发送时延 : 是由源主机发送到传输线路的时间</li><li>传播时延 : 信号在传输线线路上传输的时间</li><li>处理时延 : 信号在路由器上处理的时间</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118170422957.png" alt="image-20231118170422957"></p><p>计算方式如下：</p><table><thead><tr><th>时延类别</th><th>计算方式</th></tr></thead><tbody><tr><td>发送时延</td><td>分组长度发送速率分组长度(b)&#x2F;发送速率(b&#x2F;s)</td></tr><tr><td>传播时延</td><td>信道长度电磁波传播速率信道长度(m)&#x2F;电磁波传播速率(m&#x2F;s)</td></tr><tr><td>处理时延</td><td>不方便计算</td></tr></tbody></table><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>时延带宽积传播时延带宽时延带宽积&#x3D;传播时延×带宽</p><ul><li>在发送端连续发送数据的情况下，在第一个比特到达终点的时候，发送端到终点中的 <code>bit</code> 数就是时延带宽积</li><li>链路的时延带宽积又称 <strong>以比特为单位的链路长度</strong></li><li>起点到终点的链路中所能容纳的最大数据量。</li></ul><h3 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h3><p>往返时间 <strong>RTT</strong>(<strong>R</strong>ound-<strong>T</strong>rip <strong>T</strong>ime) 是指从出发点发出分组信号，直到出发点收到终点的确认收到为止。</p><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><ol><li><ol><li>信道利用率 : 用来表示信道有百分之多少的时间是被利用的</li><li>网络利用率 : 全网络的信道利用绿的加权平均值</li></ol></li></ol><ul><li>根据排队论，信道的利用率增大时，信道引起的时延也会增大。因此信道的<strong>利用率并非越大越好</strong></li><li>用 D0 表示网络空闲时的时延，D 表示当前网络的时延，U 表示利用率。 D&#x3D;D0&#x2F;(1−U) 有如下所示的关系</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.610n552gl640.webp" alt="image"></p><ul><li><ul><li>当网络的利用率达到50%时，时延就要加倍;</li><li>当网络的利用率超过50%时，时延急剧增大;</li><li>当网络的利用率接近100%时，时延就趋于无穷大;</li><li>因此，一些拥有较大主干网的ISP通常会控制它们的信道利用率不超过50%。</li></ul></li></ul><h3 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h3><ul><li><p>丢包率是指，丢失分组的数量与总分组数量的比率</p></li><li><p>丢包主要有以下两种情况</p></li></ul><ol><li>传输过程中出现误码，被结点丢弃</li><li>网络拥塞时被丢弃</li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="每一层解决的问题"><a href="#每一层解决的问题" class="headerlink" title="每一层解决的问题"></a>每一层解决的问题</h3><ol><li>物理层<ul><li>实现比特 0\1 的传输</li><li>采用怎样的传输媒体(介质)</li><li>采用怎样的物理接口</li><li>使用怎样的信号表示比特0和1</li></ul></li><li>数据链路层<ul><li>标识网络中各个主机</li><li>从信号中区分出地址和数据信息</li><li>实现<strong>一个网络</strong>之间的<strong>相互通信</strong></li></ul></li><li>网络层<ul><li>标识各个网络以及各个网络中的各主机</li><li>路由器如何转发分组，路由器如何进行路由选择</li></ul></li><li>运输层<ul><li>解决进程之间基于网络的通信功能</li><li>传输出现错误的时候，如何处理</li></ul></li><li>应用层<ul><li>通过应用进程的交互来完成特定的网络应用</li></ul></li></ol><h3 id="应用进程间基于网络的通信的流程"><a href="#应用进程间基于网络的通信的流程" class="headerlink" title="应用进程间基于网络的通信的流程"></a>应用进程间基于网络的通信的流程</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118170914318.png" alt="image-20231118170914318"></p><h3 id="计算机网络中的相关术语"><a href="#计算机网络中的相关术语" class="headerlink" title="计算机网络中的相关术语"></a>计算机网络中的相关术语</h3><ol><li><p>实体</p><ul><li>实体是指任何可发送或接受信息的 <strong>硬件或软件进程</strong></li><li>对等实体，是指收发双方中 <strong>相同层次中的实体</strong></li></ul></li><li><p>协议</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.qdst3f2qk40.webp" alt="image"></p><ul><li>协议是指两个对等实体进行逻辑通信的规则的集合</li><li>逻辑通信实际中并不存在，只是假设的一种通信</li><li>协议的三要素<ul><li>语法 定义交换信息的格式</li><li>语义 定义双方需要完成的的操作</li><li>同步 定义收发双方的时序关系</li></ul></li></ul></li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.2wbmp47a8u20.webp" alt="image"></p><ol start="3"><li>服务</li></ol><ul><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务</li><li>如果要实现本层的协议，必须要下一层所提供的服务</li><li>协议是<strong>水平</strong>的，而服务是<strong>垂直</strong>的</li><li>实体看得见下层提供的服务，但并不知道实现该服务的具体协议。</li></ul><ol start="4"><li><p>Other</p></li><li><p>服务访问点 在同一系统中<strong>相邻两层的实体交换信息的逻辑接口</strong>，用于区分不同服务的类型。</p></li><li><p>服务原语 上层使用下层所提供的服务必须通过与下层<strong>交换一些命令</strong> ，这些命令成为服务原语。</p></li><li><p>协议数据单元PDU <strong>对等层次之间传送的数据包</strong> ，成为该层的协议数据单元</p></li><li><p>服务数据单元SDU <strong>同意系统内，层与层之间交换的数据包</strong> 成为服务数据单元。</p></li><li><p>多个 SDU 可以合并为一个 PDU ；一个 SDU 也可以划分为几个 PDU</p></li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.6ukjo5tcdsc0.webp" alt="image"></p><h1 id="物理层✏️"><a href="#物理层✏️" class="headerlink" title="物理层✏️"></a>物理层✏️</h1><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><p><strong>物理层协议的主要任务：</strong></p><ol><li>机械特性</li></ol><p>指明接口所用接线器的 <strong>形状</strong> 和 <strong>尺寸</strong> 、 <strong>引脚数目</strong> 和 <strong>排列</strong> 、 <strong>固定和锁定</strong> 装置。</p><ol start="2"><li>电气特性</li></ol><p>指明在接口电缆的各条线上出现的 <strong>电压的范围</strong> 。</p><ol start="3"><li>功能特性</li></ol><p>指明某条显示行出现某一电平的 <strong>电压表示何种意义</strong>。</p><ol start="4"><li>过程特性</li></ol><p>指明对于不同功能的各种可能 <strong>事件的出现顺序</strong>。</p><p><mark><strong>物理层的主要作用：</strong></mark></p><ol><li>物理层考虑的是<mark>怎样才能连接各种传输媒体上传输数据比特流</mark></li><li>物理层为数据链路层屏蔽了各种传输媒体的差异，是数据链路层只需要考虑如何完成本层的协议，不必考虑网络具体传输的媒体是什么</li></ol><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><h3 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h3><ol><li>双绞线</li><li>同轴电缆</li><li>光纤</li><li>电力线</li></ol><h3 id="非引导型传输媒体"><a href="#非引导型传输媒体" class="headerlink" title="非引导型传输媒体"></a>非引导型传输媒体</h3><ol><li>无线电波</li><li>微波</li><li>红外线</li><li>可见光</li></ol><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><h3 id="串行与并行"><a href="#串行与并行" class="headerlink" title="串行与并行"></a>串行与并行</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118195914716.png" alt="image-20231118195914716"></p><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118195949977.png" alt="image-20231118195949977"></p><ul><li>同步传输时，收发双方同步的方法<ul><li>外同步：在收发双方之间添加一条单独的时钟信号线</li><li>内同步：发送端将始终同步信号变慢到发送数据中一起传输</li></ul></li><li>异步发送时，每个字节单独发送，且起始段与结束段有单独的标记。</li></ul><h3 id="单向通信-双向交替通信-双方同时通信-单工-半双工-全双工"><a href="#单向通信-双向交替通信-双方同时通信-单工-半双工-全双工" class="headerlink" title="单向通信&#x2F;双向交替通信&#x2F;双方同时通信(单工&#x2F;半双工&#x2F;全双工)"></a>单向通信&#x2F;双向交替通信&#x2F;双方同时通信(单工&#x2F;半双工&#x2F;全双工)</h3><p>在许多情况下，我们要使用“<strong>信道（channel）</strong>”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。</p><p>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><p><strong>单向通信</strong>：</p><p>又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201008141345239.png" alt="image-20201008141345239"></p><p><strong>双向交替通信</strong>：</p><p>又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式使一方发送另一方接收，过一段时间后可以再反过来</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201008141921924.png" alt="image-20201008141921924"></p><p><strong>双向同时通信</strong>：</p><p>又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201008142037846.png" alt="image-20201008142037846"></p><blockquote><p><strong>单向通信</strong>只需要一条信道，而<strong>双向交替通信</strong>或<strong>双向同时通信</strong>则需要两条信道（每个方向各一条）</p><p><strong>双向同时通信</strong>的传输效率最高</p></blockquote><h2 id="编码与调制✏️"><a href="#编码与调制✏️" class="headerlink" title="编码与调制✏️"></a>编码与调制✏️</h2><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118201632001.png" alt="image-20231118201632001"></p><p><strong>常用术语：</strong></p><ul><li><p><strong>数据 (data)</strong> —— 运送消息的实体。</p></li><li><p><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。 </p></li><li><p><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。 </p></li><li><p><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。 </p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p></li><li><p><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行<strong>调制</strong>  (modulation)。</p></li></ul><p>🌈补充：</p><ul><li><strong>编码：</strong> 通过编码，可以<mark>将原始的基带信号表示为更紧凑、高效的形式</mark>，以便在网络中传输。编码也可以用于纠错和安全性，确保数据的完整性和保密性。</li><li><strong>调制：</strong> 调制<mark>允许基带信号在传输介质中传播</mark>。不同的调制方式适用于不同的传输介质和应用场景。调制可以使信号适应传输媒体的特性，同时提高信号的传输距离和抗干扰能力。</li><li><mark>编码是将数字信号或者模拟信号转换为数字信号去在数字信道中传输，而调制是将数字信号或者模拟信号转换为模拟信号去在模拟信道中传输。</mark></li></ul><h3 id="常见编码方式"><a href="#常见编码方式" class="headerlink" title="常见编码方式"></a>常见编码方式</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.z6k4dfxm0io.webp" alt="image"></p><ul><li>不归零编码中存在时钟不一致的问题</li><li>归零编码中存在浪费数据带宽的问题</li><li>曼切斯特编码有自动同步的能力</li><li>差分曼切斯特编码相交上面的编码变化少，更适合网络传输</li></ul><h3 id="常见调制方式✏️"><a href="#常见调制方式✏️" class="headerlink" title="常见调制方式✏️"></a>常见调制方式✏️</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231118202306963.png" alt="image-20231118202306963"></p><p>不过有一个缺点，使用基本调制方式，一个码元只能包含一个比特信息。通常来说可以有混合调制的方式，也就是多个维度一起调制的方式。</p><p>下面就是一个典型的例子</p><p>正交振幅调制 QAM</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4tc9rfwo3l40.webp" alt="image"></p><blockquote><p>听不太懂，待补充。。。。。</p></blockquote><h2 id="信道的极限容量✏️"><a href="#信道的极限容量✏️" class="headerlink" title="信道的极限容量✏️"></a>信道的极限容量✏️</h2><h3 id="造成信号失真的因素"><a href="#造成信号失真的因素" class="headerlink" title="造成信号失真的因素"></a>造成信号失真的因素</h3><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。 </li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201010204336400.png" alt="image-20201010204336400"></p><p>失真的原因：</p><ul><li>码元传输的速率越高</li><li>信号传输的距离越远</li><li>噪声干扰越大</li><li>传输媒体质量越差</li></ul><h3 id="奈氏准则和香农公式"><a href="#奈氏准则和香农公式" class="headerlink" title="奈氏准则和香农公式"></a>奈氏准则和香农公式</h3><blockquote><p>待补充。。。。。。</p><p>奈氏准则</p><p>香农公式</p></blockquote><h3 id="奈氏准则和香农公式的意义"><a href="#奈氏准则和香农公式的意义" class="headerlink" title="奈氏准则和香农公式的意义"></a>奈氏准则和香农公式的意义</h3><ul><li>在信道带宽一定的情况下，根据奈氏准则和香农公式，要想提高信息的传输速率就必须<mark>采用多元制</mark> (更好的调制方法)和<mark>努力提高信道中的信噪比</mark>。</li><li>自从香农公式发表后，各种新的信号处理和调制方法就不断出现，其目的都是为了尽可能地<mark>接近香农公式给出的传输速率极限</mark></li></ul><h2 id="补充：信道复用技术"><a href="#补充：信道复用技术" class="headerlink" title="补充：信道复用技术"></a>补充：信道复用技术</h2><h3 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h3><ol><li>频分复用</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4hed19sa9cg.webp" alt="image"></p><p>每个用户划分出一个频段来就是频分复用。 存在大量的带宽闲置的问题</p><ol start="2"><li>时分复用(TDM)</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.58cg0bzk2uw0.webp" alt="image"></p><ul><li>所有用户被划分在了不同的时间帧中，每个用户周期出现。</li><li>存在大量的限制</li></ul><ol start="3"><li>统计时分复用</li></ol><p>动态分配时间间隙，提高利用率</p><h3 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用(WDM)"></a>波分复用(WDM)</h3><p>波分复用就是光频拆分出来，通过一个光纤来传输多个信号。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4jwgzkrt4nq0.webp" alt="image"></p><h3 id="码分复用-CDMA"><a href="#码分复用-CDMA" class="headerlink" title="码分复用(CDMA)"></a>码分复用(CDMA)</h3><p>所有的用户在同一时刻使用同一频带进行通信。</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ul><p>🔴🟢🟡<strong>总结：</strong></p><ol><li><strong>频分复用（Frequency Division Multiplexing，FDM）：</strong><ul><li><strong>概念：</strong> 频分复用是一种多路复用技术，它通过将频谱划分成不同的频率带来允许多个信号同时传输。每个信号占据不同的频率带宽，从而可以同时在相同的物理媒介上传输。</li><li><strong>用途：</strong> 常见于广播电视、无线通信等领域，如无线电和电视广播。</li></ul></li><li><strong>时分复用（Time Division Multiplexing，TDM）：</strong><ul><li><strong>概念：</strong> 时分复用是一种多路复用技术，它通过将时间划分为不同的时隙来允许多个信号轮流传输。每个信号在不同的时间段传输，从而共享同一物理媒介。</li><li><strong>用途：</strong> 常见于电话网络、数字传输系统等，如 T1&#x2F;E1 数字传输线路。</li></ul></li><li><strong>统计时分复用（Statistical Time Division Multiplexing，STDM）：</strong><ul><li><strong>概念：</strong> 统计时分复用是一种时分复用的变体，其中时隙的分配是根据信道上实际需要传输的数据量而动态变化的。它允许灵活地分配时隙，以适应不同信道的变化需求。</li><li><strong>用途：</strong> 常见于数据网络，如以太网。</li></ul></li><li><strong>波分复用（Wavelength Division Multiplexing，WDM）：</strong><ul><li><strong>概念：</strong> 波分复用是一种光通信中的多路复用技术，它通过在光纤中传输多个不同波长的光信号来实现多路复用。每个波长可以独立传输数据，使得光纤的传输容量大幅提升。</li><li><strong>用途：</strong> 常见于光纤通信系统，如长距离传输、光网络等。</li></ul></li><li><strong>码分复用（Code Division Multiplexing，CDM）：</strong><ul><li><strong>概念：</strong> 码分复用是一种多路复用技术，它通过为每个用户分配独特的码片序列来实现多用户在相同频率范围内同时传输。每个用户的数据通过与其相关的码片进行扩频，然后在接收端使用相同的码片进行解扩频。</li><li><strong>用途：</strong> 常见于无线通信系统，如 CDMA（Code Division Multiple Access）系统。</li></ul></li></ol><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>要解决的问题：</p><ul><li>标识网络中各个主机</li><li>从信号中区分出地址和数据信息</li><li>实现<strong>一个网络</strong>之间的<strong>相互通信</strong></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231119155147938.png" alt="image-20231119155147938"></p><ul><li><code>链路(Link)</code>：指从一个结点到相邻结点的一段物理线路,而中间没有任何其他的交换结点。</li><li><code>数据链路(DataLink)</code>：指把实现通信协议的硬件和软件加到链路上,就构成了数据链路。</li><li><strong>数据链路层</strong>以<code>帧</code>为单位传输和处理数据。</li></ul><h2 id="三个重要问题"><a href="#三个重要问题" class="headerlink" title="三个重要问题"></a>三个重要问题</h2><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><ol><li><strong>封装成帧</strong></li></ol><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011103650253.png" alt="image-20201011103650253"></p><ol start="2"><li><strong>差错控制</strong></li></ol><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011103917512.png" alt="image-20201011103917512"></p><ol start="3"><li><strong>可靠传输</strong></li></ol><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011105314053.png" alt="image-20201011105314053"></p><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>数据链路层使用的信道：</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014004459744.png" alt="image-20201014004459744"></p><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的（<mark>从信号中区分出地址和数据信息的问题</mark>）</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011105824466.png" alt="image-20201011105824466"></p><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011110017415.png" alt="image-20201011110017415"></p><p>还有<mark>数据碰撞问题</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011110129994.png" alt="image-20201011110129994"></p><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了<del>共享式局域网</del></p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p>封装成帧是指数据链路层给上层交付的协议数据单元<mark>添加帧头和帧尾使之成为帧</mark></p><ul><li><strong>帧头和帧尾中包含有重要的<mark>控制信息</mark>。</strong></li></ul><ul><li><strong>帧头和帧尾的作用之一就是<mark>帧定界</mark>。</strong></li></ul><p>问：接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：帧定界。</p><p>例如PPP帧中的帧头和帧尾都会有标志符。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011111334052.png" alt="image-20201011111334052"></p><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><p>⭐⭐⭐<strong>MAC帧的格式：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011111729324.png" alt="image-20201011111729324"></p><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011112450187.png" alt="image-20201011112450187"></p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>透明传输：指数据链路层对上层交付的传输数据<strong>没有任何限制</strong>,就好像数据链路层不存在一样。</p><ol><li>面向字节的物理链路使用字节填充实现</li></ol><blockquote><p>在每个标志字符和转义字符前都加上一个转义字符，让接收方认为其是数据而不是结束标志</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4zvllsddnng0.webp" alt="image"></p><ol start="2"><li>面向比特的物理链路使用比特填充实现</li></ol><blockquote><p>例如在没连续5个1之后添加一个0来避免出现与帧头和帧尾冲突的情况</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.56uvouiuuaw0.webp" alt="image"></p><h3 id="帧的数据部分长度"><a href="#帧的数据部分长度" class="headerlink" title="帧的数据部分长度"></a>帧的数据部分长度</h3><p>为了提高<strong>帧的传输效率</strong>,应当使帧的<mark><strong>数据部分的长度</strong>尽可能大些</mark>。</p><p>考虑到差错控制等多种因素,每一种数据链路层协议都规定了帧的数据部分的长度上限,即**最大传送单元MTU (Maximum Transfer Unit)**。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.702czciz8940.webp" alt="image"></p><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0，而0也可能变成1。这称为<mark>比特差错</mark></li><li>在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率BER(Bit Error Rate).</li><li>使用<mark>差错检测码</mark>来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231119163254347.png" alt="image-20231119163254347"></p><blockquote><p>如图上的帧尾都有FCS来进行检测，帧校验序列 FCS 是添加在数据后面的<mark>冗余码</mark>来进行检测</p></blockquote><h3 id="两种校验方式"><a href="#两种校验方式" class="headerlink" title="两种校验方式"></a>两种校验方式</h3><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><ul><li>在待发送的数据后面添加1位奇偶校验位，使整个数据(包括所添加的校验位在内)中<mark>“1”的个数</mark>为奇数(奇校验)或偶数(偶校验)</li><li>如果有<strong>奇数个位发生误码</strong>，则奇偶性发生变化，<strong>可以检查出误码</strong></li><li>如果有<strong>偶数个位发生误码</strong>，则奇偶性不发生变化，<strong>不能检查出误码(<mark>漏检</mark>)</strong>;</li></ul><blockquote><p>漏检的概率很大，所以不采用</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231119163759281.png" alt="image-20231119163759281"></p><h4 id="循环冗余校验CRC-Cyclic-Redundancy-Check-⭐⭐⭐"><a href="#循环冗余校验CRC-Cyclic-Redundancy-Check-⭐⭐⭐" class="headerlink" title="循环冗余校验CRC(Cyclic Redundancy Check)⭐⭐⭐"></a>循环冗余校验CRC(Cyclic Redundancy Check)⭐⭐⭐</h4><ul><li>收发双方约定好一个生成多项式G(x)；</li><li>发送方基于待发送的数据和生成多项式计算出差错检测码（冗余码），将其添加到待传输数据的后面一起传输；</li><li>接收方通过生成多项式来计算收到的数据是否产生了误码。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231119164219319.png" alt="image-20231119164219319"></p><p><strong>举例说明：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011234701845-170038338842625.png" alt="image-20201011234701845"></p><p><strong>例题：</strong></p><blockquote><p>发送方</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231119164816418.png" alt="image-20231119164816418"></p><hr><blockquote><p>接收方</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201011235325022-170038338842627.png" alt="image-20201011235325022"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>检错码只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此<mark>无法纠正错误</mark>。</li><li>要想纠正传输中的差错，可以使用冗余信息更多的<mark>纠错码进行前向纠错</mark>。但纠错码的开销比较大，在计算机网络中<mark>较少使用</mark>。</li><li>循环冗余校验<strong>CRC</strong>有很好的检错能力(<mark>漏检率非常低</mark>)，虽然计算比较复杂，但非常易于用硬件实现，因此被<mark>广泛应用</mark>于数据链路层。</li><li>在计算机网络中通常采用我们后续课程中将要讨论的<mark>检错重传方式来纠正传输中的差错或者仅仅是丢弃检测到差错的帧</mark>，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</li></ul><h2 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h2><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>使用<mark>差错检测技术</mark>(例如循环冗余校验CRC)，可以检测<strong>是否产生了误码</strong>(比特错误)。</li></ul><p><strong>数据链路层向上层提供的服务类型：</strong></p><ol><li><p>不可靠传输服务：仅仅<mark>丢弃</mark>有误码的帧，其他什么也不做；</p></li><li><p>可靠传输服务：<mark>想办法实现发送端发送什么，接收端就接收什么</mark>。</p></li></ol><hr><ul><li><p>一般情况下，<code>有线链路的误码率比较低</code>，为了减小开销，并<code>不要求</code>数据链路层向上提供可靠传输服务。即使出现了误码，可靠传输的问题由其上层处理。</p></li><li><p><code>无线链路</code>易受干扰，误码率比较高，因此<code>要求</code>数据链路层必须向上层提供可靠传输服务。</p></li></ul><hr><ul><li><mark>比特差错</mark>只是传输差错中的一种</li><li>从整个计算机网络体系结构来看，传输差错还包括<mark>分组丢失、分组失序以及分组重复</mark>。</li></ul><hr><ul><li>分组丢失、分组失序以及分组重复这些传输差错，<code>一般不会出现在数据链路层</code>，而会出现在其上层。</li><li>可靠传输服务并不仅局限于数据链路层，其他各层均可选择实现<code>可靠传输</code>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.56i9yun4fa40.webp" alt="image"></p><ul><li><strong>可靠传输的实现比较复杂，开销也比较大</strong>，<mark>是否使用可靠传输取决于应用需求</mark>。</li></ul><h3 id="三种可靠协议"><a href="#三种可靠协议" class="headerlink" title="三种可靠协议"></a>三种可靠协议</h3><p><strong>注意：</strong></p><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以<mark>应用到计算机网络体系结构的各层协议</mark></p><h4 id="停止-等待协议SW"><a href="#停止-等待协议SW" class="headerlink" title="停止-等待协议SW"></a>停止-等待协议SW</h4><h5 id="停止-等待协议可能遇到的四个问题"><a href="#停止-等待协议可能遇到的四个问题" class="headerlink" title="停止-等待协议可能遇到的四个问题"></a>停止-等待协议可能遇到的<mark><strong>四个问题</strong></mark></h5><ol><li><strong>确认与否认</strong></li></ol><img src="../assets/计算机网络/image-20201012162009780.png" alt="image-20201012162009780" style="zoom:67%;" /><ol start="2"><li><strong>超时重传</strong></li></ol><img src="../assets/计算机网络/image-20201012162112151.png" alt="image-20201012162112151" style="zoom:67%;" /><ol start="3"><li><strong>确认丢失</strong></li></ol><img src="../assets/计算机网络/image-20201012162318298.png" alt="image-20201012162318298" style="zoom:67%;" /><img src="../assets/计算机网络/image-20201012162348428.png" alt="image-20201012162348428" style="zoom:67%;" /><blockquote><p>问：既然数据分组需要编号，确认分组是否需要编号？</p><p>答：要，如下图所示：</p></blockquote><ol start="4"><li><strong>确认迟到</strong></li></ol><img src="../assets/计算机网络/image-20201012162815885.png" alt="image-20201012162815885" style="zoom:67%;" /><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p>🌈<strong>注意事项：</strong></p><ul><li>接收端检测到教据分组有误码时，将其丢弃并等待发送方的超时重传。但对于误码率较高的点对点链路，为使发送方<mark>尽早重传</mark>，也可<mark>给发送方发送NAK分组</mark></li><li>为了让接收方能够判断所收到的数据分组是否是重复的，需要给<mark>数据分组编号</mark>，由于停止-等待协议的停等特性，<mark>只需1个比特编号</mark>就够了，即编号0和1。</li><li>为了让发送方能够判断所收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用比特数量一样，<mark>数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止-等待协议可以不用给ACK分组编号。</mark></li><li>超时计时器设置的重传时间应仔细选择。一般可将重传时间选为<mark>略大于“从发送方到接收方的平均往返时间”</mark><ul><li>在数据链路层点对点的往返时间比较确定，重传时间比较好设定。</li><li>然而在运输层，由于端到端往返时间非常不确定，设置合适的重传时间有时并不容易</li></ul></li></ul><hr><h5 id="停止-等待协议的信道利用率"><a href="#停止-等待协议的信道利用率" class="headerlink" title="停止-等待协议的信道利用率"></a>停止-等待协议的<mark><strong>信道利用率</strong></mark></h5><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012164924635.png" alt="image-20201012164924635"></p><ul><li><strong>当往返时延RTT远大于数据帧发送时延T<del>D</del>时(例如使用卫星链路)，信道利用率非常低。</strong></li><li>若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。</li><li>为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。</li></ul><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h4 id="回退N帧协议GBN"><a href="#回退N帧协议GBN" class="headerlink" title="回退N帧协议GBN"></a>回退N帧协议GBN</h4><h5 id="为什么用回退N帧协议"><a href="#为什么用回退N帧协议" class="headerlink" title="为什么用回退N帧协议"></a>为什么用回退N帧协议</h5><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012190027828.png" alt="image-20201012190027828"></p><p>回退N帧协议在流水线传输的基础上，<mark>利用发送窗口来限制发送方可连续发送数据分组的个数</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012190632086.png" alt="image-20201012190632086"></p><h5 id="无差错情况流程"><a href="#无差错情况流程" class="headerlink" title="无差错情况流程"></a>无差错情况<mark>流程</mark></h5><blockquote><p>一句话总结流程：类似于<mark>滑动窗口</mark>，发送方只能在发送窗口内发送分组，接收方的窗口大小只能为1，接受到一个完整的无受损的分组，接收方的窗口就可以后移以匹配下一个序号上的分组，同时接收方还要发送确认分组，发送方收到确认分组也要将窗口右移，比如返回AK<del>3</del>就代表序号3（包括3）的位置的分组都已经成功接收了，此时可以右移到序号3后的位置。</p></blockquote><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012191936466.png" alt="image-20201012191936466"></p><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012192932035.png" alt="image-20201012192932035"></p><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012193212419.png" alt="image-20201012193212419"></p><h5 id="累积确认"><a href="#累积确认" class="headerlink" title="累积确认"></a>累积确认</h5><ol><li>概念：</li></ol><p>接收方不一定要对收到的数据分组逐个发送确认，而是可以在收到几个数据分组后 （由具体实现决定）对按序到达的最后一个数据分组发送确认。ACK<del>n</del>表示序号为n及以前的所有数据分组都已正确接收。</p><ol start="2"><li>优缺点</li></ol><ul><li><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul></li><li><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></li></ul><h5 id="有差错情况"><a href="#有差错情况" class="headerlink" title="有差错情况"></a>有差错情况</h5><ol><li><strong>传输过程中出现误码</strong></li></ol><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012195440780.png" alt="image-20201012195440780"></p><p>于是<mark>丢弃该分组</mark>，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012195629368.png" alt="image-20201012195629368"></p><p>接收方同样也不能接收它们，将它们<mark>丢弃</mark>，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<mark><strong>每丢弃一个数据分组，就发送一个ACK4</strong></mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012195836902.png" alt="image-20201012195836902"></p><p><mark>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错</mark>，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012200120166.png" alt="image-20201012200120166"></p><p> 如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012200454557.png" alt="image-20201012200454557"></p><p>例题：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231121201715658.png" alt="image-20231121201715658"></p><ol start="2"><li><strong>若W<del>T</del>或者W<del>R</del>超过取值范围，会出现什么情况？（包含回退N帧和选择重传）</strong></li></ol><p><mark><strong>接收方无法分辨新、旧数据分组</strong></mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231121204447408.png" alt="image-20231121204447408"></p><p>这里<mark><strong>拿后面的选择重传的例子举例说明</strong></mark>：</p><p>⭐⭐⭐<strong>回答：</strong></p><blockquote><p>当发送方发送了0到4序号的分组给接收方，接收方都正确地接收了，并把滑动窗口右移了，但是在确认分组返回给发送方的时候序号为0的分组丢失了，那么此时会记录1到4是正确接收了的，那么等重传计时器超时了，就会重新发送0位置的分组，但是接收方处已经后移，因为W<del>R</del>的选择超过了取值范围，所以在新的接收窗口中又找到了序号0的位置，那么此时接收方就分不清前面的序号0和此时的序号0，即接收方无法分辨新、旧数据分组</p></blockquote><p>🔴🟡🟢<strong>总结：</strong></p><ul><li>回退N顿协议在<mark>流水线传输的基础</mark>上<mark>利用发送窗口来限制发送方连续发送数据分组的数量</mark>，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为<mark><strong>滑动窗口协议</strong></mark></li><li>由于回退N顿协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231121201901475.png" alt="image-20231121201901475"></p><h4 id="选择重传协议SR"><a href="#选择重传协议SR" class="headerlink" title="选择重传协议SR"></a>选择重传协议SR</h4><p>🔴🟡🟢<strong>一句话总结：</strong></p><blockquote><p>具体流程与回退N帧协议类似，只是选择重传协议中，在接收时不需要按序接收了，<mark>只要落在窗口内就能接收</mark>，<mark>依次逐个</mark>返回相应序号的确认分组，且发送方只重传没有被正确接收的分组。</p></blockquote><hr><ul><li><strong>回退N帧协议</strong>的接收窗口尺寸<strong>W<del>r</del>只能等于1</strong>，<strong>因此接收方只能按序接收正确到达的数据分组</strong>。</li><li>一个数据分组的误码就会导致其后续多个数据分组不能被接收方按序接收而丢弃 (尽管它们无乱序和误码)。这必然会造成发送方对这些数据分组的超时重传，显然这是对通信<mark>资源的极大浪费</mark>。</li><li>为了进一步提高性能，可设法只重传出现误码的数据分组。因此，接收窗口的尺寸<mark>W<del>R</del>不应再等于1 (而应大于1)</mark>，以便<mark>接收方先收下失序到达但无误码并且序号落在接收窗口内的那些数据分组</mark>，等到所缺分组收齐后再一并送交上层。这就是<mark>选择重传协议</mark>。</li><li>注意:<ul><li><strong>选择重传协议</strong>为了使发送方仅重传出现差错的分组，接收方<mark>不能再采用累积确认</mark>，而需要对每个正确接收到的数据分组进行<mark>逐一确认!</mark></li></ul></li></ul><p>例题：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231121205516313.png" alt="image-20231121205516313"></p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前<mark>使用最广泛的点对点数据链路层协议</mark></li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为<mark>因特网的正式标准</mark>[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；<mark>只检测差错，而不是纠正差错</mark>；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012210844629.png" alt="image-20201012210844629"></p><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012211423528.png" alt="image-20201012211423528"></p><blockquote><p>承上启下的作用</p></blockquote><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p>必须规定特殊的字符作为帧定界符</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012211826281.png" alt="image-20201012211826281"></p><h3 id="透明传输-1"><a href="#透明传输-1" class="headerlink" title="透明传输"></a>透明传输</h3><p>必须保证数据传输的透明性</p><p>实现透明传输的方法：</p><ul><li><strong>面向字节的异步链路</strong>：字节填充法（插入“转义字符”）</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012212148803.png" alt="image-20201012212148803"></p><ul><li><strong>面向比特的同步链路</strong>：比特填充法（插入“比特0”）</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012212255550.png" alt="image-20201012212255550"></p><h3 id="差错检测-1"><a href="#差错检测-1" class="headerlink" title="差错检测"></a>差错检测</h3><p>能够对接收端收到的帧进行检测，并<mark>立即丢弃</mark>有差错的帧。<mark>向上层提供的是不可靠的服务</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012212558654.png" alt="image-20201012212558654"></p><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201012213021860.png" alt="image-20201012213021860"></p><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><h2 id="媒体接入控制（介质访问控制）MAC—广播信道"><a href="#媒体接入控制（介质访问控制）MAC—广播信道" class="headerlink" title="媒体接入控制（介质访问控制）MAC—广播信道"></a>媒体接入控制（介质访问控制）MAC—广播信道</h2><h3 id="媒体接入控制的基本概念"><a href="#媒体接入控制的基本概念" class="headerlink" title="媒体接入控制的基本概念"></a>媒体接入控制的基本概念</h3><ul><li><strong>共享信道</strong>着重考虑一个问题：<mark>如何协调媒体接入控制MAC</mark>(Medium Access Control)。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.2mhukq83oiq0.webp" alt="image"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.280s01udv51c.webp" alt="image"></p><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h3 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h3><ol><li>信道复用</li></ol><p><strong>复用(Multiplexing)是通信技术中的一个重要概念</strong>。<mark>复用</mark>就是通过**一条物理线路同时传输多路用户的<mark>**信号</mark>。</p><p>当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时,可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4pu8jh6zvgy0.webp" alt="image"></p><ol start="2"><li>频分复用FM</li></ol><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4clh309v96y0.webp" alt="image"></p><blockquote><p>频分复用的所有用户同时占用不同的频带资源并行通信。</p></blockquote><ol start="3"><li>时分复用TDM</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4hv0n06v2360.webp" alt="image"></p><blockquote><p>时分复用的所有用户在不同的时间占用同样的频带宽度。</p></blockquote><ol start="4"><li>波分复用WDM</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.2zy3fibqo2u0.webp" alt="image"></p><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用<strong>掺铒光纤放大器</strong>放大光信号</p></blockquote><ol start="5"><li>码分复用CDM  (Code Division Multiplexing)</li></ol><p><strong>基本概念：</strong></p><ul><li>与FDM和TDM不同，CDM的每一个用户可以<mark>在同样的时间使用同样的频带进行通信</mark>。</li><li>由于各用户使用经过特殊挑选的不同码型，因此<mark>各用户之间不会造成干扰</mark>。</li></ul><p>⭐⭐⭐<strong>关于计算：</strong></p><p>在CDMA中，每一个比特时间再划分为m个短的间隔，称为<mark>码片</mark> (Chip)。通常m的值是64或128。为了简单起见，在后续的举例中，我们假设m为8。</p><p>使用CDMA的每一个站被指派一个唯一的<mark>m bit码片序列</mark> (Chip Sequence)</p><ul><li>一个站如果<mark>要发送比特1</mark>，则<mark>发送它自己的m bit码片序列</mark>;</li><li>一个站如果<mark>要发送比特0</mark>，则<mark>发送它自己的m bit码片序列的二进制反码</mark></li></ul><p><strong>举例：</strong></p><p>指派给CDMA系统中某个站点的码片序列为<mark>00011011</mark><br>发送比特1：发送自己的码片序列<mark>00011011</mark></p><p>发送比特0：发送自己的码片序列的二进制反码<mark>11100100</mark></p><p>为了方便，我们按惯例将码片序列中的0写为-1，将1写为+1，则该站点的码片序列是<mark>(-1 -1-1 +1 +1-1 +1 +1)</mark>。</p><p><strong>码片序列的挑选原则如下:</strong></p><ol><li>分配给每个站的<mark>码片序列必须各不相同</mark>，实际常采用伪随机码序列</li><li>分配给每个站的<mark>码片序列必须相互正交</mark> (规格化内积为0)。<br>令向量S表示站S的码片序列，令向量T表示其他任何站的码片序列。<br>两个不同站S和T的码片序列正交，就是向量S和T的规格化内积为0：</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122153656906.png" alt="image-20231122153656906"></p><p><strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013203459640.png" alt="image-20201013203459640"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013203819578.png" alt="image-20201013203819578"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122154047803.png" alt="image-20231122154047803"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122154252843.png" alt="image-20231122154252843"></p><h3 id="动态接入控制"><a href="#动态接入控制" class="headerlink" title="动态接入控制"></a>动态接入控制</h3><h4 id="随机接入（CSMA-CD协议）"><a href="#随机接入（CSMA-CD协议）" class="headerlink" title="随机接入（CSMA&#x2F;CD协议）"></a>随机接入（CSMA&#x2F;CD协议）</h4><h5 id="多址接入MA"><a href="#多址接入MA" class="headerlink" title="多址接入MA"></a>多址接入MA</h5><p>表示许多主机以多点接入的方式连接在一根总线上。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013215400688.png" alt="image-20201013215400688"></p><h5 id="载波监听CS"><a href="#载波监听CS" class="headerlink" title="载波监听CS"></a>载波监听CS</h5><p>是指每一个站在<mark>发送数据之前</mark>先要<mark>检测一下总线上是否有其他计算机在发送数据</mark>，如果有，则暂时不要发送数据，以免发生碰撞。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013215530979.png" alt="image-20201013215530979"></p><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h5 id="碰撞检测CD"><a href="#碰撞检测CD" class="headerlink" title="碰撞检测CD"></a>碰撞检测CD</h5><ul><li><strong>“碰撞检测”</strong>就是计算机<strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“<mark>碰撞检测”也称为“冲突检测</mark>”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013221240514.png" alt="image-20201013221240514"></p><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013221834942.png" alt="image-20201013221834942"></p><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h5 id="CSMA-CD-协议工作流程"><a href="#CSMA-CD-协议工作流程" class="headerlink" title="CSMA&#x2F;CD 协议工作流程"></a>CSMA&#x2F;CD 协议工作流程</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013221705893.png" alt="image-20201013221705893"></p><h5 id="争用期（碰撞窗口）"><a href="#争用期（碰撞窗口）" class="headerlink" title="争用期（碰撞窗口）"></a>争用期（碰撞窗口）</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122180352561.png" alt="image-20231122180352561"></p><ul><li>主机<mark>最多经过2τ的时长</mark>就可检测到本次发送是否遭受了碰撞</li><li>因此，<mark>以太网的端到端往返传播时延2τ称为争用期或碰撞窗口</mark>。</li><li>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</li><li>显然，在以太网中发送顿的主机越多，端到端往返传播时延越大，发生碰撞的概率就越大。因此，<mark>共享式以太网不能连接太多的主机，使用的总线也不能太长</mark>。</li></ul><blockquote><p><mark><strong>争用期</strong> &#x3D; 2 * 端到端距离 &#x2F; 电磁波信号速率 &#x3D; 2τ</mark></p></blockquote><h5 id="最小帧长"><a href="#最小帧长" class="headerlink" title="最小帧长"></a>最小帧长</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122180741742.png" alt="image-20231122180741742"></p><ul><li><p><mark>以太网规定最小帧长为64字节</mark>，即512比特 (512比特时间即为争用期);</p><ul><li>如果要发送的数据非常少，那么必须加入一些填充字节，使帧长不小于64字节。</li></ul></li><li><p>以太网的<mark>最小帧长确保了主机可在帧发送完成之前就检测到该顿的发送过程中是否遭遇了碰撞</mark></p></li></ul><blockquote><p><mark><strong>最小帧长</strong> &#x3D; 争用期 × 数据传输速率</mark></p></blockquote><h5 id="最大帧长"><a href="#最大帧长" class="headerlink" title="最大帧长"></a>最大帧长</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013225400777.png" alt="image-20201013225400777"></p><h5 id="截断二进制指数退避算法"><a href="#截断二进制指数退避算法" class="headerlink" title="截断二进制指数退避算法"></a>截断二进制指数退避算法</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013230717856.png" alt="image-20201013230717856"></p><h5 id="信道利用率"><a href="#信道利用率" class="headerlink" title="信道利用率"></a>信道利用率</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201013231430295.png" alt="image-20201013231430295"></p><h5 id="帧发送流程"><a href="#帧发送流程" class="headerlink" title="帧发送流程"></a>帧发送流程</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122181358004.png" alt="image-20231122181358004"></p><h5 id="帧接收流程"><a href="#帧接收流程" class="headerlink" title="帧接收流程"></a>帧接收流程</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122181434076.png" alt="image-20231122181434076"></p><h5 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h5><ul><li>使用 CSMA&#x2F;CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 </li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA&#x2F;CD协议曾经用于各种总线结构以太网和双绞线以太网的早期版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA&#x2F;CS协议</strong></p></blockquote><h5 id="⭐⭐⭐例题"><a href="#⭐⭐⭐例题" class="headerlink" title="⭐⭐⭐例题"></a>⭐⭐⭐<strong>例题</strong></h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122181741690.png" alt="image-20231122181741690"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122174456671.png" alt="image-20231122174456671"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122181843695.png" alt="image-20231122181843695"></p><p>解析：<strong>最短需要经过的时间</strong>是主机甲和主机乙同时发送数据，到达中间时刻后发生碰撞，那么就会返回碰撞信号回去，那么时间就为花费端到端距离的一半的时间加上返回碰撞信号的时间（同样为端到端距离的一半的时间），加起来一共就是花费端到端距离的时间。</p><p><strong>最长需要经过的时间</strong>：假设主机甲发送数据后，已经无限接近于主机乙了，此时主机乙才发送数据，在无限趋近于主机乙的地点发生了碰撞，那么时间花费就为主机甲发送数据到主机乙的时间（即端到端距离的的时间）加上碰撞信号返回给主机甲的时间（也即端到端距离的时间）&#x3D;两倍的端到端的距离所花费的时间。</p><h4 id="随机接入（CSMA-CA协议）"><a href="#随机接入（CSMA-CA协议）" class="headerlink" title="随机接入（CSMA&#x2F;CA协议）"></a>随机接入（CSMA&#x2F;CA协议）</h4><h5 id="为什么无线局域网要使用CSMA-CA协议"><a href="#为什么无线局域网要使用CSMA-CA协议" class="headerlink" title="为什么无线局域网要使用CSMA&#x2F;CA协议"></a>为什么无线局域网要使用CSMA&#x2F;CA协议</h5><blockquote><p>问：既然CSMA&#x2F;CD协议已经成功地应用于使用广播信道的有线局域网，那么同样使用广播信道的无线局域网能不能也使用CSMA&#x2F;CD协议呢?</p></blockquote><ul><li><mark>在无线局域网中，仍然可以使用载波监听多址接入CSMA</mark>，即在发送顿之前先对传输媒体进行载波监听。若发现有其他站在发送帧，就推迟发送以免发生碰撞。</li><li><mark>在无线局域网中，不能使用碰撞检测CD</mark>，原因如下:<ul><li>由于无线信道的传输条件特殊，其信号强度的动态范围非常大，无线网卡上接收到的信号强度往往会远远小于发送信号的强度 (可能相差百万倍)。<mark>如果要在无线网卡上实现碰撞检测CD，对硬件的要求非常高</mark>。</li><li>即使能够在硬件上实现无线局域网的碰撞检测功能，但由于无线电波传播的特殊性（<mark>存在<strong>隐蔽站问题</strong></mark>），<mark>进行碰撞检测的意义也不大</mark>。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122220836351.png" alt="隐蔽站问题"></p><ul><li><mark>802.11无线局域网</mark>使用CSMA&#x2F;CA协议，在CSMA的基础上增加了一个<mark><strong>碰撞避免CA功能</strong></mark>，而不再实现碰撞检测功能。</li><li>由于不可能避免所有的碰撞，并且<mark>无线信道误码率较高</mark>，802.11标准还使用了数据链路层<mark><strong>确认机制（停止-等待协议）</strong></mark>来保证数据被正确接收。</li><li>802.11的MAC层标准定义了两种不同的媒体接入控制方式：<ul><li><strong>分布式协调功能DCF</strong>(Distributed Coordination Function)。在DCF方式下，没有中心控制站点，每个站点使用CSMA&#x2F;CA协议通过争用信道来获取发送权，这是802.11定义的默认方式。</li><li><strong>点协调功能PCF</strong>(Point Coordination Function)。PCF方式使用集中控制的接入算法(一般在接入点AP实现集中控制)，是802.11定义的可选方式，在实际中较少使用。</li></ul></li></ul><h5 id="帧间间隔IFS（InterFrame-Space）"><a href="#帧间间隔IFS（InterFrame-Space）" class="headerlink" title="帧间间隔IFS（InterFrame Space）"></a>帧间间隔IFS（InterFrame Space）</h5><ul><li>802.11标准规定，所有的<mark>站点必须在持续检测到信道空闲一段指定时间后才能发送帧</mark>，这段时间称为帧间间隔IFS。</li><li>帧间间隔的长短取决于该站点要发送的帧的类型：<ul><li>高优先级需要等待的时间较短，因此可优先获得发送权；</li><li>低优先级帧需要等待的时间较长。若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就<strong>减少了发生碰撞的机会</strong>。</li></ul></li><li>常用的两种帧间间隔如下：<ul><li>**短帧间间隔SIFS(28us)**，是最短的顿间间隔，用来分隔开属于一次对话的各。一个站点应当能够在这<br>段时间内从发送方式切换到接收方式。使用SIFS的帧类型有ACK帧、CTS、由过长的MAC分片后的数据帧、以及所有回答AP探询的帧和在PCF方式中接入点AP发送出的任何帧。</li><li>**DCF帧间间隔DIFS(128us)**，它比短间间隔SIFS要长得多，在DCF方式中用来发送数据顿和管理帧。</li></ul></li></ul><h5 id="CSMA-CA协议的工作原理"><a href="#CSMA-CA协议的工作原理" class="headerlink" title="CSMA&#x2F;CA协议的工作原理"></a>CSMA&#x2F;CA协议的工作原理</h5><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014200833233.png" alt="image-20201014200833233"></p><blockquote><p><strong>问：源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>问：目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014201511741.png" alt="image-20201014201511741"></p><blockquote><p><strong>问：信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><h5 id="CSMA-CA协议的退避算法"><a href="#CSMA-CA协议的退避算法" class="headerlink" title="CSMA&#x2F;CA协议的退避算法"></a>CSMA&#x2F;CA协议的退避算法</h5><p><strong>使用退避算法的原因：</strong></p><blockquote><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机：</strong></p><ul><li><p>以下情况必须使用退避算法:</p><ul><li>在发送数据帧之前检测到信道处于忙状态时；</li><li>在每一次重传一个数据帧时；</li><li>在每一次成功发送后要连续发送下一个时(这是为了避免一个站点长时间占用信道)。</li></ul></li><li><p>在执行退避算法时，站点为退避计时器设置一个<mark>随机的退避时间</mark>:</p><ul><li>当退避计时器的时间减小到零时，就开始发送数据:</li><li>当退避计时器的时间还未减小到零时而信道又转变为忙状态，这时就<mark>冻结</mark>退避计时器的数值，重新等待信道变为空闲，再经过时间DIFS后，继续启动退避计时器.</li></ul></li><li><p>在进行第i次退避时，退避时间在时隙编号{0，1，…，2?1中随机选择一个，然后乘以基本退避时间(也就是一个时隙的长度)就可以得到随机的退避时间。这样做是为了使不同站点选择相同退避时间的概率减少。当时隙编号达到255时(对应于第6次退避)就不再增加了。</p></li></ul><p><strong>退避算法的示例：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014202819851.png" alt="image-20201014202819851"></p><h5 id="CSMA-CA协议的信道预约和虚拟载波监听"><a href="#CSMA-CA协议的信道预约和虚拟载波监听" class="headerlink" title="CSMA&#x2F;CA协议的信道预约和虚拟载波监听"></a>CSMA&#x2F;CA协议的信道预约和虚拟载波监听</h5><p>为了<mark>尽可能减少碰撞的概率</mark>和降低碰撞的影响，802.11标准允许要发送数据的站点<mark>对信道进行预约</mark>。</p><p>流程如下：</p><ol><li>源站在发送数据顿之前先发送一个短的控制，称为<mark>请求发送RTS</mark>(Request To Snd)，它包括源地址目的地址以及这次通信(包括相应的确认帧) 所需的持续时间。</li><li>若目的站正确收到源站发来的RTS，且媒体空闲，就发送一个响应控制帧，称为<mark>允许发送CTS</mark>(Clear To Send)，它也包括这次通信所需的持续时间 (从RTS帧中将此持续时间复制到CTS中)。</li><li>源站收到CTS顿后，再等待一段时间SIFS后，就可发送其数据帧。</li><li>若目的站正确收到了源站发来的数据帧，在等待时间SIFS后，就向源站发送确认帧ACK。</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122222251840.png" alt="image-20231122222251840"></p><ul><li>除源站和目的站以外的<strong>其他各站</strong>，在<strong>收到CTS帧(或数据)后就<mark>推迟接入</mark>到无线局域网中</strong>。这样就保证了源站和目的站之间的通信不会受到其他站的干扰。</li><li>如果RTS帧发生碰撞，源站就收不到CTS顿，需执行退避算法重传RTS帧。</li><li>由于<mark>RTS帧和CTS帧很短，发送碰撞的概率、碰撞产生的开销及本身的开销都很小</mark>。而对于一般的数据顿，其发送时延往往大于传播时延(因为是局域网)，碰撞的概率很大，且一旦发生碰撞而导致数据帧重发，则浪费的时间就很多，因此<mark>用很小的代价对信道进行预约往往是值得的</mark>。</li><li>802.11标准规定了3种情况供用户选择：<ul><li>使用RTS帧和CTS帧</li><li>不使用RTS帧和CTS帧</li><li>只有当数据帧的长度超过某一数值时才使用RTS帧和CTS帧</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122222731704.png" alt="image-20231122222731704"></p><ul><li>由于利用虚拟载波监听机制，<mark>站点只要监听到RTS帧、CTS或数据帧中的任何一个，就能知道信道被占用的持续时间</mark>，而不需要真正监听到信道上的信号，因此虚拟载波监听机制能减少隐蔽站带来的碰撞问题。</li></ul><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231122222958453.png" alt="image-20231122222958453"></p><blockquote><p>C从B发送的CTS知道了其占用信道的时间，则该时间段内C是不会向B发送数据的，这样就能减少隐蔽站带来的碰撞问题</p></blockquote><h2 id="MAC地址、IP地址以及ARP协议"><a href="#MAC地址、IP地址以及ARP协议" class="headerlink" title="MAC地址、IP地址以及ARP协议"></a>MAC地址、IP地址以及ARP协议</h2><ul><li>MAC地址是以太网的MAC子层所使用的地址；（属于数据链路层）</li><li>IP地址是TCP&#x2F;IP体系结构网际层所使用的地址；（属于网际层）</li><li>ARP协议属于TCP&#x2F;IP体系结构的网际层，其作用是已知设备所分配到的IP地址，<mark>使用ARP协议可以通过该IP地址获取到设备的MAC地址</mark>；（属于网际层）</li><li>尽管IP地址和ARP协议属于TCP&#x2F;IP体系结构的网际层(而不属于数据链路层)，但是它们与MAC地址存在一定的关系，并且我们日常的网络应用都离不开MAC地址、IP地址以及ARP协议。因此，我们将这三者放在一起讨论。</li></ul><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014223659993.png" alt="image-20201014223659993"></p><h4 id="广播信道的数据链路层必须使用地址（MAC）"><a href="#广播信道的数据链路层必须使用地址（MAC）" class="headerlink" title="广播信道的数据链路层必须使用地址（MAC）"></a>广播信道的数据链路层必须使用地址（MAC）</h4><ul><li>当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识，即一个数据链路层地址;</li><li>在每个主机发送的<mark>帧中必须携带标识发送主机和接收主机的地址</mark>。由于这类地址是用于媒体接入控制<br>MAC(Media Access Control)，因此这类地址被称为<mark>MAC地址</mark>；</li><li>MAC地址又称作硬件地址或物理地址。（<mark>注意：这并不意味着MAC地址属于网络体系结构中的物理层</mark>）</li><li>一般情况下，用户主机会包含两个网络适配器: 有线局域网适配器(有网卡)和无线局域网适配器(无线网卡)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，<mark>严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识</mark>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123152543906.png" alt="image-20231123152543906"></p><h4 id="IEEE-802局域网的MAC地址格式"><a href="#IEEE-802局域网的MAC地址格式" class="headerlink" title="IEEE 802局域网的MAC地址格式"></a>IEEE 802局域网的MAC地址格式</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014225358570.png" alt="image-20201014225358570"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014230248959.png" alt="image-20201014230248959"></p><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong> </p></blockquote><h4 id="IEEE-802局域网的MAC地址发送顺序"><a href="#IEEE-802局域网的MAC地址发送顺序" class="headerlink" title="IEEE 802局域网的MAC地址发送顺序"></a>IEEE 802局域网的MAC地址发送顺序</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014230625182.png" alt="image-20201014230625182"></p><h4 id="单播MAC地址举例"><a href="#单播MAC地址举例" class="headerlink" title="单播MAC地址举例"></a>单播MAC地址举例</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014230822305.png" alt="image-20201014230822305"></p><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014231244655.png" alt="image-20201014231244655"></p><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧，并将该帧交给其上层处理</p></blockquote><h4 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014231754669.png" alt="image-20201014231754669"></p><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014232132424.png" alt="image-20201014232132424"></p><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h4 id="多播MAC地址举例"><a href="#多播MAC地址举例" class="headerlink" title="多播MAC地址举例"></a>多播MAC地址举例</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201014232714791.png" alt="image-20201014232714791"></p><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015001243584.png" alt="image-20201015001243584"></p><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015001535528.png" alt="image-20201015001535528"></p><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015002054876.png" alt="image-20201015002054876"></p><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p><mark><strong>IP地址和MAC地址的区别：</strong></mark></p><ol><li><strong>作用层次不同：</strong><ul><li><strong>MAC地址：</strong> 作用于数据链路层（第二层）上，用于在局域网内唯一<strong>标识网络设备的物理网络接口</strong>，例如以太网卡。</li><li><strong>IP地址：</strong> 作用于网络层（第三层）上，用于在全球范围内唯一<strong>标识网络上的设备</strong>，并支持设备之间的逻辑通信。</li></ul></li><li><strong>唯一性范围不同：</strong><ul><li><strong>MAC地址：</strong> 在一个局域网内是唯一的，由网络设备的制造商分配。当数据包在局域网内传输时，路由器通常不修改MAC地址。</li><li><strong>IP地址：</strong> 在全球范围内是唯一的，由互联网注册机构（如ICANN）分配。IP地址用于在不同网络之间进行通信，路由器在转发数据包时通常会修改源和目标的IP地址。</li></ul></li><li><strong>层次关系：</strong><ul><li><strong>MAC地址：</strong> 位于数据链路层，用于在同一局域网内直接通信，是数据链路层的地址。</li><li><strong>IP地址：</strong> 位于网络层，用于在不同网络之间进行通信，是网络层的地址。</li></ul></li></ol><blockquote><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p></blockquote><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p>IP地址是因特网(Internet) 上的主机和路由器所使用的地址，用于标识两部分信息:</p><ul><li><strong>网络编号</strong>: 标识因特网上数以百万计的网络</li><li><strong>主机编号</strong>: 标识同一网络上不同主机(或路由器各接口)</li></ul></li><li><p>很显然，之前介绍的MAC地址不具备区分不同网络的功能。</p><ul><li>如果只是一个单独的网络，不接入因特网，可以只使用MAC地址 (这不是一般用户的应用方式)</li><li>如果主机所在的网络要接入因特网，则IP地址和MAC地址都需要使用。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123161030825.png" alt="image-20231123161030825"></p><h4 id="从网络体系结构看IP地址与MAC地址"><a href="#从网络体系结构看IP地址与MAC地址" class="headerlink" title="从网络体系结构看IP地址与MAC地址"></a>从网络体系结构看IP地址与MAC地址</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123161405686.png" alt="image-20231123161405686"></p><h4 id="数据包转发过程中IP地址与MAC地址的变化情况"><a href="#数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="数据包转发过程中IP地址与MAC地址的变化情况"></a>数据包转发过程中IP地址与MAC地址的变化情况</h4><ul><li>数据包转发过程中<mark>源IP地址和目的IP地址保持不变</mark></li><li>数据包转发过程中<mark>源MAC地址和目的MAC地址逐个链路 (或逐个网络)改变</mark></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123161720608.png" alt="image-20231123161720608"></p><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015113826197.png" alt="image-20201015113826197"></p><p>ARP高速缓存表</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015114052206.png" alt="image-20201015114052206"></p><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015114444263.png" alt="image-20201015114444263"></p><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015114811501.png" alt="image-20201015114811501"></p><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015115212170.png" alt="image-20201015115212170"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015115236673.png" alt="image-20201015115236673"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015115252972.png" alt="image-20201015115252972"></p><p>动态与静态的区别</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015115831543.png" alt="image-20201015115831543"></p><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201015120108028.png" alt="image-20201015120108028"></p><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li><p>源主机在自己的<mark>ARP高速缓存表</mark>中查找目的主机的IP地址所对应的MAC地址，若找到了，则可以封装MAC帧进行发送;若找不到，则发送<mark>ARP请求(封装在<strong>广播MAC</strong>中)</mark> ；</p></li><li><p>目的主机收到ARP请求后，将源主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后给源主机发送<mark>ARP响应 (封装在<strong>单播MAC帧</strong>中)</mark>，ARP响应中包含有目的主机的IP地址和MAC地址；</p></li><li><p>源主机收到ARP响应后，将目的主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后就可以封装之前想发送的MAC帧并发送给目的主机；</p></li><li><p><mark>ARP的作用范围: 逐段链路或逐个网络使用</mark></p></li><li><p><strong>除ARP请求和响应外，ARP还有其他类型的报文</strong>(例如用于检查IP地址冲突的“无故ARP、免费ARP(Gratuitous ARP)”);</p></li><li><p>ARP没有安全验证机制，<strong>存在ARP欺骗(攻击)问题</strong></p></li><li><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></li></ul><h2 id="集线器与交换机的区别"><a href="#集线器与交换机的区别" class="headerlink" title="集线器与交换机的区别"></a>集线器与交换机的区别</h2><h3 id="⭐⭐⭐总结"><a href="#⭐⭐⭐总结" class="headerlink" title="⭐⭐⭐总结"></a>⭐⭐⭐总结</h3><p>🔴🟢🟡<strong>GPT总结：集线器，交换机，路由器的区别：</strong></p><ol><li><strong>功能：</strong><ul><li><strong>集线器（Hub）：</strong> 是一个简单的网络设备，它将收到的数据包广播到所有连接的设备，而无论这些设备是否是目标设备。</li><li><strong>交换机（Switch）：</strong> 是一个更智能的设备，能够根据MAC地址学习和过滤数据包，只将数据包发送到目标设备，提高网络效率。</li><li><strong>路由器（Router）：</strong> 是用于连接不同网络的设备，能够理解网络层（IP层）的地址，并根据这些地址转发数据包，实现不同网络之间的通信。</li></ul></li><li><strong>工作层次：</strong><ul><li><strong>集线器：</strong> 工作在物理层，主要是通过电缆传输比特。</li><li><strong>交换机：</strong> 工作在数据链路层，使用MAC地址进行数据包的转发。</li><li><strong>路由器：</strong> 工作在网络层，使用IP地址进行数据包的转发。</li></ul></li><li><strong>地址学习和转发：</strong><ul><li><strong>集线器：</strong> 不具备地址学习功能，简单地广播所有接收到的数据包。</li><li><strong>交换机：</strong> 通过学习MAC地址，只将数据包发送到目标设备，<mark>提高网络效率</mark>。</li><li><strong>路由器：</strong> 通过学习IP地址，能够识别不同网络之间的数据包，实现跨网络的通信。</li></ul></li><li><strong>网络层次：</strong><ul><li><strong>集线器和交换机：</strong> 主要在局域网内工作，连接同一网络的设备。</li><li><strong>路由器：</strong> 主要用于连接不同网络，实现跨网络通信。</li></ul></li><li><strong>广播和碰撞：</strong><ul><li><strong>集线器：</strong> 会导致网络中的广播风暴和碰撞，影响性能。</li><li><strong>交换机：</strong> 通过划分冲突域（collision domain）和广播域（broadcast domain），减少了广播和碰撞。</li><li><strong>路由器：</strong> 将不同网络隔离，减少了广播域。</li></ul></li></ol><p>总的来说，集线器主要是物理层设备，交换机是数据链路层设备，而路由器则工作在网络层。它们各自在网络中发挥不同的作用，有助于构建灵活且高效的计算机网络。</p><h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><p><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA&#x2F;CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</p><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123205018297.png" alt="image-20231123205018297"></p><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li><mark><strong>碰撞域</strong>增大了</mark>，但总的吞吐量并未提高。</li></ol></li></ul><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><img src="file://G:/BaiduNetdiskDownload/1.%E8%B5%84%E6%96%99/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%88%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89.assets/image-20201015152232158.png?lastModify=1700702613" alt="image-20201015152232158"></p><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，<mark>该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></mark>。</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>基本特点：</strong></p><ul><li>以太网交换机通常都有<mark>多个接口</mark>。每个接口都可以直接与一台主机或另一个以太网交换机相连。一般都工作在<mark>全双工方式</mark>。</li><li>以太网交换机具有并行性，能<mark>同时连通多对接口</mark>，使多对主机能同时通信，<mark>无碰撞</mark> (不使用CSMA&#x2F;CD协议)</li><li>以太网交换机一般都具有多种速率的接口，例如:10Mb&#x2F;s、100Mb&#x2F;s、1Gb&#x2F;s、10Gb&#x2F;s接口的多种组合</li><li>以太网交换机<mark>工作在数据链路层</mark> (也包括物理层)，它收到帧后，在帧交换表中<mark>查找帧的目的MAC地址所对应的接口号</mark>，然后通过该接口转发帧。</li><li>以太网交换机是一种即插即用设备，其内部的恢交换表是通过<mark>自学习算法</mark>自动地逐渐建立起来的。</li><li>帧的两种转发方式：<ol><li><strong>存储转发</strong></li><li><strong>直通交换</strong>：采用基于硬件的交叉矩阵 (交换时延非常小，但不检查帧是否右差错)</li></ol></li></ul><p><strong>多台主机同时给另一台主机发送单播帧：</strong></p><ul><li><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p></li><li><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p></li></ul><h2 id="以太网交换机自学习和转发帧的流程"><a href="#以太网交换机自学习和转发帧的流程" class="headerlink" title="以太网交换机自学习和转发帧的流程"></a>以太网交换机自学习和转发帧的流程</h2><h3 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>以太网交换机工作在<strong>数据链路层</strong> （也包括物理层）</li><li>以太网交换机收到帧后，在帧交换表中<strong>查找帧的目的MAC地址所对应的接口号</strong>，然后通过该接口转发帧.</li><li>以太网交换机是一种即插即用设备，刚上电启动时其内部的顿交换表是空的。随着网络中各主机间的通信，以太网交换机通过<mark>自学习算法</mark>自动<mark>逐渐建立起帧交换表</mark></li></ul><blockquote><p>🔴🟢🟡<strong>一句话总结：</strong></p><p>一开始以太网交换机是空的，那么当主机B去发送帧给主机C时，会先去帧交换表中查询目的MAC地址，如果存在该地址，那么就能明确地从该地址所对应的接口处转发该帧；</p><p>如果不存在该地址，那么就会进行盲目转发，给除了发送该帧进来的接口外的其他接口全部发送该帧，这些帧转发出去如果发现目的MAC地址与本地的MAC地址不一致就会丢弃该帧；</p><p>如果与本地的MAC地址一致就会接收该帧，返回确认帧的情况就跟上面类似了，也是先查表，查到就精确发送，查不到就盲目发送</p></blockquote><hr><p><strong>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123211851067.png" alt="image-20231123211851067"></p><ul><li>帧交换表中的每条记录都有自己的<strong>有效时间</strong>，到期删除。原因如下：<ul><li>交换机的接口改接了另一台主机；</li><li>主机更换了网卡</li></ul></li></ul><p><strong>补充：</strong></p><p>如图的G-&gt;A的过程，G发送的帧在总线型以太网上会分别发送给A（<mark>发送成功并接收成功</mark>）和交换机1，但是交换机收到后，进行记录表后，<mark>发送目标接口与进来时的接口一致就不会再发送了，因为无意义。</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123213135319.png" alt="image-20231123213135319"></p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123211800769.png" alt="image-20231123211800769"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123211545673.png" alt="image-20231123211545673"></p><h2 id="以太网交换机的生成树协议STP"><a href="#以太网交换机的生成树协议STP" class="headerlink" title="以太网交换机的生成树协议STP"></a>以太网交换机的生成树协议STP</h2><h3 id="如何提高以太网的可靠性"><a href="#如何提高以太网的可靠性" class="headerlink" title="如何提高以太网的可靠性"></a>如何提高以太网的可靠性</h3><ul><li>添加<mark>冗余链路</mark>可以提高以太网的可靠性</li><li>但是，冗余链路也会带来负面效应——形成网络环路</li><li>网络环路会带来以下问题<ul><li><mark>广播风暴</mark><br>大量消耗网络资源，使得网络无法正常转发其他数据帧</li><li><mark>主机收到重复的广播顿</mark><br>大量消耗主机资源</li><li><mark>交换机的帧交换表震荡(漂移)</mark></li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123214653212.png" alt="image-20231123214653212"></p><h3 id="生成树协议STP"><a href="#生成树协议STP" class="headerlink" title="生成树协议STP"></a>生成树协议STP</h3><ul><li>以太网交换机使用<mark>生成树协议STP</mark>(Spanning Tree Protocol)可以在增加元余链路来提高网络可靠性的同时又<mark>避免网络环路带来的各种问题</mark>；</li><li>不论交换机之间采用怎样的物理连接，交换机都能够<mark>自动计算并构建一个逻辑上<strong>没有环路的网络</strong></mark>，其逻辑拓扑结构必须是树型的(无逻辑环路) ；</li><li>最终生成的树型逻辑拓扑<strong>要确保连通整个网络</strong>；</li><li>当首次连接交换机或网络物理拓扑发生变化时(有可能是人为改变或故障)，交换机都将进行<mark>生成树的重新计算</mark>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123214956562.png" alt="image-20231123214956562"></p><hr><h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><h3 id="为什么要虚拟局域网VLAN"><a href="#为什么要虚拟局域网VLAN" class="headerlink" title="为什么要虚拟局域网VLAN"></a>为什么要虚拟局域网VLAN</h3><p>巨大广播域的弊端：</p><ul><li>使用一个或多个以太网交换机互连起来的交换式以太网，其所有站点都属于同一个广播域</li><li>随着交换式以太网规模的扩大，广播域相应扩大</li><li>巨大的广播域会带来很多弊端<ul><li>广播风暴</li><li>难以管理和维护</li><li>潜在的安全问题</li></ul></li></ul><p><mark><strong>广播风暴会浪费网络资源和各主机的CPU资源!</strong></mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123220509612.png" alt="image-20231123220509612"></p><p><strong>分割广播域的方法：</strong></p><ul><li><p>使用路由器可以隔离广播域，但路由器的成本较高</p></li><li><p><mark>使用VLAN技术</mark></p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123220624181.png" alt="image-20231123220624181"></p><h3 id="VLAN基本概念"><a href="#VLAN基本概念" class="headerlink" title="VLAN基本概念"></a>VLAN基本概念</h3><p>如下图所示：用不同的VLAN分割开之后，就只能收到同一个VLAN组中的广播信号了。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123220755458.png" alt="image-20231123220755458"></p><ul><li><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></li><li><p><strong>虚拟局域网其实<mark>仅仅只是</mark>局域网给用户提供的<mark>一种服务</mark>，而并不是一种新型局域网。</strong></p></li></ul><h3 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h3><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能：</p><ol><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ol><p><strong>①对于第一点：</strong></p><ul><li>IEEE 802.1Q帧对以太网的MAC格式进行了扩展，<mark>插入了4字节的VLAN标记</mark></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123223855342.png" alt="image-20231123223855342"></p><ul><li><p>VLAN标记的最后12比特称为<mark>VLAN标识符VID</mark>，它唯一地标志了以太网帧属于哪一个VLAN。</p><ul><li>表示VLAN的VID的有效取值范围是 1~4094.</li></ul></li><li><p>802.1Q帧是由交换机来处理的，而不是用户主机来处理的（<mark><strong>即用户主机处理不了802.1Q帧，只能丢弃</strong></mark>）</p><ul><li>当交换机<mark>收到普通的以太网帧时</mark>，会将其插入4字节的VLAN标记转变为802.1Q，简称<mark>“打标签”</mark></li><li>当交换机<mark>转发802.1Q顿时</mark>，可能会删除其4字节VLAN标记转变为普通以太网帧，简称<mark>“去标签”</mark></li></ul></li></ul><p><strong>②对于第二点：</strong></p><p>交换机的端口类型有以下三种:</p><ol><li>Access</li><li>Trunk</li><li>Hybrid</li></ol><h4 id="Access端口"><a href="#Access端口" class="headerlink" title="Access端口"></a>Access端口</h4><p><mark><strong>交换机与用户计算机之间的互连</strong></mark></p><ul><li>Access端口一般用于连接用户计算机</li><li>Access端口只能属于一个VLAN</li><li>Access端口的PVID值与端口所属VLAN的ID相同(默认为1)</li><li>Access端口接收处理方法:<ul><li>一般只接受“未打标签”的普通以太网MAC帧。根据接收帧的端口的PVID给帧“<mark>打标签</mark>”，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等。</li></ul></li><li>Access端口发送处理方法<ul><li>若帧中的VID与端口的PVID相等，则“<mark>去标签</mark>”并转发该帧；否则不转发。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123225022476.png" alt="image-20231123225022476"></p><h4 id="Trunk端口"><a href="#Trunk端口" class="headerlink" title="Trunk端口"></a>Trunk端口</h4><p><mark><strong>交换机之间或交换机与路由器之间的互连</strong></mark></p><ul><li>Trunk端口一般用于交换机之间或交换机与路由器之间的互连</li><li>Trunk端口可以属于多个VLAN</li><li>用户可以设置Trunk端口的PVID值。默认情况下，Trunk端口的PVID值为1。</li><li>Trunk端口发送处理方法<ul><li>对VID等于PVID的帧<mark>“去标签”再转发</mark></li><li>对VID不等于PVID的帧，<mark>直接转发</mark></li></ul></li><li>Trunk端口接收处理方法<ul><li>接收“未打标签”的帧，根据接收帧的端口的PVID给帧<mark>“打标签”</mark>，即插入4字节VLAN标记字段，字段中的VID取值与端口的PVID取值相等</li><li>接收“已打标签的帧”。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123225429714.png" alt="image-20231123225429714"></p><p><strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123225513451.png" alt="image-20231123225513451"></p><p><strong>结论：</strong></p><blockquote><p><strong>互连的Trunk端口的PVID值不等，可能会造成转发错误!</strong></p></blockquote><h4 id="Hybrid端口"><a href="#Hybrid端口" class="headerlink" title="Hybrid端口"></a>Hybrid端口</h4><p>华为交换机私有的Hybrid端口类型</p><p>基本特征上与Trunk端口类似，区别如下：</p><p>Hybrid端口发送处理方法 (与Trunk端口不同)：</p><ul><li>查看帧的VID是否在端口的“去标签”列表中:<ul><li>若存在，则“去标签”后再转发</li><li>若不存在，则直接转发</li></ul></li></ul><p>举例说明：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231123225702709.png" alt="image-20231123225702709"></p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层概述"><a href="#网络层概述" class="headerlink" title="网络层概述"></a>网络层概述</h2><p><strong>网络层要解决的问题：</strong></p><ul><li><p>标识各个网络以及各个网络中的各主机</p></li><li><p>路由器如何转发分组，路由器如何进行路由选择</p></li><li><p><strong>网络层的主要任务</strong>是<mark>实现网络互连</mark>，进而实现<strong>数据包在各网络之间的传输</strong>。</p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.3fzdhk9z0yg.webp" alt="image"></p><p><strong>实现网络层要解决的主要问题</strong></p><ol><li>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/00ce2a4ae2e24bd697b3e993cb071a4a.1kcv7yn0vb8g.gif" alt="00ce2a4ae2e24bd697b3e993cb071a4a"></p><ol start="2"><li>网络层寻址问题</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.3nlwnzrjep40.webp" alt="image"></p><blockquote><p>路由器收到数据后，是依据什么来决定将数据包从自己的哪个接口转发出去？</p><p><strong>依据数据包的目的地址和路由器中的路由表</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017135914985.png" alt="image-20201017135914985"></p><p>但在实际当中，路由器是怎样知道这些路由记录？</p><ul><li>由用户或网络管理员进行<mark>人工配置</mark>，这种方法只适用于规模较小且网络拓扑不改变的小型互联网</li><li><strong>另一种是实现各种路由选择协议，由路由器执行路由选择协议中所规定的<mark>路由选择算法</mark>，而<mark>自动得出路由表中的路由记录</mark>，这种方法更适合规模较大且网络拓扑经常改变的大型互联网</strong></li></ul></blockquote><ol start="3"><li>路由选择问题</li></ol><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<strong>面向连接</strong>”还是“<strong>无连接</strong>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：<strong>在计算机通信中，可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</li></ul><h3 id="面向连接的虚电路服务"><a href="#面向连接的虚电路服务" class="headerlink" title="面向连接的虚电路服务"></a>面向连接的虚电路服务</h3><p><strong>一种观点：让网络负责可靠交付</strong></p><ul><li>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。</li><li>通信之前先建立<strong>虚电路</strong> (Virtual Circuit)，以保证双方通信所需的一切网络资源。 </li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017141425892.png" alt="image-20201017141425892"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的所有分组都沿着同一条虚电路传送</p><blockquote><ul><li>虚电路表示这只是一条<strong>逻辑上的连接</strong>，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li><li>请注意，电路交换的电话通信是先建立了一条真正的连接。</li><li>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样</li></ul></blockquote><h3 id="无连接的数据报服务"><a href="#无连接的数据报服务" class="headerlink" title="无连接的数据报服务"></a>无连接的数据报服务</h3><p><strong>另一种观点：网络提供数据报服务</strong></p><ul><li>互联网的先驱者提出了一种崭新的网络设计思路。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>网络层不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017141851030.png" alt="image-20201017141851030"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的分组可能沿着不同路径传送</p><blockquote><p><strong>尽最大努力交付</strong></p><ul><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<strong>主机中的运输层负责可靠交付（包括差错处理、流量控制等）</strong> 。</li><li><strong>采用这种设计思路的好处是</strong>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li><li>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul></blockquote><h3 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h3><table><thead><tr><th><strong>对比的方面</strong></th><th><strong>虚电路服务</strong></th><th><strong>数据报服务</strong></th></tr></thead><tbody><tr><td><strong>思路</strong></td><td><strong>可靠通信应当由网络来保证</strong></td><td><strong>可靠通信应当由用户主机来保证</strong></td></tr><tr><td><strong>连接的建立</strong></td><td><strong>必须有</strong></td><td><strong>不需要</strong></td></tr><tr><td><strong>终点地址</strong></td><td><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></td><td><strong>每个分组都有终点的完整地址</strong></td></tr><tr><td><strong>分组的转发</strong></td><td><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></td><td><strong>每个分组独立选择路由进行转发</strong></td></tr><tr><td><strong>当结点出故障时</strong></td><td><strong>所有通过出故障的结点的虚电路均不能工作</strong></td><td><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></td></tr><tr><td><strong>分组的顺序</strong></td><td><strong>总是按发送顺序到达终点</strong></td><td><strong>到达终点时不一定按发送顺序</strong></td></tr><tr><td><strong>端到端的差错处理和流量控制</strong></td><td><strong>可以由网络负责，也可以由用户主机负责</strong></td><td><strong>由用户主机负责</strong></td></tr></tbody></table><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li><p><mark>IPv4地址</mark>就是给因特网（Internet）上的<mark>每一台主机 (或路由器)的每一个接口</mark>分配一个在全世界范围内是<mark>唯一的32比特的标识符</mark>。</p></li><li><p>IPv4地址的编址方法经历了如下三个历史阶段：</p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124154837302.png" alt="image-20231124154837302"></p><ul><li>32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用<mark>点分十进制表示方法</mark>以方便用户使用。</li></ul><h3 id="分类编制的IPv4地址"><a href="#分类编制的IPv4地址" class="headerlink" title="分类编制的IPv4地址"></a>分类编制的IPv4地址</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017144317166.png" alt="image-20201017144317166"></p><ul><li>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</li></ul><p><strong>A类地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017145210533.png" alt="image-20201017145210533"></p><p><strong>B类地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017145508001.png" alt="image-20201017145508001"></p><p><strong>C类地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017150204774.png" alt="image-20201017150204774"></p><p><strong>练习</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017150543386.png" alt="image-20201017150543386"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p><strong>IP 地址的指派范围</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124163033439.png" alt="image-20231124163033439"></p><p><strong>一般不使用的特殊的 IP 地址</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017152959586.png" alt="image-20201017152959586"></p><p><strong>IP 地址的一些重要特点</strong></p><ol><li><strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</li></ol><ul><li><strong>第一</strong>，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li><strong>第二</strong>，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><ol start="2"><li><strong>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口</strong>。</li></ol><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong> (multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。</li></ul><ol start="3"><li><p><strong>用转发器或网桥连接起来的若干个局域网仍为一个网络</strong>，因此这些局域网都具有同样的网络号 net-id。</p></li><li><p><strong>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</strong></p></li></ol><h3 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h3><h4 id="为什么要划分子网"><a href="#为什么要划分子网" class="headerlink" title="为什么要划分子网"></a>为什么要划分子网</h4><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：</p><ul><li>IP 地址空间的<mark>利用率有时很低</mark>。 </li><li>给每一个物理网络分配一个网络号会使<strong>路由表变得太大</strong>因而使<mark>网络性能变坏</mark>。 </li><li>两级的 IP 地址<mark>不够灵活</mark>。</li></ul><p>如果想要将原来的网络划分成三个独立的网路：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017154852896.png" alt="image-20201017154852896"></p><p>所以是否可以<mark><strong>从主机号部分借用一部分作为子网号</strong></mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017155026814.png" alt="image-20201017155026814"></p><blockquote><p>但是如果未在图中标记子网号部分，那么我们和计算机又如何知道分类地址中主机号有多少比特被用作子网号了呢？</p><p>所以就有了划分子网的工具：<strong>子网掩码</strong></p><ul><li>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为<strong>三级的 IP 地址</strong>。</li><li>这种做法叫做<strong>划分子网</strong> (subnetting) 。</li><li>划分子网已成为互联网的正式标准协议。</li></ul></blockquote><h4 id="如何划分子网"><a href="#如何划分子网" class="headerlink" title="如何划分子网"></a>如何划分子网</h4><p>基本思路</p><ul><li>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号<strong>借用</strong>若干个位作为<strong>子网号</strong> subnet-id，而主机号 host-id 也就相应减少了若干个位。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017155930011.png" alt="image-20201017155930011"></p><ul><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<strong>目的网络号</strong> net-id，先找到连接在本单位网络上的路由器。</li><li>然后<strong>此路由器</strong>在收到 IP 数据报后，再按<strong>目的网络号</strong> net-id 和<strong>子网号</strong> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul><p>划分为三个子网后对外仍是一个网络</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017160116239.png" alt="image-20201017160116239"></p><blockquote><ul><li><strong>优点</strong><ol><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ol></li><li><strong>划分子网纯属一个单位内部的事情，对外部网络透明</strong>，对外仍然表现为没有划分子网的一个网络。</li></ul></blockquote><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017160252066.png" alt="image-20201017160252066"></p><blockquote><p><strong>(IP 地址) AND (子网掩码) &#x3D; 网络地址</strong> 重要，下面很多相关知识都会用到</p></blockquote><p>举例：</p><p>例子1：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017161651058.png" alt="image-20201017161651058"></p><p>例子2</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017161719339.png" alt="image-20201017161719339"></p><p><strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124175138343.png" alt="image-20231124175138343"></p><p><strong>默认子网掩码：</strong></p><p><mark>默认的子网掩码是指在<strong>未划分子网的情况下</strong>使用的子网掩码。</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124175338752.png" alt="image-20231124175338752"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017162938612.png" alt="image-20201017162938612"></p><blockquote><ul><li>子网掩码是一个网络或一个子网的重要属性。</li><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</li></ul></blockquote><h3 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h3><h4 id="为什么使用无分类编址"><a href="#为什么使用无分类编址" class="headerlink" title="为什么使用无分类编址"></a>为什么使用无分类编址</h4><ul><li><p>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是<strong>数量巨大的C类网因为其地址空间太小并没有得到充分使用</strong>，而因特网的IP地址仍在加速消耗，整个<mark>IPv4地址空间面临全部耗尽的威胁</mark>。</p></li><li><p><mark>CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念</mark></p></li><li><p><mark>CIDR可以更加有效地分配IPv4的地址空间</mark>，并且可以在新的IPv6使用之前允许因特网的规模继续增长。</p></li></ul><blockquote><p><strong>CIDR 最主要的特点</strong></p><ul><li>CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。</li><li><strong>IP 地址从三级编址（使用子网掩码）又回到了两级编址</strong>。</li></ul></blockquote><h4 id="如何使用无分类编址"><a href="#如何使用无分类编址" class="headerlink" title="如何使用无分类编址"></a>如何使用无分类编址</h4><ul><li>CIDR使用“<mark>斜线记法</mark>”，或称CIDR记法。即在IPv4地址后面加上斜线“&#x2F;”，<mark>在斜线后面写上网络前缀所占的比特数量</mark>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124200743238.png" alt="image-20231124200743238"></p><ul><li><p>CIDR实际上是<mark>将网络前缀都相同的连续的IP地址组成一个<strong>CIDR地址块</strong></mark>。</p></li><li><p>我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节</p><ul><li>地址块的最小地址</li><li>地址块的最大地址</li><li>地址块中的地址数量</li><li>地址块聚合某类网络(A类、B类或C类)的数量</li></ul><blockquote><p>解释地址块聚合C类网络：CIDR块中的IP地址可以划分为多个C类网，每个C类网包含2^8^个IP地址。所以，我们将主机数量除以2^8^，得到C类网的数量。</p></blockquote><ul><li>地址掩码(也可继续称为子网掩码)</li></ul></li></ul><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017165113442.png" alt="image-20201017165113442"></p><h4 id="路由聚合（构造超网）"><a href="#路由聚合（构造超网）" class="headerlink" title="路由聚合（构造超网）"></a>路由聚合（构造超网）</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124201322773.png" alt="image-20231124201322773"></p><ul><li><mark>网络前缀越长，地址块越小，路由越具体；</mark></li><li>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为<mark>最长前缀匹配</mark><br>因为这样的路由更具体。</li></ul><p><strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124201141275.png" alt="image-20231124201141275"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124200032872.png" alt="image-20231124200032872"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201017170552495.png" alt="image-20201017170552495"></p><h3 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h3><p>给定一个IPv4地址快，如何将其划分成几个更小的地址块，并将这些地址块分配给互联网中不同网络，进而可以给各网络中的主机和路由器接口分配IPv4地址</p><h4 id="定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）"><a href="#定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）" class="headerlink" title="定长的子网掩码FLSM（Fixed Length Subnet Mask）"></a>定长的子网掩码FLSM（Fixed Length Subnet Mask）</h4><ul><li>使用<strong>同一个子网掩码</strong>来划分子网</li><li>子网划分方式不灵活：只能划分出2^n^个子网（n是从主机号部分借用的用来作为子网号的比特数量）</li><li>每个子网所分配的IP地址数量相同，容易造成IP地址浪费</li></ul><p><mark><strong>划分子网的IPv4就是定长的子网掩码</strong></mark></p><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018140809079.png" alt="image-20201018140809079"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018140916631.png" alt="image-20201018140916631"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018141132446.png" alt="image-20201018141132446"></p><blockquote><p>通过上面步骤分析，就可以从子网1到8中任选5个分配给左图中的N1到N5</p><p><strong>采用定长的子网掩码划分，只能划分出2^n^个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同</strong></p><p><strong>但是也因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费</strong></p></blockquote><h4 id="变长的子网掩码VLSM（Variable-Length-Subnet-Mask）"><a href="#变长的子网掩码VLSM（Variable-Length-Subnet-Mask）" class="headerlink" title="变长的子网掩码VLSM（Variable Length Subnet Mask）"></a>变长的子网掩码VLSM（Variable Length Subnet Mask）</h4><ul><li>使用<strong>不同的子网掩码</strong>来划分子网</li><li>子网划分方式灵活：可以按需分配</li><li>每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</li></ul><p><mark><strong>无分类编址的IPv4就是变长的子网掩码</strong></mark></p><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018142333145.png" alt="image-20201018142333145"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018143344440.png" alt="image-20201018143344440"></p><h2 id="IP数据报的发送和转发过程⭐"><a href="#IP数据报的发送和转发过程⭐" class="headerlink" title="IP数据报的发送和转发过程⭐"></a>IP数据报的发送和转发过程⭐</h2><p>IP数据报的发送和转发过程包含以下两部分：</p><ul><li>主机发送IP数据报</li><li>路由器转发IP数据报</li></ul><blockquote><p>为了将重点放在TCP&#x2F;IP协议栈的网际层发送和转发IP数据报的过程上，在之后的举例中，我们<mark>忽略使用ARP协议来获取目的主机或路由器接口的MAC地址的过程以及以太网交换机自学习和转发帧的过程</mark>。</p></blockquote><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>举例</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018151314019.png" alt="image-20201018151314019"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018150151171.png" alt="image-20201018150151171"></p><p>源主机如何知道目的主机是否与自己在同一个网络中，是直接交付，还是间接交付？</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018150223497.png" alt="image-20201018150223497"></p><blockquote><p>可以通过<strong>目的地址IP</strong>和<strong>源地址的子网掩码</strong>进行<strong>逻辑与运算</strong>得到<strong>目的网络地址</strong></p><ul><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>相同</strong>，就是<strong>在同一个网络</strong>中，属于<strong>直接交付</strong></li><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>不相同</strong>，就<strong>不在同一个网络</strong>中，属于<strong>间接交付</strong>，传输给主机所在网络的<strong>默认网关</strong>（路由器——下图会讲解）,由默认网关帮忙转发</li></ul></blockquote><p>主机C如何知道路由器R的存在？</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018145501063.png" alt="image-20201018145501063"></p><blockquote><p>用户为了让本网络中的主机能和其他网络中的主机进行通信，就必须给其指定本网络的一个路由器的接口，由该路由器帮忙进行转发，<strong>所指定的路由器</strong>，也被称为<strong>默认网关</strong></p><p>例如。路由器的接口0的IP地址192.168.0.128做为左边网络的默认网关</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018150029179.png" alt="image-20201018150029179"></p><blockquote><p>主机A会将该IP数据报传输给自己的默认网关，也就是图中所示的路由器接口0</p></blockquote><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><p>路由器收到IP数据报后如何转发？</p><ul><li>检查IP数据报首部是否出错：<ul><li><mark>若出错，则直接丢弃</mark>该IP数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目：<ul><li>若找到匹配的条目，则转发给条目中指示的吓一跳</li><li><mark>若找不到，则丢弃</mark>该数据报并通告源主机</li></ul></li></ul><p>假设IP数据报首部没有出错，路由器取出IP数据报首部各地址字段的值</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018151108989.png" alt="image-20201018151108989"></p><p>接下来路由器对该IP数据报进行查表转发</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018151528027.png" alt="image-20201018151528027"></p><blockquote><p>逐条检查路由条目，将目的地址与路由条目中的地址掩码进行逻辑与运算得到目的网络地址，然后与路由条目中的目的网络进行比较，如果相同，则这条路由条目就是匹配的路由条目，按照它的下一条指示，图中所示的也就是接口1转发该IP数据报</p></blockquote><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124214709877.png" alt="image-20231124214709877"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124214641496.png" alt="image-20231124214641496"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231124214527162.png" alt="image-20231124214527162"></p><h2 id="静态路由配置及其可能产生的路由环路问题"><a href="#静态路由配置及其可能产生的路由环路问题" class="headerlink" title="静态路由配置及其可能产生的路由环路问题"></a>静态路由配置及其可能产生的路由环路问题</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器<mark>人工配置路由表</mark><ul><li>这种人工配置方式简单、开销小。但<mark>不能及时适应网络状态 (流量、拓扑等)的变化</mark></li><li>一般只在小规模网络中采用。</li></ul></li><li>使用静态路由配置可能出现以下<mark>导致产生路由环路</mark>的错误<ul><li>配置错误</li><li>聚合了不存在的网络</li><li>网络故障</li></ul></li></ul><h3 id="路由相关配置"><a href="#路由相关配置" class="headerlink" title="路由相关配置"></a>路由相关配置</h3><h4 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h4><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018160349375.png" alt="image-20201018160349375"></p><h4 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h4><p>举例：</p><p>默认路由可以被所有网络匹配，但路由匹配有优先级，<mark>默认路由是优先级最低的</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018160906284.png" alt="image-20201018160906284"></p><h4 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h4><p>举例：</p><p>有时候，我们可以给路由器添加针对某个主机的特定主机路由条目</p><p>一般用于网络管理人员对网络的管理和测试</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018161440257.png" alt="image-20201018161440257"></p><blockquote><p><strong>多条路由可选，匹配路由最具体的</strong></p></blockquote><h3 id="导致路由环路的原因"><a href="#导致路由环路的原因" class="headerlink" title="导致路由环路的原因"></a>导致路由环路的原因</h3><h4 id="静态路由配置错误"><a href="#静态路由配置错误" class="headerlink" title="静态路由配置错误"></a>静态路由配置错误</h4><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018161542579.png" alt="image-20201018161542579"></p><p>假设将R2的路由表中第三条目录配置错了下一跳</p><p>这导致R2和R3之间产生了路由环路</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018162041966.png" alt="image-20201018162041966"></p><blockquote><p>解决办法：设置过期时间TTL</p></blockquote><h4 id="聚合了不存在的网络"><a href="#聚合了不存在的网络" class="headerlink" title="聚合了不存在的网络"></a>聚合了不存在的网络</h4><p>举例：</p><p>正常情况：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018162333671.png" alt="image-20201018162333671"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018162759562.png" alt="image-20201018162759562"></p><p>错误情况：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018163323343.png" alt="image-20201018163323343"></p><p>解决方法：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018163933715.png" alt="image-20201018163933715"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018164453398.png" alt="image-20201018164453398"></p><blockquote><p>解决办法：设置黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入它后就被丢弃</p></blockquote><h4 id="网络故障而导致路由环路"><a href="#网络故障而导致路由环路" class="headerlink" title="网络故障而导致路由环路"></a>网络故障而导致路由环路</h4><p>举例：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018164811811.png" alt="image-20201018164811811"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018164913684.png" alt="image-20201018164913684"></p><p>解决方法：</p><p><strong>添加故障的网络为黑洞路由</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018165122023.png" alt="image-20201018165122023"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201018165153517.png" alt="image-20201018165153517"></p><ul><li><p>假设一段时间后故障网络恢复了，R1又自动地得出了其接口0的直连网络的路由条目，针对该网络的黑洞网络会<strong>自动失效</strong></p></li><li><p>如果又故障，则<strong>生效</strong>该网络的黑洞网络</p></li></ul><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><strong>两类路由选择：</strong></p><ol><li><p>静态路由选择</p><ul><li>由<mark>人工配置</mark>的网络路由、默认路由、特定主机路由，黑洞路由等都属于静态路由；</li><li>这种人工配置方式简单、开销小，但<mark>不能及时适应网络状态 (流量、拓扑等)的变化</mark>；</li><li>一般只在<mark>小规模网络</mark>中采用。</li></ul></li><li><p>动态路由选择</p><ul><li>路由器通过路由选择协议<mark>自动获取路由信息</mark></li><li>比较复杂、开销比较大。<mark>能较好地适应网络状态的变化</mark></li><li>适用于<mark>大规模网络</mark></li></ul></li></ol><p><strong>因特网所采用的路由选择协议的主要特点：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019134946971.png" alt="image-20201019134946971"></p><p><strong>因特网采用分层次的路由选择协议：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019135122326.png" alt="image-20201019135122326"></p><blockquote><p>自治系统之间的路由选择简称为<mark>域间路由选择</mark>，自治系统内部的路由选择简称为<mark>域内路由选择</mark></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019135328925.png" alt="image-20201019135328925"></p><blockquote><p>域间路由选择使用外部网关协议EGP这个类别的路由选择协议</p><p>域内路由选择使用内部网关协议IGP这个类别的路由选择协议</p><p><strong>网关协议</strong>的名称可称为<strong>路由协议</strong></p></blockquote><p><strong>常见的路由选择协议：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019140009740.png" alt="image-20201019140009740"></p><p><strong>路由器的基本结构：</strong></p><p>路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019140234652.png" alt="image-20201019140234652"></p><ul><li><p>路由选择处理机除了处理收到的路由报文外，还会<strong>周期性的给其他路由器发送自己所知道的路由信息</strong>。</p></li><li><p>路由器的各端口还应具有<strong>输入缓冲区和输出缓冲区</strong></p><ul><li>输入缓冲区用来暂存，新进入路由器，但还来不及处理的分组</li><li>输出缓冲区用来暂存，已经处理完毕，但还来不及发送的分组</li></ul></li><li><p>需要说明的是<mark>路由器的端口一般<strong>都</strong>具有输入和输出的功能</mark>。</p></li></ul><p>🌈<strong>补充：（关于路由表和转发表）</strong></p><blockquote><ul><li>路由表一般仅包含从目的网络到下一跳的映</li><li>路由表需要对网络拓扑变化的计算最优化</li><li><strong>转发表是从路由表得出的</strong></li><li>转发表的结构应当使查找过程最优化</li><li>本文不对路由表和转发表做详细的区分</li></ul></blockquote><h3 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>RIP使用<mark>跳数</mark>(Hop Count)作为度量(Metric)来<mark>衡量到达目的网络的距离</mark>。<ul><li>路由器到直连网络的距离定义为1。</li><li>路由器到非直连网络的距离定义为所经过的路由器数加1</li><li>允许一条路径最多只能包含15个路由器。<mark>“距离”等于16时相当于不可达</mark>，因此，RIP只适用于<mark>小型互联网</mark></li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125180054408.png" alt="image-20231125180054408"></p><ul><li>RIP认为<mark>好的路由</mark>就是“距离短”的路由，也就是<mark>所通过路由器数量最少的路由</mark></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125180146423.png" alt="image-20231125180146423"></p><ul><li>当到达同一目的网络有多条“距离相等”的路由时，可以进行<mark>等价负载均衡</mark></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125180243578.png" alt="image-20231125180243578"></p><p>RIP包含以下三个要点:</p><ol><li>和谁交换信息：仅和相邻路由器交换信息</li><li>交换什么信息：自己的路由表</li><li>何时交换信息：周期性交换(例如每30秒)</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125180409226.png" alt="image-20231125180409226"></p><h4 id="RIP的基本工作过程"><a href="#RIP的基本工作过程" class="headerlink" title="RIP的基本工作过程"></a>RIP的基本工作过程</h4><ol><li>路由器刚开始工作时，<strong>只知道自己到直连网络的距离为1</strong></li><li>每个路由器仅<strong>和<mark>相邻路由器周期性</mark>地交换并更新路由信息</strong></li><li>若干次交换和更新后，<strong>每个路由器都知道到达本AS内各网络的最短距离和下一跳地址</strong>，称为<mark>收敛</mark>。</li></ol><h4 id="RIP的路由条目的更新规则"><a href="#RIP的路由条目的更新规则" class="headerlink" title="RIP的路由条目的更新规则"></a>RIP的路由条目的更新规则</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019150412666-17009068811776.png" alt="image-20201019150412666"></p><p><strong>⭐⭐重点：</strong></p><ul><li>到达目的网络，相同下一跳，最新消息，更新</li><li>发现了新的网络，添加</li><li>到达目的网络，不同下一跳，新路由优势，更新</li><li>到达目的网络，不同下一跳，等价负载均衡</li><li>到达目的网络，不同下一跳，新路由劣势，不更新</li></ul><h4 id="路由环路问题"><a href="#路由环路问题" class="headerlink" title="路由环路问题"></a>路由环路问题</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019151332767.png" alt="image-20201019151332767"></p><p>解决办法：</p><ol><li>限制最大路径距离为15(16表示不可达)</li><li>当路由表发生变化时就立即发送更新报文 (即“触发更新”)，而不仅是周期性发送</li><li>让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送 (即“水平分割”</li></ol><blockquote><p>但是，这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定</p></blockquote><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：</p><ol><li>实现简单，开销较小。</li></ol><p>缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</p></li><li><p>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</p></li><li><p>“坏消息传播得慢”，使更新过程的收敛时间过长。</p></li></ol><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125181829111.png" alt="image-20231125181829111"></p><blockquote><p>本题中R3先通告完R2后，R2进行了修改为16，但是等R1定时发送周期报文后，因为R3没有发送给R1，所以R1认为可以通过R3访问网络，然后R1给R2发送报文后，因为<strong>到达目的网络，不同下一跳，新路由优势，更新</strong>的原则，那么R2就会认为可以从R1去访问到该网络，又R1到该网络的距离为2，则R2到该网络的距离为2+1&#x3D;3</p></blockquote><h3 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h3><blockquote><p><strong>注意</strong>：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p></blockquote><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>“最短路径优先”是因为使用了Dijkstra提出的<mark>最短路径算法</mark>SPF。</li><li>OSPF是<mark>基于链路状态</mark>的，而不像RIP那样是基于距离向量的。</li><li>OSPF采用SPF算法计算路由，从算法上保证了<mark>不会产生路由环路</mark></li><li>OSPF<strong>不限制网络规模</strong>，更新效率高，<mark>收敛速度快</mark></li><li>链路状态是指本路由器都<strong>和哪些路由器相邻</strong>，以及相应<strong>链路的“代价”</strong>(cost)<ul><li>“代价”用来表示费用、距离、时延、带宽，等等。这些都由网络管理人员来决定</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125211510009.png" alt="image-20231125211510009"></p><h4 id="问候（Hello）分组"><a href="#问候（Hello）分组" class="headerlink" title="问候（Hello）分组"></a>问候（Hello）分组</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019161653875.png" alt="image-20201019161653875"></p><blockquote><p>IP数据报首部中协议号字段的取值应为89，来表明IP数据报的数据载荷为OSPF分组</p></blockquote><h4 id="发送链路状态通告LSA"><a href="#发送链路状态通告LSA" class="headerlink" title="发送链路状态通告LSA"></a>发送链路状态通告LSA</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019162341151.png" alt="image-20201019162341151"></p><blockquote><p>洪泛法有点<strong>类似于广播</strong>，就是从一个接口进来，从其他剩余所有接口出去</p></blockquote><h4 id="链路状态数据库同步"><a href="#链路状态数据库同步" class="headerlink" title="链路状态数据库同步"></a>链路状态数据库同步</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019162933483.png" alt="image-20201019162933483"></p><p><strong>使用<mark>SPF算法</mark>计算出各自路由器到达其他路由器的最短路径</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019163148068.png" alt="image-20201019163148068"></p><h4 id="OSPF五种分组类型"><a href="#OSPF五种分组类型" class="headerlink" title="OSPF五种分组类型"></a>OSPF五种分组类型</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019163250129.png" alt="image-20201019163250129"></p><h4 id="OSPF的基本工作过程"><a href="#OSPF的基本工作过程" class="headerlink" title="OSPF的基本工作过程"></a>OSPF的基本工作过程</h4><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019163746254.png" alt="image-20201019163746254"></p><h4 id="邻居关系"><a href="#邻居关系" class="headerlink" title="邻居关系"></a>邻居关系</h4><p><strong>OSPF在多点接入网络中的路由器邻居关系建立</strong></p><p>如果不采用其他机制，将会产生大量的多播分组</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019164657606.png" alt="image-20201019164657606"></p><blockquote><p>若DR出现问题，则由BDR顶替DR</p></blockquote><h4 id="区域"><a href="#区域" class="headerlink" title="区域"></a>区域</h4><p><strong>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area）</strong></p><ul><li><p>在该自治系统内，所有路由器都使用OSPF协议，OSPF将该自治系统再划分成4个更小的区域</p></li><li><p>每个区域都有一个32比特的区域标识符</p></li><li><p>主干区域的区域标识符必须为0，主干区域用于连通其他区域</p></li><li><p>其他区域的区域标识符不能为0且不相同</p></li><li><p>每个区域一般不应包含路由器超过200个</p></li><li><p>划分区域的好处就是，利用洪泛法交换链路状态信息局限于每一个区域而不是自治系统，这样减少整个网络上的通信量</p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019170100568.png" alt="image-20201019170100568"></p><h3 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h3><p>BGP（Border Gateway Protocol） 是<mark><strong>不同自治系统的路由器之间</strong>交换路由信息的协议</mark></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019191438399.png" alt="image-20201019191438399"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019191718506.png" alt="image-20201019191718506"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019191836397.png" alt="image-20201019191836397"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019192031087.png" alt="image-20201019192031087"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201019192059962.png" alt="image-20201019192059962"></p><p><strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125213234464.png" alt="image-20231125213234464"></p><h2 id="IPv4数据报的首部格式⭐⭐"><a href="#IPv4数据报的首部格式⭐⭐" class="headerlink" title="IPv4数据报的首部格式⭐⭐"></a>IPv4数据报的首部格式⭐⭐</h2><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4qv9clittsi0.webp" alt="image"></p><p><strong>1.首部长度</strong></p><blockquote><p><strong>占4比特，表示IP数据报首部的长度</strong>。该字段的取值以<code>4字节</code>为单位。最小十进制取值为5，表示IP数据报首部只有20字节固定部分;最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分。</p></blockquote><p><strong>2.可选字段</strong></p><blockquote><p><strong>长度从1个字节到40个字节不等</strong>。<code>用来支持排错、测量及安全等措施</code>。可选字段增加了IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。</p></blockquote><p><strong>3.填充字段</strong></p><blockquote><p><strong>确保首部长度为4字节的整数倍</strong>。使用<code>全0</code>进行填充。</p></blockquote><p><strong>4.区分服务</strong></p><blockquote><p><strong>占8比特，用来获得更好的服务。</strong></p></blockquote><p><strong>5.总长度</strong></p><blockquote><p><strong>占16比特</strong>，表示<code>IP数据报的总长度</code>(首部+数据载荷)。</p><p>最大取值为十进制的65535，以字节为单位。</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.ptm56r0ehn4.webp" alt="image"></p><p><strong>6.标识</strong></p><blockquote><p><strong>占16比特</strong>，属于同一个数据报的各分片数据报应该具有相同的标识。</p><p>IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。</p></blockquote><p><strong>7.标志</strong></p><blockquote><p><strong>占3比特</strong>，<code>各比特含义如下</code>：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1xqgdajia7c0.webp" alt="image"></p></blockquote><p><strong>8.片偏移</strong></p><blockquote><p><strong>占13比特</strong>，指出分片数据报的<code>数据载荷部分偏移</code>其在原数据报的位置<strong>有多少个单位</strong>。</p><p>片偏移以8个字节为单位。</p></blockquote><p><strong>9.生存时间TTL</strong></p><blockquote><p><strong>占8比特</strong>，最初<code>以秒为单位</code>，<strong>最大生存周期</strong>为<code>255秒</code>；</p></blockquote><p><strong>10.协议</strong></p><blockquote><p><strong>占8比特</strong>，指明IPv4数据报的数据部分是<code>何种协议数据单元</code>。</p><p>常用的一些协议和相应的协议字段值如下。</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.3rs9fh0g6xm0.webp" alt="image"></p></blockquote><p><strong>11.首部检验和</strong></p><blockquote><p><strong>占16比特</strong>，用来<code>检测首部</code>在传输过程中是否出现差错。比CRC检验码简单，称为<strong>因特网检验和</strong>。</p></blockquote><p><strong>12.源IP地址和目的IP地址</strong></p><blockquote><p><strong>各占32比特</strong>，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址。</p></blockquote><p>⭐⭐⭐⭐⭐<strong>例题：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125222036580.png" alt="image-20231125222036580"></p><hr><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125223015654.png" alt="image-20231125223015654"></p><p>第二小问：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125223134911.png" alt="image-20231125223134911"></p><p>第四小问：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231125223211334.png" alt="image-20231125223211334"></p><h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><h3 id="ICMP的作用"><a href="#ICMP的作用" class="headerlink" title="ICMP的作用"></a>ICMP的作用</h3><ul><li><mark>为了更有效地转发IP数据报和提高交付成功的机会</mark>，在网际层使用了<strong>网际控制报文协议ICMP。</strong></li><li>主机或路由器使用ICMP来发送差错报告报文和询问报文。</li><li>ICMP报文被封装在IP数据报中发送。</li></ul><h3 id="ICMP差错报告报文的种类"><a href="#ICMP差错报告报文的种类" class="headerlink" title="ICMP差错报告报文的种类"></a>ICMP差错报告报文的种类</h3><ol><li>终点不可达</li></ol><ul><li><mark><strong>当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。</strong></mark>具体可再根据ICMP的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231126152729662.png" alt="image-20231126152729662"></p><ol start="2"><li>源点抑制</li></ol><ul><li>当路由器或主机<mark><strong>由于拥塞而丢弃数据报时，就向源点发送源点抑制报文</strong></mark>，使源点知道应当把数据报的发送速率放慢。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231126152814243.png" alt="image-20231126152814243"></p><ol start="3"><li>时间超过</li></ol><ul><li>当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。</li><li>若结果不为0，则将该IP数据报转发出去，若结果为0，除丢弃该IP数据报外，还要<mark><strong>向源点发送时间超过报文</strong></mark></li><li>另外，当<strong>终点在预先规定的时间内不能收到一个数据报的全部数据报片时</strong>就把已收到的数据报片<strong>都丢弃</strong>，也会向源点发送时间超过报文。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231126152913751.png" alt="image-20231126152913751"></p><ol start="4"><li>参数问题</li></ol><ul><li>当路由器或目的主机收到IP数据报后，根据其<mark><strong>首部中的检验和字段</strong></mark>发现首部在传输过程中出现了<strong>误码</strong>，就丢弃该数据报，并向源点发送参数问题报文。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20231126153116397.png" alt="image-20231126153116397"></p><ol start="5"><li>改变路由（重定向）</li></ol><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.3nnaaiytnac0.webp" alt="image"></p><ul><li>以下情况<strong>不应发送ICMP差错报告报文：</strong><ul><li>对ICMP差错报告报文不再发送ICMP差错报告报文</li><li>对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文</li><li>对具有多播地址的数据报都不发送ICMP差错报告报文</li><li>对具有特殊地址(如127.0.0.0或0.0.0.0)的数据报不发送ICMP差错报告报文</li></ul></li></ul><h3 id="常用的ICMP询问报文"><a href="#常用的ICMP询问报文" class="headerlink" title="常用的ICMP询问报文"></a>常用的ICMP询问报文</h3><ol><li><strong>回送请求和回答</strong><ul><li>ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。</li><li>收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文</li><li>这种询问报文用来<mark><strong>测试目的站是否可达</strong></mark>及了解其有关状态</li></ul></li><li><strong>时间戳请求和回答</strong><ul><li>ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间</li><li>在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从</li><li>1900年1月1日起到当前时刻一共有多少秒</li><li>这种询问报文<mark><strong>用来进行时钟同步和测量时间</strong></mark></li></ul></li></ol><h3 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h3><ol><li>分组网间探测PING</li></ol><p><strong>用来测试主机或路由器间的连通性</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1ihbjy8iknr4.webp" alt="image"></p><ol start="2"><li>跟踪路由traceroute</li></ol><p><strong>用来测试IP数据报从源主机到达目的主机主要经过哪些路由器</strong></p><blockquote><p>使用的是询问报文中的<strong>回送请求和回答</strong>和差错报文中的<strong>时间超过</strong></p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.5c7o7ylenas0.webp" alt="image"></p><h2 id="虚拟专用网VPN与网络地址转换NAT"><a href="#虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="虚拟专用网VPN与网络地址转换NAT"></a>虚拟专用网VPN与网络地址转换NAT</h2><h3 id="虚拟专用网VPN"><a href="#虚拟专用网VPN" class="headerlink" title="虚拟专用网VPN"></a>虚拟专用网VPN</h3><ul><li>由于 <strong>IP 地址的紧缺</strong>，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到<strong>互联网并不很安全</strong>，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP&#x2F;IP 协议，那么从原则上讲，对于这些仅在<strong>机构内部使用</strong>的计算机就可以由本机构<strong>自行分配其 IP 地址</strong>。</li></ul><ul><li>利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为<mark>虚拟专用网</mark>。</li><li>使用私有地址。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.77f88i6a8780.webp" alt="image"></p><ul><li><strong>根据具体用途有所不同</strong>，可分为：<mark>内联网VPN、外联网VPN、远程接入VPN</mark>。</li></ul><ol><li>内联网VPN</li></ol><p>同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为内联网VPN。</p><ol start="2"><li>外联网VPN</li></ol><p>有时一个机构的VPN需要有某些外部机构(通常就是合作伙伴)参加进来。这样的VPN就称为外联网VPN。</p><ol start="3"><li>远程接入VPN</li></ol><p>在外地工作的员工需要访问公司内部的专用网络时,只要在任何地点接入到因特网,运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道,即可访问专用网络中的资源。这种VPN称为远程接入VPN。</p><blockquote><p>私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信</p><p>私有地址只能用作本地地址而不能用作全球地址</p><p>因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发</p><p><strong>本地地址与全球地址</strong></p><ul><li><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</li><li><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。 </li><li><strong>问题</strong>：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</li></ul></blockquote><p>所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201020000618797.png" alt="image-20201020000618797"></p><p>部门A向部门B发送数据流程</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201020001107425.png" alt="image-20201020001107425"></p><blockquote><p>两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样</p><p>数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201020001528569.png" alt="image-20201020001528569"></p><p>因此也被称为IP隧道技术</p></blockquote><h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><ul><li><p>虽然因特网采用了无分类编址方式来减缓IPv4地址空间耗尽的速度，但<strong>由于因特网用户数目的激增</strong>，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，<strong>IPv4地址空间</strong>即将面临耗尽的危险仍然没有被解除。</p></li><li><p>1994年提出了一种<strong>网络地址转换NAT的方法</strong>再次缓解了IPv4地址空间即将耗尽的问题。</p><p>NAT能使大量使用<strong>内部专用地址</strong>的<strong>专用网络</strong>用户共享少量外部全球地址来访问因特网上的主机和资源。</p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.18qzhvvvlxvk.webp" alt="image"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1r0bxwhrjrgg.webp" alt="image"></p><ul><li>用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信。这种将端口号和IP地址一起进行转换的技术叫作<code>网络地址与端口号转换NAPT</code>(Network Address and Port Translation)。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.5g0c9qkgacg0.webp" alt="image"></p><p><strong>⭐注意：对于一些P2P网络应用，需要外网主机主动与内网主机进行通信</strong>，在通过NAT时会遇到问题，需要网络应用自己使用一些特殊的<code>NAT穿越技术</code>来解决问题。</p><p>另外，由于<strong>NAT</strong>对外网屏蔽了内网主机的<strong>网络地址</strong>，能为内网的主机提供一定的<code>安全保护</code>。</p><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>要解决的问题：</p><ul><li>解决进程之间基于网络的通信功能</li><li>传输出现错误的时候，如何处理</li></ul><hr><ul><li>之前所了解到的<strong>物理层、数据链路层以及网络层</strong>，它们共同解决了<strong>将主机通过异构网络互联起来</strong>所面临的问题，实现了<mark>主机到主机的通信</mark>。</li></ul><ul><li><p>但实际上在计算机网络中进行通信的<mark>真正实体</mark>是位于<strong>通信两端主机中的进程</strong>。</p></li><li><p>如何为运行在不同主机上的应用进程提供直接的通信服务是<strong>运输层的任务</strong>，运输层协议又称为<mark>端到端协议</mark>。</p></li></ul><h2 id="运输层端口号、复用与分用的概念"><a href="#运输层端口号、复用与分用的概念" class="headerlink" title="运输层端口号、复用与分用的概念"></a>运输层端口号、复用与分用的概念</h2><ul><li>运行在计算机上的进程使用<strong>进程标识符</strong><code>PID</code>来标志。</li><li>因特网上的计算机并不是使用统一的操作系统，不同的操作系统(windows, Linux, Mac OS)又使用不同格式的进程标识符。</li><li>为了使运行<strong>不同操作系统的计算机的应用进程之间</strong>能够进行网络通信，就必须使用<strong>统一的方法对TCP&#x2F;IP体系的应用进程进行标识</strong>。</li></ul><hr><ul><li><p><strong>TCP&#x2F;IP体系的运输层</strong>使用<mark>端口号</mark>来区分应用层的不同应用进程。</p></li><li><p>端口号使用16比特表示, 取值范围0~65535;</p><ul><li><p>端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。</p><ul><li><strong>熟知端口号</strong>:0~1023，IANA把这些端口号指派给了TCP&#x2F;IP体系中最重要的一些应用协议，例如:FTP使用21&#x2F;20，HTTP使用80，DNS使用53。</li><li><strong>登记端口号</strong>:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如: Microsoft RDP微软远程桌面使用的端口是3389。</li><li><strong>短暂端口号</strong>:49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端。</li></ul></li></ul></li><li><p><strong>发送方</strong>的<mark>复用</mark>和<strong>接收方</strong>的<mark>分用</mark></p></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.3kewg9zvtcq0.webp" alt="image"></p><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做  <strong>分用</strong>。</p></blockquote><ul><li><strong>TCP&#x2F;IP体系的应用层常用协议</strong>所使用的<mark>运输层熟知端口号</mark></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.4r06l2f4lyg0.webp" alt="image"></p><h2 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h2><ul><li><mark>UDP和TCP</mark>是<strong>TCP&#x2F;IP体系结构运输层中</strong>的<strong>两个重要协议</strong></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1aja6sjf1wsg.webp" alt="image"></p><ul><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1mc21iy1ld4w.webp" alt="image"></p><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><ul><li>一般来说，我们总是希望<code>数据传输</code>得更快一些。</li><li>但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</li><li>所谓<code>流量控制(flow control)</code>就是<strong>让发送方的发送速率不要太快，要让接收方来得及接收</strong>。</li><li>流量控制怎么更好地实现？<ul><li>利用<code>滑动窗口机制</code>可以很方便地在TCP连接上实现对发送方的流量控制。</li><li>TCP接收方利用自己的接收窗口的大小来限制发送方发送窗口的大小。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.2data3orpc2s.webp" alt="image"></p><ul><li>TCP发送方收到接收方的零窗口通知后，应启动<mark>持续计时器</mark>。持续计时器超时后，向接收方发送<mark>零窗口探测报文</mark>。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.1383702862lc.webp" alt="image"></p><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h2 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h2><ul><li>在某段时间,若对<strong>网络中某一资源的需求超过了该资源所能提供的可用部分网络性能就要变坏</strong>。这种情况就叫做<strong>拥塞</strong>(congestion)。</li><li>在计算机网络中的链路容量(即带宽)、交换结点中的缓存和处理机等，都是网络的资源。</li><li>若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降。</li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.2rhjnsq8mt20.webp" alt="image"></p><h3 id="拥塞窗口与状态变量"><a href="#拥塞窗口与状态变量" class="headerlink" title="拥塞窗口与状态变量"></a>拥塞窗口与状态变量</h3><ul><li>发送方维护一个叫做拥塞窗口cwnd的状态变量，其值取决于网络的拥塞程度，并且动态变化。<ul><li>拥塞窗口cwnd的维护原则：只要网络没有出现拥塞，拥塞窗口就再增大一些;但只要网络出现拥塞，拥塞窗口就减少一些。</li><li>判断出现网络拥塞的依据：没有按时收到应当到达的确认报文(即发生超时重传)。</li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.295xorkv93i8.webp" alt="image"></p><ul><li>发送方将<code>拥塞窗口</code>作为发送窗口swnd，即<strong>swnd&#x3D; cwnd</strong>。</li><li>维护一个慢开始门限<code>ssthresh状态变量</code>:<ul><li>当<code>cwnd &lt; ssthresh</code>时，使用<strong>慢开始算法</strong>:</li><li>当<code>cwnd &gt; ssthresh</code>时，停止使用慢开始算法而<strong>改用拥塞避免算法</strong>;</li><li>当<code>cwnd = ssthresh</code>时，既<strong>可使用慢开始算法，也可使用拥塞避免算法</strong>。</li></ul></li></ul><blockquote><p>慢开始算法指的是每经过一个传输轮次，拥塞窗口就加倍，窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><blockquote><p>拥塞避免算法每经过一个传输轮次，拥塞窗口 <strong>cwnd &#x3D; cwnd + 1</strong>。使拥塞窗口 cwnd 按线性规律缓慢增长。</p></blockquote><hr><blockquote><p>慢开始是指一开始向网络注入的报文段少，并不是指拥塞窗口cwnd增长速度慢;</p><p>拥塞避免并非指完全能够避免拥塞，而是指在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞.</p></blockquote><ul><li>所谓快重传，就是使发送方<strong>尽快进行重传</strong>，而<strong>不是等超时重传计时器超时</strong>再重传。<ul><li>要求接收方不要等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong>;</li><li>即使收到了失序的报文段也要立即发出对已收到的报文段的<strong>重复确认</strong>。</li><li>发送方一旦<strong>收到3个连续的重复确认</strong>，就将相应的报文段<strong>立即重传</strong>，而不是等该报文段的超时重传计时器超时再重传。</li><li>对于个别丢失的报文段，发送方不会出现超时重传，也就不会误认为出现了拥塞（进而降低拥塞窗口cwnd为1)。使用快重传可以使整个网络的吞吐量提高约20%。</li></ul></li><li>发送方一旦<strong>收到3个重复确认</strong>，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法;<ul><li><strong>发送方将慢开始门限ssthresh值和拥塞窗口cwnd值调整为当前窗口的一半;开始执行拥塞避免算法</strong>。</li><li>也有的快恢复实现是把快恢复开始时的拥塞窗口cwnd值再增大一些，即等于新的ssthresh + 3。<ul><li>既然发送方收到3个重复的确认，就表明有3个数据报文段已经离开了网络;</li><li>这3个报文段不再消耗网络资源而是停留在接收方的接收缓存中;</li><li>可见现在网络中不是堆积了报文段而是减少了3个报文段。因此可以适当把拥塞窗口扩大些。</li></ul></li></ul></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.5ftqrwvw4n80.webp" alt="image"></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.434aom9plea0.webp" alt="image"></p><h2 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h2><p>存在的问题：</p><ul><li><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></li><li><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></li></ul><p><strong>举例：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022154350745-170124572999443.png" alt="image-20201022154350745"></p><p><strong>总结：</strong></p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022154418863-170124572999444.png" alt="image-20201022154418863"></p><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ul><li><strong>TCP</strong>基于以<code>字节</code>为单位的<mark><strong>滑动窗口</strong></mark>来实现<code>可靠传输</code></li></ul><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image.58li4eiigd80.webp" alt="image"></p><ul><li>虽然发送方的发送窗口是根据接收方的接收窗口设置的，但在同一时刻，发送方的发送窗口并不总是和接收方的接收窗口<code>一样大</code>。<mark>因为发送窗口是从接收方的接收窗口和拥塞窗口中取最小值。</mark></li></ul><p>🌈补充：</p><ol><li>对于不按序到达的数据应如何处理，TCP并无明确规定。</li><li>TCP要求接收方必须有<code>累积确认和捎带确认</code>机制</li><li>TCP的通信是<strong>全双工通信</strong>。通信中的每一方都在发送和接收报文段。因此,每一方都有自己的发送窗口和接收窗口。在谈到这些窗口时,一定要弄清楚是哪一方的窗口。</li></ol><h2 id="TCP的运输连接管理⭐⭐⭐"><a href="#TCP的运输连接管理⭐⭐⭐" class="headerlink" title="TCP的运输连接管理⭐⭐⭐"></a>TCP的运输连接管理⭐⭐⭐</h2><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022193215183-170124013647719.png" alt="image-20201022193215183"></p><h3 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022194219693.png" alt="image-20201022194219693"></p><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022194350899.png" alt="image-20201022194350899"></p><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022194926877.png" alt="image-20201022194926877"></p><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022195108616.png" alt="image-20201022195108616"></p><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</li><li>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022195847144.png" alt="image-20201022195847144"></p><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</li><li>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</li><li>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022202010182.png" alt="image-20201022202010182"></p><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</li><li>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022202932905.png" alt="image-20201022202932905"></p><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022203744174.png" alt="image-20201022203744174"></p><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有&gt; 丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个&gt; 早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同&gt; 意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因&gt; 此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。</p><p>所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h3 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022205124204.png" alt="image-20201022205124204"></p><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</li><li>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022210030419.png" alt="image-20201022210030419"></p><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</li><li>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</li></ul></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022232158631.png" alt="image-20201022232158631"></p><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022233050922.png" alt="image-20201022233050922"></p><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022233941557.png" alt="image-20201022233941557"></p><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</li><li>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</li></ul></blockquote><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022234741310.png" alt="image-20201022234741310"></p><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</li><li>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022234942562.png" alt="image-20201022234942562"></p><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h3 id="TCP保活计时器的作用"><a href="#TCP保活计时器的作用" class="headerlink" title="TCP保活计时器的作用"></a>TCP保活计时器的作用</h3><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201022235800155.png" alt="image-20201022235800155"></p><h2 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h2><h3 id="UDP用户数据报的首部格式"><a href="#UDP用户数据报的首部格式" class="headerlink" title="UDP用户数据报的首部格式"></a>UDP用户数据报的首部格式</h3><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201021205214512-170124400660329.png" alt="image-20201021205214512"></p><h3 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h3><p>源端口和目的端口：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201023005210010.png" alt="image-20201023005210010"></p><p>序号、确认号和确认标志位：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201023003826059.png" alt="image-20201023003826059"></p><p>数据偏移（<mark><strong>首部长度</strong></mark>）、保留、窗口和校验和：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201023004227265.png" alt="image-20201023004227265"></p><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201023005001450.png" alt="image-20201023005001450"></p><p>选项和填充：</p><p><img src="/../assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20201023005132426.png" alt="image-20201023005132426"></p><h1 id="应用层✏️"><a href="#应用层✏️" class="headerlink" title="应用层✏️"></a>应用层✏️</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot面试题</title>
      <link href="/2023/10/03/%E9%9D%A2%E8%AF%95-SpringBoot/"/>
      <url>/2023/10/03/%E9%9D%A2%E8%AF%95-SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>自动装配？</p><p>@SpringBootApplication</p><p>IOC？</p><p>@Bean和@Import</p><p>第九集-Bean注册</p><p><a href="https://www.bilibili.com/video/BV14z4y1N7pg?p=9&spm_id_from=pageDriver&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">https://www.bilibili.com/video/BV14z4y1N7pg?p=9&amp;spm_id_from=pageDriver&amp;vd_source=fa7ba4ae353f08f1d08d1bb24528e96c</a></p><p>第十集-注册bean的条件</p><p>总结：7~11集看看</p><p>这个视频里还有参数校验（Spring Valication）</p><p><img src="/../assets/SpringBoot/image-20231222154613637.png" alt="image-20231222154613637"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2023/09/05/Study-Java%E9%9B%86%E5%90%88/"/>
      <url>/2023/09/05/Study-Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本篇文章学习自<a href="https://www.bilibili.com/video/BV1YA411T76k/">【韩顺平讲Java】Java集合专题</a></p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>Java集合学习总览图：</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905215900101.png" alt="Java集合学习总览图"></p><h1 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h1><ol><li>单列集合</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905221342150.png" alt="单列集合"></p><ol start="2"><li>双列集合</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230905221800749.png" alt="双列集合"></p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Colection接口常用方法"><a href="#Colection接口常用方法" class="headerlink" title="Colection接口常用方法"></a>Colection接口常用方法</h2><ol><li>add:添加单个元素</li><li>remove:删除指定元素</li><li>contains:查找元素是否存在</li><li>size:获取元素个数</li><li>isEmpty:判断是否为空</li><li>clear:清空</li><li>addAIl:添加多个元素</li><li>containsAll:查找多个元素是否都存在</li><li>removeAll: 删除多个元素</li></ol><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><ol><li>迭代器：iterator，遍历完还想遍历要重置迭代器，否则会抛异常</li><li>集合的增强for：底层原理还是迭代器</li></ol><blockquote><p>关于JVM学习后的补充：</p><ul><li><p>对于集合的增强for的底层实现，通过编译期得到的字节码文件得知是使用的迭代器；</p></li><li><p>但是对于普通数组的增强for，他的底层实现其实是最普通的带索引的for循环；</p></li><li><p>所以不能说增强for的底层是迭代器，是要分情况的。</p></li></ul></blockquote><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="List接口基本介绍"><a href="#List接口基本介绍" class="headerlink" title="List接口基本介绍"></a>List接口基本介绍</h3><p>List 接口是 Collection 接口的子接口 </p><ol><li><p>List .javaList集合类中元素有序(即添加顺序和取出顺序一致)、且可重复[案例]</p></li><li><p>List集合中的每个元素都有其对应的顺序索引，即支持索引。</p></li><li><p>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素</p></li></ol><h3 id="List接口常用方法"><a href="#List接口常用方法" class="headerlink" title="List接口常用方法"></a>List接口常用方法</h3><ol><li>void add(int index, Object ele):在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li><li>Object get(int index):获取指定index位置的元素</li><li>int indexOf(Object obi):返回obi在集合中首次出现的位置</li><li>int lastlndexof(Object obj):返回obj在当前集合中末次出现的位置</li><li>Object remove(int index):移除指定index位置的元素，并返回此元素</li><li>Object set(int index, Object ele):设置指定index位置的元素为ele相当于是替换</li><li>List subList(int fromlndex, int tolndex):返回从fromIndex到tolndex位置的子集合</li></ol><h3 id="ArrayList源码分析⭐⭐⭐"><a href="#ArrayList源码分析⭐⭐⭐" class="headerlink" title="ArrayList源码分析⭐⭐⭐"></a>ArrayList源码分析⭐⭐⭐</h3><ol><li>ArrayList中维护了一个Object类型的<strong>数组</strong>elementData<br><strong>transient</strong> Objectll elementData:</li></ol><blockquote><p>transient：被该关键字修饰的对象等，表示该属性<strong>不会被序列化</strong></p></blockquote><ol><li>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData为1.5倍。</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230906150045877.png" alt="三种构造器"></p><ol start="3"><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容则直接扩容elementData为1.5倍</li></ol><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li><p>Vector底层也是一个对象数组，protected Objectp[ ] elementData;</p></li><li><p>Vector是线程同步的，即线程安全，Vector类的操作方法带有<strong>synchronized</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt;= elementCount)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在开发中，需要线程同步安全时，考虑使用Vector</li></ul><blockquote><p>ArrayList是线程不安全的，没有加synchronized，在多线程的情况下不建议使用ArrayList，而是使用Vector</p></blockquote><table><thead><tr><th>类型</th><th>底层结构</th><th>线程安全（同步） 效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>不安全，效率高</td><td>无参默认0个，第一次扩容10个，后续1.5倍扩</td></tr><tr><td>Vector</td><td>可变数组</td><td>安全，效率不高</td><td>无参默认10个，后续2倍扩</td></tr></tbody></table><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>LinkedList底层实现了<strong>双向链表</strong>和<strong>双端队列</strong>特点</li><li>可以添加任意元素(元素可以重复)，包括null</li><li><strong>线程不安全</strong>，没有实现同步</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="Set接口基本介绍"><a href="#Set接口基本介绍" class="headerlink" title="Set接口基本介绍"></a>Set接口基本介绍</h3><ul><li><p>无序 (添加和取出的顺序不一致)，没有索引</p></li><li><p>不允许重复无素，所以最多包含一个null</p></li></ul><blockquote><p>注意：虽然取出元素时是无序的，但每次取出却都是固定的。</p></blockquote><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet底层其实就是HashMap，而HashMap底层又是<strong>邻接链表</strong>，当效率不够时会变为<strong>红黑树</strong></p><p>构造器源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>HashSet不保证元素是有序的，取决于hash后，再确定索引的结果</p></blockquote><h4 id="总体结论"><a href="#总体结论" class="headerlink" title="总体结论"></a>总体结论</h4><ol><li>添加一个元素时，先得到hash值，会转成索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放的有元素</li><li>如果没有，直接加入</li><li>如果有，调用 equals 比较，如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在Java8中,如果一条链表的元素个数到达<code>TREEIFY THRESHOLD</code>(默认是 8)，并且table的大小 &gt;&#x3D;<code>MIN TREEIFY CAPACITY</code>(默认64)就会进行树化(红黑树)</li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907160829758.png" alt="image-20230907160829758"></p><hr><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907225342640.png" alt="image-20230907225342640"></p><h4 id="源码详细解释：⭐⭐⭐⭐⭐"><a href="#源码详细解释：⭐⭐⭐⭐⭐" class="headerlink" title="源码详细解释：⭐⭐⭐⭐⭐"></a>源码详细解释：⭐⭐⭐⭐⭐</h4><ol><li><p>HashSet底层就是HashMap，所以会以值为key，然后一个通用的占位符为value进行调用map的put方法</p></li><li><p>在put方法调用后进入putVaule方法中</p></li><li><p>在该方法中根据key得到的hash值并不是最终结果，还要经过计算得到一个h的常量，最终再通过h来判断出索引位</p></li><li><p>然后先对存放在数组中的元素进行等值判断，若该处没元素则直接存入，若存在且相同则退出</p></li><li><p>第二个if就是如果数组中存放的是红黑树，则进行红黑树的添加</p></li><li><p>第三种情况就是数组中存放的是链表，那么将进入for循环依次对比各个元素，要么链表中全部元素都不相同则排到链表末尾，如果碰到有一个相同的就直接退出</p></li><li><p>在末尾添加时会统计该链表的长度，若到达8则会考虑树化，树化的条件不仅是链表长度到达8，而且表长度要到达64</p></li></ol><hr><p><strong>看源码写注释理解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//这里都是定义一些需要的变量</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        <span class="comment">//如果数组（table）为空，就去调用resize扩容方法</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">//如果得到的索引值处的位置为空，则直接将Node结点存入该处</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">//否则第一种情况：如果此时hash值相同且equal比较后相同，那么就会替换value值</span></span><br><span class="line">            <span class="comment">//在HashMap中是替换value值，在HashSet中也是替换value值，只不过值相同而已</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//第二种情况：发现数组中存放的红黑树结构，则进行红黑树的后续添加操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">//第三种情况：剩下的情况就是在链表中查看是否有hash值相同且equal比较后相同的</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//一直循环遍历整条链表，只会有下面两种情况退出</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//第一种情况：找到最后都没有找到，直接把元素添加到链表末尾</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//添加后要判断链表长度是不是到达8，可能进行相应的树化操作</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) </span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//第二种情况：找到了相同的，那么就替换值即可</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里是替换值的操作</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; </span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//如果此时添加</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐"><a href="#HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐" class="headerlink" title="HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐"></a>HashSet扩容和转成红黑树机制⭐⭐⭐⭐⭐</h4><ol><li>HashSet底层是HashMap，第一次添加时，table 数组扩容到 16， 临界值<code>threshold</code>是 16乘以加载因子<code>loadFactor</code>0.75 &#x3D; 12</li><li>如果table数组使用到了临界值 12,就会扩容到16* 2 &#x3D; 32，新的临界值就是32*0.75 &#x3D; 24，依次类推</li></ol><blockquote><p>补充：根据下面的源码可知，每添加一个元素都算是size加一，而不是要等到表中每个位置到达临界值，即包括链表中的元素在内的元素个数到达临界值就会扩容；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure><p>举例：就算全部元素都加到同一个链表中，只要元素个数到达临界值就要扩容</p></blockquote><ol><li>在Java8中，如果一条链表的元素个数到达 <code>TREEIFY THRESHOLD</code>（默认是 8）并且table的大小 &gt;&#x3D;<code>MIN TREEIFY CAPACITY</code>（默认64）就会进行树化（红黑树）,否则仍然采用数组扩容机制</li></ol><p>利用下面这段代码进行debug查看：</p><blockquote><p>因为要hash值相同才会挂到同一个地方，所以重写了他们的hashCode都返回一样的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashSet&lt;A&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            hashSet.add(<span class="keyword">new</span> <span class="title class_">A</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直遍历到i&#x3D;8时（包括i&#x3D;8），此时都是存放在一条链表上的</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231345653.png" alt="image-20230907231345653"></p><p>此时到i&#x3D;9时，因为链表长度到达了8，此时就出发了扩容机制，表长度就会变为16*2&#x3D;32，而第9个元素会被存放在原链表的末尾，此时长度为9，且<strong>索引值会重新进行hash计算，不一定还是原来的索引值了</strong>。</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231658335.png" alt="image-20230907231658335"></p><p>此时运行到i&#x3D;10的时候，会再次触发扩容机制，则第10个元素会再次被添加到链表末尾，链表长度为10，然后表再次扩容为64</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907232000347.png" alt="image-20230907232000347"></p><p>此时到i&#x3D;11的时候，再次添加元素就同时满足链表长度到达8且表长度到达64的两个条件了，则会将链表转换为红黑树</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230907231052305.png" alt="image-20230907231052305"></p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><ol><li><p>LinkedHashSet 是 HashSet 的子类</p></li><li><p>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个 <strong>数组+ 双向链表</strong></p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时<strong>使用链表维护元素的次序</strong>(图)，这使得元素看起来是以插入顺序保存的。</p></li><li><p>LinkedHashSet 不允许添重复元素</p></li></ol><p>执行下面代码，所维护的双向链表如图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;刘&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br></pre></td></tr></table></figure><hr><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908154435929.png" alt="image-20230908154435929"></p><hr><p>在LinkedHashSet中的table中存放的是LinkedHashMap$Entry，他继承了HashMap$Node</p><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908160006697.png" alt="image-20230908160006697"></p><p>🔴🟡🟢总结：</p><blockquote><p>其实只是增加了一个双向链表而已，其他什么都没变HashSet，包括原来的next也是保留了的</p></blockquote><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ol><li><p>TreeSet底层其实是TreeMap</p></li><li><p>key不能为null</p></li><li><p>底层维护了一个红黑树</p></li></ol><p><img src="/../assets/Java%E9%9B%86%E5%90%88/image-20230908224358603.png" alt="image-20230908224358603"></p><hr><p>在发现比较相同的时候，会重置value的值，在TreeSet情况下，相对于key来说，其实是<strong>加不进去的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cpr != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parent = t;</span><br><span class="line">        cmp = cpr.compare(key, t.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            t = t.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">            t = t.right;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//在发现比较相同的时候，会重置value的值，但是相对于key来说，其实是加不进去的</span></span><br><span class="line">            <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">    &#125;<span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>比如在运行下面这段代码时字符串<code>php</code>其实是加不进去的，比较判断逻辑是比较字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1, o2) -&gt; o1.length() - o2.length());</span><br><span class="line">        treeSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;c++&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;php&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c++, java, python]</span><br></pre></td></tr></table></figure><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Map接口特点"><a href="#Map接口特点" class="headerlink" title="Map接口特点"></a>Map接口特点</h2><ol><li>Map与Collection并列存在，用于保存具有映射关系的数据：Key-Value</li><li>Map 中的 key 和 value 可以是任何引用类型的数据，会封装到HashMap$Node对象中</li><li>Map 中的 key 不允许重复，原因和HashSet 一样，前面分析过源码</li><li>Map 中的 value 可以重复</li><li>Map 的key 可以为 null，value 也可以为null，注意 key 为null，只能有一个value为null，可以多个。</li><li>常用String类作为Map的 key</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</li></ol><ol start="8"><li>一对 k-v 是放在一个HashMap$Node中的，又因为Node实现了Entry 接口，有些书上也说 一对k-v就是一个Entry</li></ol><blockquote><p>第8点补充：其实就是为了<strong>方便遍历</strong>，所以把Node类型的数据转成entry类型的数据，在使用一个entrySet集合来进行保存各个entry。</p></blockquote><h2 id="Map接口常用方法"><a href="#Map接口常用方法" class="headerlink" title="Map接口常用方法"></a>Map接口常用方法</h2><ol><li>put:添加</li><li>remove:根据键删除映射关系</li><li>get: 根据键获取值</li><li>size:获取元素个数</li><li>isEmpty:判断个数是否为0</li><li>clear:清除</li><li>containsKey:查找键是否存在</li></ol><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>HashMap是线程不安全的</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>key相同是<strong>值替换</strong>，而不是整个键值对替换</li></ul><p>查看源码可知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">    <span class="keyword">if</span>(!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">        e.value = value;</span><br><span class="line">    afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体源码分析</li></ul><blockquote><p>具体可看上面的HashSet讲解，因为HashSet底层就是HashMap</p></blockquote><ol><li>HashMap底层维护了Node类型的数组table，默认为null当创建对象时，将加载因子<code>loadfactor</code>初始化为0.75</li><li>当添加key-val时，通过key的哈希值得到在table的索引，然后判断该索引处是否有元素</li><li>如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key和准备加入的key相是否等，如果相等，则直接替换val；如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容。</li><li>第1次添加，则需要扩容table容量为16，临界值<code>threshold</code>为12（16*0.75）</li><li>以后再扩容，则需要扩容table容量为原来的2倍（32），临界值为原来的2倍,即24,依次类推</li><li>在Java8中,如果一条链表的元素个数超过<code>TREEIFY_THRESHOLD</code>（默认是 8），并且table的大小 &gt;&#x3D; <code>MIN TREEIFY CAPACITY</code>（默认64），就会进行树化（红黑树）</li></ol><h3 id="⭐⭐⭐补充：头插法的不安全性"><a href="#⭐⭐⭐补充：头插法的不安全性" class="headerlink" title="⭐⭐⭐补充：头插法的不安全性"></a>⭐⭐⭐补充：头插法的不安全性</h3><p>文章参考自：<a href="https://juejin.cn/post/7236009910147825719?searchId=202307221616567C1AAB8045817A64ED43">https://juejin.cn/post/7236009910147825719?searchId=202307221616567C1AAB8045817A64ED43</a></p><p>在<code>jdk8</code>以前，hashmap使用的是头插法，头插法的好处就是在哈希冲突的时候，不用依次遍历链表中的各个元素去进行尾插到末尾，即时间复杂度从O(n)转变为了O(1)。</p><p>但是头插法有可能会出现<mark>循环链表的情况</mark>，导致死循环。</p><p>HashMap 死循环发生在 JDK 1.8 之前的版本中，它是指在并发环境下，因为多个线程同时进行 put 操作，导致链表形成环形数据结构，一旦形成环形数据结构，在 get(key) 的时候就会产生死循环。如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/0affbdf35acf45aca3c3dbe6a5bbee78tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="image.png"></p><h4 id="死循环原因"><a href="#死循环原因" class="headerlink" title="死循环原因"></a>死循环原因</h4><p>HashMap 导致死循环的原因是由以下条件共同导致的：</p><ol><li>HashMap 使用头插法进行数据插入（JDK 1.8 之前）；</li><li>多线程同时添加；</li><li>触发了 HashMap 扩容。</li></ol><h4 id="头插法-扩容导致链表翻转"><a href="#头插法-扩容导致链表翻转" class="headerlink" title="头插法+扩容导致链表翻转"></a>头插法+扩容导致链表翻转</h4><p>头插法是指新来的值会取代原有的值，插入到链表的头部，如下图所示。</p><p>原链表如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/ce7c5f5bc801434c80734f489aa5d68btplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="img"> 此时使用头插入插入一个元素 Z，如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/b2804dde2e0b414fa4c8abf92682ad25tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="img"> 头插法会导致 HashMap 在进行扩容时，链表的顺序发生反转，如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/8a16390f2fc945a7a4b921604f3c2649tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="img"> 因为在 HashMap 扩容时，会先从旧 HashMap 的头节点读取并插入到新 HashMap 节点中，旧节点的读取顺序是 A -&gt; B -&gt; C，于是插入到新 HashMap 中的顺序就变成了 C -&gt; B -&gt; A，这样就破坏了链表的顺序，导致了链表反转。</p><h4 id="死循环产生过程"><a href="#死循环产生过程" class="headerlink" title="死循环产生过程"></a>死循环产生过程</h4><ol><li>死循环执行步骤1</li></ol><p>死循环是因为并发 HashMap 扩容导致的，并发扩容的第一步，线程 T1 和线程 T2 要对 HashMap 进行扩容操作，此时 T1 和 T2 指向的是链表的头结点元素 A，而 T1 和 T2 的下一个节点，也就是 T1.next 和 T2.next 指向的是 B 节点，如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/3eefc80bb23e483881dbacc01e8c0dbftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="image.png"></p><ol start="2"><li>死循环执行步骤2</li></ol><p>死循环的第二步操作是，线程 T2 时间片用完进入休眠状态，而线程 T1 开始执行扩容操作，一直到线程 T1 扩容完成后，线程 T2 才被唤醒，扩容之后的场景如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/a274c3e03b934b41bd186d830da25fc8tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="image.png"> 从上图可知线程 T1 执行之后，因为是头插法，所以 HashMap 的顺序已经发生了改变，但线程 T2 对于发生的一切是不可知的，所以它的指向元素依然没变，如上图展示的那样，T2 指向的是 A 元素，T2.next 指向的节点是 B 元素。</p><ol start="3"><li>死循环执行步骤3</li></ol><p>当线程 T1 执行完，而线程 T2 恢复执行时，死循环就建立了，如下图所示： <img src="/../assets/Java%E9%9B%86%E5%90%88/195338f01b8c4c7590235fcb26432e45tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="image.png"> 因为 T1 执行完扩容之后 B 节点的下一个节点是 A，而 T2 线程指向的首节点是 A，第二个节点是 B，这个顺序刚好和 T1 扩完容完之后的节点顺序是相反的。<strong>T1 执行完之后的顺序是 B 到 A，而 T2 的顺序是 A 到 B，这样 A 节点和 B 节点就形成死循环了</strong>，这就是 HashMap 死循环导致的原因。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>HashMap 死循环的常用解决方案有以下几个：</p><ol><li>升级到高版本 JDK（JDK 1.8 以上），高版本 JDK 使用的是尾插法插入新元素的，所以不会产生死循环的问题；</li><li>使用线程安全容器 ConcurrentHashMap 替代（推荐使用此方案）；</li><li>使用线程安全容器 Hashtable 替代（性能低，不建议使用）；</li><li>使用 synchronized 或 Lock 加锁 HashMap 之后，再进行操作，相当于多线程排队执行（比较麻烦，也不建议使用）。</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>HashMap 死循环发生在 JDK 1.7 版本中，形成死循环的原因是 HashMap 在 JDK 1.7 使用的是头插法，头插法 + 多线程并发操作 + HashMap 扩容，这几个点加在一起就形成了 HashMap 的死循环，解决死循环可以采用线程安全容器 ConcurrentHashMap 替代。</p><blockquote><p>JDK官方文档说hashmap本身就是让单线程去操作的，要是多线程还是使用ConcurrentHashMap</p></blockquote><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ol><li>线程安全，因为方法上有加synchronized</li><li>Hashtable中key和value都不能是null，否则会抛异常</li><li>底层是Hashtable&amp;Entry[ ] 数组，第一次扩容大小为11</li><li>加载因子<code>loadfactor</code>初始化为0.75</li><li>第一次临界值<code>threshold</code>为8（11*0.75）</li><li>进行扩容时是按两倍加一来扩容，例如11*2+1&#x3D;23，第二次扩容大小就为23</li></ol><h2 id="Propoties"><a href="#Propoties" class="headerlink" title="Propoties"></a>Propoties</h2><ol><li>Propoties是Hashtable的子类</li><li>Properties 还可以用于从<code>xxx.properties</code>文件中，加载数据到Properties类对象并进行读取和修改</li></ol><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ol><li><p>底层维护了一个红黑树</p></li><li><p>key不能为null</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TreeMap&lt;Object, Object&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        treeMap.put(<span class="string">&quot;java&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        treeMap.put(<span class="literal">null</span>,<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>在发现比较相同的时候，会重置value的值，因为key会被认为是同一个对象，所以只会重置value值</li></ol><blockquote><p>例如下面例子中<code>c++</code>先被添加，再添加<code>php</code>时因为字符串长度一致所以被认为是同一个对象，所以只会修改值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;     </span><br><span class="line">        TreeMap&lt;String, Integer&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; o1.length() - o2.length());</span><br><span class="line">        treeMap.put(<span class="string">&quot;java&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;c++&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;python&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;php&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;c++=<span class="number">2</span>, java=<span class="number">1</span>, python=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ol><li>reverse(List): 反转 List 中元素的顺序</li><li>shuffle(List): 对 List 集合元素进行随机排序</li><li>sort(List): 根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator): 根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int): 将指定 list 集合中的i 处元素和j处元素进行交换</li><li>Object max(Collection): 根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection,Comparator): 根据 Comparator 指定的顺序返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection，Object): 返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src): 将src中的内容复制到dest中</li><li>boolean replaceAll(List list,Object oldVal，object newVal): 使用新值替换 List 对象的所有旧值</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程</title>
      <link href="/2023/08/28/Study-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/08/28/Study-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230828164359091.png" alt="image-20230828164359091"></p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230828164436283.png" alt="image-20230828164436283"></p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h2><ol><li>进程</li></ol><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的 当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 <strong>进程就可以视为程序的一个实例。</strong>大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等） </p><ol start="2"><li>线程</li></ol><p><strong>一个进程之内可以分为一到多个线程。</strong> 一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</p><ol start="3"><li>二者对比</li></ol><ul><li><p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集 </p></li><li><p>进程拥有共享的资源，如内存空间等，供其内部的线程共享 </p></li><li><p>进程间通信较为复杂，同一台计算机的进程通信称为 IPC， 不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP 线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 </p></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><p>引用 Rob Pike 的一段描述： </p><blockquote><p>并发（concurrent）是同一时间应对（dealing with）多件事情的能力 </p><p>并行（parallel）是同一时间动手做（doing）多件事情的能力 </p></blockquote><hr><p>例子：</p><ol><li><p>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发 </p></li><li><p>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一 个人用锅时，另一个人就得等待）</p></li><li><p>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</p></li></ol><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>同步：需要等待结果返回，才能继续运行</p><p>异步：不需要等待结果返回，就能继续运行</p><hr><p><strong>多线程可以让方法执行变为异步的</strong>（即不要巴巴干等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如果没有线程调度机制，这 5 秒 cpu 什么都做不了，其它代码都得暂停…</p><h2 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h2><p>充分利用多核 cpu 的优势，提高运行效率。想象下面的场景，执行 3 个计算，最后将计算结果汇总。 </p><table><thead><tr><th>计算 1 花费 10 ms</th></tr></thead><tbody><tr><td>计算 2 花费 11 ms</td></tr><tr><td>计算 3 花费 9 ms</td></tr><tr><td>汇总需要 1 ms</td></tr></tbody></table><hr><p>如果是串行执行，那么总共花费的时间是 10 + 11 + 9 + 1 &#x3D; 31ms 但如果是四核 cpu，各个核心分别使用线程 1 执行计算 1，线程 2 执行计算 2，线程 3 执行计算 3，那么 3 个 线程是并行的，花费时间只取决于最长的那个线程运行的时间，即 11ms 最后加上汇总时间只会花费 12ms </p><blockquote><p><strong>注意</strong>：需要在多核 cpu 才能提高效率，单核仍然时是轮流执行</p></blockquote><p><strong>结论：</strong> </p><ol><li><p>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu ，不至于一个线程总占用 cpu，别的线程没法干活 </p></li><li><p>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</p></li></ol><ul><li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率</li><li>但不是所有计算任务都能拆分（参考后文的【阿姆达尔定律】） </li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li></ul><ol start="3"><li>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但需要一 直等待 IO 结束，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化</li></ol><h1 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h1><h2 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h2><ol><li>创建Runnable接口对象配合Thread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> () -&gt; log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><blockquote><p>用 Runnable 更容易与线程池等高级 API 配合 </p><p>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</p></blockquote><hr><ol start="2"><li>FutureTask 配合 Thread</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hhhhhhhhhhh&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task, <span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p></blockquote><h2 id="观察多个线程同时运行"><a href="#观察多个线程同时运行" class="headerlink" title="观察多个线程同时运行"></a>观察多个线程同时运行</h2><p>两个线程交替执行，谁先谁后不受我们控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>在Windows环境下，可以通过任务管理器来查看进程和线程数，也可以用来杀死进程<ul><li>tasklist 查看进程</li><li>taskkill 杀死进程</li></ul></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>Linux环境下有关进程的指令<ul><li><code>ps -ef</code> 查看所有进程</li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li><li><code>kill</code> 杀死进程</li><li><code>top</code> 按大写H切换是否显示进程</li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程(PID)的所有线程</li></ul></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li>jps命令查看所有Java进程</li><li>jstack 查看某个Java进程(PID)的所有线程状态</li><li>jconsole 查看某个Java进程中线程的运行情况(图形界面)</li></ul><hr><p>jconsole 远程监控配置：</p><p>需要以如下方式运行你的 java 类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure><h2 id="原理之线程运行"><a href="#原理之线程运行" class="headerlink" title="原理之线程运行"></a>原理之线程运行</h2><h3 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h3><ol><li><p>虚拟机栈：<strong>线程</strong>运行需要的内存空间</p></li><li><p>栈帧：每个<strong>方法</strong>运行时需要的内存</p></li></ol><p>结合JVM学习知识</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230903213826052.png" alt="线程运行图解"></p><blockquote><p>多线程的情况下，每个线程有自己独立的栈内存，互不干扰</p></blockquote><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>因为以下一些原因导致 <strong>cpu 不再执行当前的线程，转而执行另一个线程的代码</strong> </p><ul><li>线程的 cpu 时间片用完 </li><li>垃圾回收 </li><li>有更高优先级的线程需要运行 </li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</li></ul><p>当线程上下文切换发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是<strong>程序计数器</strong>（Program Counter Register），它的作用是<strong>记住下一条 jvm 指令的执行地址，是线程私有的</strong> </p><ul><li>状态包括<strong>程序计数器</strong>、<strong>虚拟机栈中每个栈帧的信息</strong>，如局部变量、操作数栈、返回地址等 </li><li>线程上下文切换<strong>频繁</strong>发生会<strong>影响性能</strong></li></ul><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th><th align="center">注意</th></tr></thead><tbody><tr><td align="center">start()</td><td align="center"></td><td align="center">启动一个新线程，在新的线程运行run方法中的代码</td><td align="center">start方法只是让线程进入就绪，里面代码不一定立刻运行（CPU的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException的错误</td></tr><tr><td align="center">run()</td><td align="center"></td><td align="center">新线程启动后会调用的方法</td><td align="center">如果在构造Thread对象时传递了Runnable参数，则线程启动后会调用Runnable中的run方法，否则默认不执行任何操作。但可以创建Thread的子类对象，来覆盖默认行为</td></tr><tr><td align="center">join()</td><td align="center"></td><td align="center">等待线程运行结束</td><td align="center"></td></tr><tr><td align="center">join(long n)</td><td align="center"></td><td align="center">等待线程运行结束，最多等待n毫秒</td><td align="center"></td></tr><tr><td align="center">getId()</td><td align="center"></td><td align="center">获取线程长整型的id</td><td align="center">id唯一</td></tr><tr><td align="center">getName()</td><td align="center"></td><td align="center">获取线程名</td><td align="center"></td></tr><tr><td align="center">setName(String)</td><td align="center"></td><td align="center">修改线程名</td><td align="center"></td></tr><tr><td align="center">getPriority()</td><td align="center"></td><td align="center">获取线程优先级</td><td align="center"></td></tr><tr><td align="center">setPriority(int)</td><td align="center"></td><td align="center">修改线程优先级</td><td align="center">Java中规定线程优先级是1~10的整数，较大的优先级能提高该线程被CPU调度的机率</td></tr><tr><td align="center">getState()</td><td align="center"></td><td align="center">获取线程状态</td><td align="center">Java中线程状态是用6个enum表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</td></tr><tr><td align="center">isInterrupted()</td><td align="center">static</td><td align="center">判断是否被打断</td><td align="center"><strong>不会清除打断标记</strong></td></tr><tr><td align="center">isAlive()</td><td align="center">static</td><td align="center">线程是否存活（还没有运行完毕）</td><td align="center"></td></tr><tr><td align="center">interrupt()</td><td align="center">static</td><td align="center">打断线程</td><td align="center">如果被打断线程正在sleep、wait、join会导致被打断的线程抛出InterruptedException，并清除打断标记；如果打断的正在运行的线程，则会设置打断标记；park的线程被打断，也会设置打断标记</td></tr><tr><td align="center">interrupted()</td><td align="center">static</td><td align="center">判断当前线程是否被打断</td><td align="center"><strong>会清除打断标记</strong></td></tr></tbody></table><h2 id="start与run"><a href="#start与run" class="headerlink" title="start与run"></a>start与run</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                read(MP4_FULL_PATH);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).run();</span><br><span class="line">        log.debug(<span class="string">&quot;do other things ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">42</span>:<span class="number">59</span> [main] c.Sync - main</span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> [main] c.Sync - 读取文件耗时：3925ms</span><br><span class="line"><span class="number">17</span>:<span class="number">43</span>:<span class="number">03</span> [main] c.Sync - <span class="keyword">do</span> other things ...</span><br></pre></td></tr></table></figure><p>可以看见使用run方法去执行一个线程时是单线程的，并不会异步地去调用新线程<code>t1</code>。</p><p>将run方法改为start方法后，执行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [main] c.Sync - <span class="keyword">do</span> other things ...</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">13</span> [t1] c.Sync - t1</span><br><span class="line"><span class="number">17</span>:<span class="number">50</span>:<span class="number">17</span> [t1] c.Sync - 读取文件耗时：3844ms</span><br></pre></td></tr></table></figure><p>可以看到线程异步调用。</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote><ul><li>直接调用run()是在主线程中执行了run()，并没有直接启动新线程</li><li>使用start是启动新的线程，通过新的线程间接执行run()中的代码</li></ul></blockquote><h2 id="sleep与yield"><a href="#sleep与yield" class="headerlink" title="sleep与yield"></a>sleep与yield</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><ol><li>调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞） </li><li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException </li><li>睡眠结束后的线程未必会立刻得到执行，也就是就绪态，因为操作系统未必会给予cpu进行执行</li><li>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性，例如<code>TimeUnit.SECONDS.sleep(1)</code>表示线程休眠1秒</li></ol><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ol><li>调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程 </li><li>具体的实现依赖于操作系统的任务调度器</li></ol><h3 id="二者区别⭐⭐⭐"><a href="#二者区别⭐⭐⭐" class="headerlink" title="二者区别⭐⭐⭐"></a>二者区别⭐⭐⭐</h3><ul><li><code>sleep</code>方法将线程从运行状态转移到阻塞状态，线程在指定的时间后返回到就绪状态。</li><li><code>yield</code>方法将线程从运行状态转移到就绪状态，线程愿意让出CPU时间片给其他线程。</li></ul><ul><li>线程只有在就绪状态下才能获得时间片，而在阻塞状态不会分配时间片。</li></ul><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.setPriority(Thread.MIN_PRIORITY);</span><br></pre></td></tr></table></figure><p>该方法有十个优先级，从1到10，默认为5，数字越大优先级越大</p><blockquote><p>需注意：yield和这个线程优先级都是作为提示功能，具体还是看任务调度器分配的时间片</p></blockquote><h3 id="sleep实用案例"><a href="#sleep实用案例" class="headerlink" title="sleep实用案例"></a>sleep实用案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> Thread.sleep(<span class="number">50</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，为防止无限死循环一直占用cpu，可使用sleep或yield方法进行休眠，不让这个程序一直占用cpu</p><h2 id="join方法详解"><a href="#join方法详解" class="headerlink" title="join方法详解"></a>join方法详解</h2><h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;t1开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">        log.debug(<span class="string">&quot;t1结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    log.debug(<span class="string">&quot;结果为：&#123;&#125;&quot;</span>, r);</span><br><span class="line">    log.debug(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中主线程会等待t1线程运行结束后才执行后续的操作，如下为图解：</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904132856038.png" alt="image-20230904132856038"></p><h3 id="等待多个结果"><a href="#等待多个结果" class="headerlink" title="等待多个结果"></a>等待多个结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 休眠1s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r1 = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 休眠2s</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        r2 = <span class="number">20</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r1：&#123;&#125;，r2：&#123;&#125;，耗时：&#123;&#125;ms&quot;</span>, r1, r2, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中有t1线程和t2线程，即使颠倒两个join方法的执行顺序，等待时间依然是两秒，如下为图解：</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904133129345.png" alt="image-20230904133129345"></p><h3 id="有时效的join方法"><a href="#有时效的join方法" class="headerlink" title="有时效的join方法"></a>有时效的join方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t1.join(<span class="number">500</span>);<span class="comment">//最多等0.5s</span></span><br></pre></td></tr></table></figure><ul><li><p>如果线程超过这个时间还未结束，则就不等待了。</p></li><li><p>如果线程在这个时间内提前结束，那么也直接结束了，并不会一直等够那么多时间。</p></li></ul><h2 id="interrupt方法详解"><a href="#interrupt方法详解" class="headerlink" title="interrupt方法详解"></a>interrupt方法详解</h2><blockquote><p>这里说的打断并不是真的直接打断，也只是起到一个<strong>提示</strong>的作用而已</p></blockquote><h3 id="打断-sleep，wait，join-的线程"><a href="#打断-sleep，wait，join-的线程" class="headerlink" title="打断 sleep，wait，join 的线程"></a>打断 sleep，wait，join 的线程</h3><p>这几个方法都会让线程进入<strong>阻塞状态</strong></p><p>打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> sleep(<span class="number">1</span>);</span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"> t1.start();</span><br><span class="line"> sleep(<span class="number">0.5</span>);</span><br><span class="line"> t1.interrupt();</span><br><span class="line"> log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line"> at java.lang.Thread.sleep(Native Method)</span><br><span class="line"> at java.lang.Thread.sleep(Thread.java:<span class="number">340</span>)</span><br><span class="line"> at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:<span class="number">386</span>)</span><br><span class="line"> at cn.itcast.n2.util.Sleeper.sleep(Sleeper.java:<span class="number">8</span>)</span><br><span class="line"> at cn.itcast.n4.TestInterrupt.lambda$test1$<span class="number">3</span>(TestInterrupt.java:<span class="number">59</span>)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"><span class="number">21</span>:<span class="number">18</span>:<span class="number">10.374</span> [main] c.TestInterrupt - 打断状态: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h3><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"> <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> current.isInterrupted();</span><br><span class="line"> <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line"> log.debug(<span class="string">&quot; 打断状态: &#123;&#125;&quot;</span>, interrupted);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"> t2.start();</span><br><span class="line"> sleep(<span class="number">0.5</span>);</span><br><span class="line"> t2.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>:<span class="number">57</span>:<span class="number">37.964</span> [t2] c.TestInterrupt - 打断状态: <span class="literal">true</span> </span><br></pre></td></tr></table></figure><h3 id="两阶段终止模式（通过interrupt实现）⭐⭐⭐"><a href="#两阶段终止模式（通过interrupt实现）⭐⭐⭐" class="headerlink" title="两阶段终止模式（通过interrupt实现）⭐⭐⭐"></a>两阶段终止模式（通过interrupt实现）⭐⭐⭐</h3><blockquote><p>两阶段终止模式是软件工程领域中的一种设计模式，通常用于确保在终止程序或系统时执行必要的清理工作，以防止资源泄漏或其他不良影响。这个模式分为两个阶段：</p><ol><li>第一阶段（准备阶段）：</li></ol><ul><li>在这个阶段，程序或系统开始准备关闭操作。它可能包括以下任务：<ul><li>停止接受新的请求或事务。</li><li>完成正在进行的任务或事务。</li><li>确保不再分配或使用新的资源。</li></ul></li></ul><ol start="2"><li>第二阶段（终止阶段）：</li></ol><ul><li>在这个阶段，程序或系统执行实际的关闭操作。这通常包括以下任务：<ul><li>释放已分配的资源，如内存、文件句柄、数据库连接等。</li><li>执行清理工作，例如关闭打开的文件、断开网络连接、保存状态信息等。</li><li>发送终止通知或事件，以便其他组件或系统可以做出相应的响应。</li></ul></li></ul><p>两阶段终止模式的目标是确保程序或系统在关闭时能够安全地释放资源并维护数据的完整性。这有助于避免资源泄漏和不稳定的状态。</p></blockquote><blockquote><p>在一个线程T1中如何优雅的终止线程T2？这里的优雅指的是给T2一个料理后事的机会</p></blockquote><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904215106648.png" alt="实现思路"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TPTInterrupt</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span> (current.isInterrupted()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;将结果保存&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    current.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 执行监控操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;监控线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TPTInterrupt</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TPTInterrupt</span>();</span><br><span class="line">t.start();</span><br><span class="line">Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">log.debug(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">t.stop();</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">42.915</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">43.919</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">44.919</span> c.TwoPhaseTermination [监控线程] - 将结果保存</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">45.413</span> c.TestTwoPhaseTermination [main] - stop</span><br><span class="line"><span class="number">11</span>:<span class="number">49</span>:<span class="number">45.413</span> c.TwoPhaseTermination [监控线程] - 料理后事</span><br></pre></td></tr></table></figure><h3 id="打断park线程"><a href="#打断park线程" class="headerlink" title="打断park线程"></a>打断park线程</h3><p>使用如下代码，执行park命令时，线程会暂停在那里，只有当interrupt为假时才会暂停在那里，当interrupt为真时线程就不会因该条语句而暂停，会跳过这行代码而进行下面的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.park();</span><br></pre></td></tr></table></figure><blockquote><p>park的线程被打断，也会设置打断标记，所以在一个线程中进行park打断后，此时的interrupt就为真了，只有在后面手动修改interrupt为假才能继续使用park打断。</p></blockquote><h2 id="不推荐的方法"><a href="#不推荐的方法" class="headerlink" title="不推荐的方法"></a>不推荐的方法</h2><p>这三个方法已经过时，而且容易破坏同步代码块，造成线程死锁</p><table><thead><tr><th align="center">方法名</th><th align="center">static</th><th align="center">功能说明</th></tr></thead><tbody><tr><td align="center">stop()</td><td align="center"></td><td align="center">停止线程运行</td></tr><tr><td align="center">suspend()</td><td align="center"></td><td align="center">挂起（暂停）线程运行</td></tr><tr><td align="center">resume()</td><td align="center"></td><td align="center">恢复线程运行</td></tr></tbody></table><h2 id="主线程与守护线程"><a href="#主线程与守护线程" class="headerlink" title="主线程与守护线程"></a>主线程与守护线程</h2><p>默认情况下，Java线程需要等待所有线程都运行结束，才会结束。</p><p>有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程开始执行&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;守护线程执行结束&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">    t1.setDaemon(<span class="literal">true</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;非守护线程执行结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，因为t1线程被设置为了守护线程，因为其他非守护线程，即这里的主线程停止了，即使t1里面有个死循环也要强制停止。</p><hr><ul><li>垃圾回收线程就是一种守护线程</li><li>Tomcat中的Acceptor和Poller线程都是守护线程，所以Tomcat接收到shutdown命令后秒回等待它们处理完当前请求</li></ul><h2 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h2><p>五种状态是从<strong>操作系统层面</strong>考虑的</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904222706849.png" alt="五种状态"></p><ul><li><p><code>初始状态</code>仅是在语言层面创建了线程对象，还未与操作系统线程关联 </p></li><li><p><code>可运行状态</code>（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行 </p></li><li><p><code>运行状态</code>指获取了 CPU 时间片运行中的状态 当 CPU 时间片用完，会从<code>运行状态</code>转换至<code>可运行状态</code>，会导致线程的上下文切换<code>阻塞状态</code></p><ul><li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入<code>阻塞状态</code> </li><li>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换<code>运行状态</code> </li><li>与<code>可运行状态</code>的区别是，对<code>阻塞状态</code>的线程来说只要它们一直不唤醒，调度器就一直不会考虑 调度它们</li></ul></li><li><p><code>终止状态</code>表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></li></ul><h2 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h2><p>六种状态是从 Java API 层面来描述的</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904223924307.png" alt="六种状态"></p><ul><li><p><code>NEW</code>：线程刚被创建，但还没有调用start()方法</p></li><li><p><code>RUNNABLE</code>：当调用了start()方法后</p><blockquote><p>注意：Java API层面的RUNNABLE状态涵盖了操作系统层面的<strong>可运行状态、运行状态和阻塞状态</strong></p></blockquote></li><li><p><code>BLOCKED</code>、<code>WAITINT</code>、<code>TIMED_WAITING</code>都是Java API层面对阻塞状态的细分，后面会在状态转换一节详细描述</p></li><li><p><code>TERMINATED</code>：当线程代码运行结束</p></li></ul><hr><ul><li>代码展示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestState&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. t1线程刚被创建，还未调用start()方法，此时状态为 NEW</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. t2线程已被创建，并且调用了start()方法，空循坏会保证t2线程不会结束，此时状态为RUNNABLE</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t2&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>) &#123; <span class="comment">// runnable</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. t3线程只是打印一条日志，由于主线程中调用了sleep()，故当我们查看t3线程状态时，t3已经执行完毕，状态为TERMINATED</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t3&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. t4线程中调用了sleep()方法，状态为timed_waiting，即有时限的等待，注意此时t4还拿到了一把锁，后面要用</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t4&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>); <span class="comment">// timed_waiting</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. t5线程中调用了t2.join()，需要等待t2线程结束，故状态为waiting，即无时限的等待</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t5&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    t2.join(); <span class="comment">// waiting</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t5.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 由于t4线程拿到了锁，但由于t4在sleep，故t6线程拿不到锁，会被阻塞，状态为blocked</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t6&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestState.class) &#123; <span class="comment">// blocked</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t6.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;t1 state &#123;&#125;&quot;</span>, t1.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t2 state &#123;&#125;&quot;</span>, t2.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t3 state &#123;&#125;&quot;</span>, t3.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t4 state &#123;&#125;&quot;</span>, t4.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t5 state &#123;&#125;&quot;</span>, t5.getState());</span><br><span class="line">        log.debug(<span class="string">&quot;t6 state &#123;&#125;&quot;</span>, t6.getState());</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">48.753</span> c.TestState [t3] - running...</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.264</span> c.TestState [main] - t1 state NEW</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t2 state RUNNABLE</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t3 state TERMINATED</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t4 state TIMED_WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t5 state WAITING</span><br><span class="line"><span class="number">11</span>:<span class="number">02</span>:<span class="number">49.265</span> c.TestState [main] - t6 state BLOCKED</span><br></pre></td></tr></table></figure><h3 id="统筹（烧水泡茶）"><a href="#统筹（烧水泡茶）" class="headerlink" title="统筹（烧水泡茶）"></a>统筹（烧水泡茶）</h3><p>其实就是个多线程的问题，开四个线程太浪费了所以就开两个线程实现即可。</p><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20230904231936646.png" alt="烧水泡茶"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;洗茶壶&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;烧开水&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">15</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;洗茶壶,洗茶杯,拿茶叶&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">                    t1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此种解法的缺陷</p><ul><li>上面模拟的是Lucy等Kyle的水烧开了，Lucy泡茶，如果现在要让Kyle等Lucy把茶叶拿过来，由Kyle泡茶呢？</li><li>上面两个线程其实是各执行各的，如果要模拟Kyle把水壶交给Lucy泡茶，或者模拟Lucy把茶叶交给Kyle泡茶呢？</li></ul><p>这个缺陷后面会解决</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>本章的重点在于掌握 </p><ul><li><p>线程创建 </p></li><li><p>线程重要 api，如 start，run，sleep，join，interrupt 等 </p></li><li><p>线程状态 </p></li><li><p>应用方面 </p><ul><li>异步调用：主线程执行期间，其它线程异步执行耗时操作 </li><li>提高效率：并行计算，缩短运算时间 </li><li>同步等待：join </li><li>统筹规划：合理使用线程，得到最优效果</li></ul></li><li><p>原理方面 </p><ul><li>线程运行流程：栈、栈帧、上下文切换、程序计数器 </li><li>Thread 两种创建方式的源码</li></ul></li><li><p>模式方面 </p><ul><li>终止模式之两阶段终止</li></ul></li></ul><h1 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h1><h2 id="共享带来的问题"><a href="#共享带来的问题" class="headerlink" title="共享带来的问题"></a>共享带来的问题</h2><p>在下面这段代码中，运行得到的结果并不是0，这就是线程共享所带来的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_JUC</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized解决方案"><a href="#synchronized解决方案" class="headerlink" title="synchronized解决方案"></a>synchronized解决方案</h2><h2 id="方法上的synchronized"><a href="#方法上的synchronized" class="headerlink" title="方法上的synchronized"></a>方法上的synchronized</h2><h2 id="变量的线程安全分析"><a href="#变量的线程安全分析" class="headerlink" title="变量的线程安全分析"></a>变量的线程安全分析</h2><h2 id="Monitor概念"><a href="#Monitor概念" class="headerlink" title="Monitor概念"></a>Monitor概念</h2><h2 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait notify"></a>wait notify</h2><h2 id="Park-Unpark"><a href="#Park-Unpark" class="headerlink" title="Park &amp; Unpark"></a>Park &amp; Unpark</h2><h2 id="重新理解线程状态转换"><a href="#重新理解线程状态转换" class="headerlink" title="重新理解线程状态转换"></a>重新理解线程状态转换</h2><h2 id="多把锁"><a href="#多把锁" class="headerlink" title="多把锁"></a>多把锁</h2><h2 id="活跃性"><a href="#活跃性" class="headerlink" title="活跃性"></a>活跃性</h2><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p><img src="/../assets/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20231222155004346.png" alt="image-20231222155004346"></p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2023/08/27/Study-JVM/"/>
      <url>/2023/08/27/Study-JVM/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>🚗本篇文章参考自以下学习资料：</p><p><a href="https://cyborg2077.github.io/">Kyle’s Blog</a></p><p><a href="https://javaguide.cn/">JavaGuide</a></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ol><li>JVM，JRE，JDK之间的区别</li></ol><ul><li><code>JVM</code>（Java Virtual Machine），Java虚拟机</li><li><code>JRE</code>（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</li><li><code>JDK</code>（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</li></ul><p><img src="/../assets/JVM/image-20230827213038167.png" alt="image-20230827213038167"></p><hr><ol start="2"><li>学习路线</li></ol><p><img src="/../assets/JVM/image-20230827212904317.png" alt="image-20230827212904317"></p><h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><p>文章参考自：<a href="https://cyborg2077.github.io/2023/03/27/JvmPart2/">https://cyborg2077.github.io/2023/03/27/JvmPart2/</a></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器的作用就是<strong>记住下一条jvm指令的执行地址</strong></p><ul><li><p>线程私有：每个线程都有独立的程序计数器，用于保存当前执行指令的地址 ，一旦指令执行，程序计数器将被下一条指令更新</p></li><li><p>不会存在内存溢出</p></li></ul><p><img src="/../assets/JVM/image-20230828100657668.png" alt="image-20230828100657668"></p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li><p>虚拟机栈：<strong>线程</strong>运行需要的内存空间</p></li><li><p>栈帧：每个<strong>方法</strong>运行时需要的内存</p></li></ol><blockquote><p>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</p><p>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</p></blockquote><p><img src="/../assets/JVM/image-20230828101229662.png" alt="image-20230828101229662"></p><hr><blockquote><p>例：方法一调用方法二，方法二调用方法三，方法三结束才能让方法二和方法一依次返回</p></blockquote><p><img src="/../assets/JVM/image-20230828101315797.png" alt="image-20230828101315797"></p><hr><ol><li>垃圾回收是否涉及栈内存？</li></ol><blockquote><p>不涉及，栈中的栈帧在调用完后会自动弹出栈，垃圾回收只用于堆。</p></blockquote><ol start="2"><li>栈内存分配越大越好吗？</li></ol><blockquote><p>不是越大越好，一般来说使用系统默认的就好，因为物理内存是一定的，栈内存分配多了反而线程数就少了，并发量也下降了，只是每个栈中能进行方法间的调用多了而已。</p></blockquote><ol start="3"><li>方法内的局部变量是否线程安全？</li></ol><blockquote><p>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</p><p>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的三个线程互不影响，x不受影响每个都是5000</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">4</span>);</span><br><span class="line">        sb.append(<span class="number">5</span>);</span><br><span class="line">        sb.append(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            m2(sb);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的m2和m3就是所谓的逃离方法的作用范围，因为其他线程都有可能通过方法参数或者返回值去得到方法内的局部变量，就要考虑线程安全问题了</p></blockquote><h3 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h3><p>简单总结一下程序运行中栈可能会出现两种错误：</p><ul><li><strong><code>StackOverFlowError</code>：</strong> 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 <code>StackOverFlowError</code> 错误。</li><li><strong><code>OutOfMemoryError</code>：</strong> 如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code>异常。</li></ul><ol><li>栈帧过多导致栈内存溢出</li></ol><p><img src="/../assets/JVM/image-20230828104644939.png" alt="image-20230828104644939"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出现StackOverFlowError的错误</p></blockquote><ol start="2"><li>栈帧过大导致栈内存溢出</li></ol><p><img src="/../assets/JVM/image-20230828104711119.png" alt="image-20230828104711119"></p><hr><p>下面这个例子中，Emp中引入了Dept，而Dept中又引入了Emp，他们现在在循环引用，导致json解析时会出现StackOverFlow</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>();</span><br><span class="line">        d.setName(<span class="string">&quot;Market&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        e1.setName(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        e1.setDept(d);</span><br><span class="line"></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        e2.setName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        e2.setDept(d);</span><br><span class="line"></span><br><span class="line">        d.setEmps(Arrays.asList(e1, e2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#123; name: &#x27;Market&#x27;, emps: [&#123; name:&#x27;zhang&#x27;, dept:&#123; name:&#x27;&#x27;, emps: [ &#123;&#125;]&#125; &#125;,] &#125;</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        System.out.println(mapper.writeValueAsString(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getDept</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">getEmps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmps</span><span class="params">(List&lt;Emp&gt; emps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程运行诊断⭐⭐⭐⭐⭐⭐⭐"><a href="#线程运行诊断⭐⭐⭐⭐⭐⭐⭐" class="headerlink" title="线程运行诊断⭐⭐⭐⭐⭐⭐⭐"></a>线程运行诊断⭐⭐⭐⭐⭐⭐⭐</h3><p>案例1： cpu 占用过多 </p><ol><li><p>定位 用top定位哪个进程对cpu的占用过高 </p></li><li><p>ps H -eo pid,tid,%cpu | grep 进程id （用ps命令进一步定位是哪个线程引起的cpu占用过高） </p></li><li><p>jstack 进程id 可以根据线程id 找到有问题的线程，进一步定位到问题代码的源码行号</p></li></ol><p>案例2：程序运行很长时间没有结果（死锁）</p><blockquote><p>查错能力，补充top命令到Linux中……⭐⭐⭐⭐⭐⭐⭐⭐</p></blockquote><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><blockquote><p><strong>一个栈帧中存放的有局部变量表和操作数栈</strong></p></blockquote><p><strong>局部变量表</strong>（Local Variable Table）是Java虚拟机（JVM）中的一个数据结构，<strong>用于存储方法在执行过程中所使用的局部变量</strong>。每个方法在运行时都会创建一个局部变量表，用于存储该方法内部定义的局部变量，这些局部变量通常包括方法参数以及在方法内部声明的临时变量。</p><p>以下是局部变量表的主要特点和作用：</p><ol><li><p>存储局部变量：局部变量表用于存储方法内部定义的局部变量，这些变量的生命周期仅限于方法的执行过程中。局部变量通常包括方法参数、临时变量和方法内部的其他局部变量。</p></li><li><p>助于方法执行：局部变量表中的局部变量存储了方法的输入和中间计算结果，这些值被用于方法的执行过程中。例如，在一个方法中，你可以声明一个局部变量来存储一个整数值，然后在方法中进行计算和操作。</p></li><li><p>类型检查：局部变量表会根据变量的声明类型进行类型检查，确保在方法中正确使用这些变量。这有助于Java编译器捕获类型错误。</p></li><li><p>提供方法调用信息：局部变量表还包含了方法调用时所需的信息，如方法的参数和返回值。这些信息有助于调用方法和返回结果。</p></li><li><p>运行时内存分配：局部变量表中的局部变量在方法的运行时被分配内存空间，以便存储数据。这些变量在方法执行结束后会被销毁，释放内存。</p></li></ol><p>总之，局部变量表是Java虚拟机中用于存储方法内部局部变量的数据结构，它在方法的执行过程中起到重要作用，包括存储数据、进行类型检查、提供方法调用信息等。局部变量表的大小和内容是由编译器在编译时确定的，并在方法的执行过程中被动态使用。</p><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><p><strong>操作数栈</strong> 主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</p><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h4><p><strong>动态链接</strong> 主要服务一个方法需要调用其他方法的场景。Class 文件的常量池里保存有大量的符号引用比如方法引用的符号引用。当一个方法要调用其他方法，需要将常量池中指向方法的符号引用转化为其在内存地址中的直接引用。<strong>动态链接的作用就是为了将符号引用转换为调用方法的直接引用</strong>，这个过程也被称为 <strong>动态连接</strong> 。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><ul><li>本地方法是指由非Java语言编写的代码，如C或C++，并被编译为本地二进制代码。</li><li>本地方法栈就是本地方法的内存空间。</li></ul><p>因为<code>JAVA</code>没法直接和操作系统底层交互，所以需要用到本地方法栈来调用本地的C或C++的方法</p><ul><li>例如Object类的源码中就有本地方法，用<code>native</code>关键字修饰本地方法（例如notifyAll等）<ul><li>本地方法只有函数声明，没有函数体，因为函数体是C或C++写的，通常是通过JNI（Java Native Interface）技术来实现的。</li></ul></li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li><p>Heap 堆</p><ul><li>通过 new 关键字，创建对象都会使用堆内存</li></ul></li><li><p>特点 </p><ul><li>它是线程共享的，堆中对象都需要考虑线程安全的问题 </li><li>有垃圾回收机制</li></ul></li></ul><h3 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h3><blockquote><p>错误：java.lang.OutOfMemoryError：Java heap space</p></blockquote><p>垃圾回收会回收不用的对象，但是一直使用的就不会回收，所以还是会有堆内存溢出的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示堆内存溢出：java.lang.OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//Hello, HelloHello, HelloHelloHelloHello ···</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                list.add(a);</span><br><span class="line">                a = a + a;  <span class="comment">// HelloHelloHelloHello</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h3><ol><li><p>jps工具</p><ul><li>查看当前系统中有哪些Java进程</li></ul></li><li><p>jmap工具</p><ul><li><p>查看堆内存占用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap 进程<span class="built_in">id</span> <span class="comment"># 进程id就是jps查出来的进程</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>jconsole工具</p><ul><li>图形化界面的多功能监测工具，可以连续监测</li></ul></li><li><p>jvisualvm工具</p></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote><p>在堆内存的定义下，新生代和老年代是什么意思？</p></blockquote><p>在Java等编程语言中，堆内存（Heap Memory）是用于存储对象实例的一块内存区域。在堆内存中，对象实例被动态地分配和回收，这使得堆内存成为垃圾回收的主要场所。</p><p>在堆内存中，一般会根据对象的生命周期将其分为不同的区域，其中最常见的划分是“新生代”（Young Generation）和“老年代”（Old Generation），这有助于进行更有效的垃圾回收。以下是它们的解释：</p><ol><li><p>新生代（Young Generation）：<br>新生代是堆内存的一部分，用于存储新创建的对象。由于大部分对象在创建后很快就变得不再使用，因此将它们放在新生代中。新生代又分为三个区域：Eden区域和两个Survivor区域（通常称为From区和To区）。</p><ul><li>Eden区域：这是对象最初被创建的地方。当Eden区域满了之后，将触发一次“Minor GC”（新生代垃圾回收），这时会把仍然存活的对象移到Survivor区域。</li><li>Survivor区域：这两个区域用来存放在Eden区域中存活下来的对象。在Minor GC后，存活的对象会从Eden区域移动到一个Survivor区域。在不断的Minor GC中，对象可能会在不同的Survivor区域之间来回移动，最终达到一定的年龄后，会被移动到老年代。</li></ul></li><li><p>老年代（Old Generation）：<br>老年代用于存储长时间存活的对象，这些对象经过一定数量的Minor GC后仍然存活下来。老年代中的垃圾回收通常被称为“Major GC”或“Full GC”（全堆垃圾回收），因为它涉及整个堆内存的清理。Major GC发生的频率相对较低，因为老年代中的对象生命周期较长，所以它们不会频繁地触发垃圾回收。</p></li></ol><p>通过将堆内存划分为新生代和老年代，可以针对不同生命周期的对象采用不同的垃圾回收策略，以提高系统性能和内存利用率。这种划分能够减少垃圾回收对整个应用程序性能的影响，使得垃圾回收变得更加高效。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ol><li><p>在JVM中，方法区是一块用于存储类信息、常量、静态变量、即时编译器编译后的代码（<code>ClassLoader</code>）等数据的内存区域，它是Java虚拟机规范中的一个概念。<code>Java SE 7</code>及之前版本中，方法区的实现被称为<code>永久代</code>，但在<code>Java SE 8</code>之后的版本中，<code>永久代</code>被废弃了，被<code>元空间</code>所替代。</p></li><li><p>与永久代不同的是，元空间使用的是<code>本地内存（Native Memory）</code>，而不是<code>虚拟机内存（堆内存）</code>，这样就避免了OutOfMemoryError错误，因为在使用本地内存时，可以动态地调整大小，而且可以使用操作系统的虚拟内存机制，使得Java应用程序不会被限制在固定的内存大小中。</p></li></ol><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><img src="/../assets/JVM/image-20230919155327596.png" alt="1.6以前"></p><hr><p><img src="/../assets/JVM/image-20230919155353326.png" alt="1.8以后"></p><h3 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h3><ol><li>永久代内存溢出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: PermGen space</span><br></pre></td></tr></table></figure><ol start="2"><li>元空间内存溢出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: Metaspace</span><br></pre></td></tr></table></figure><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>常量池就是一行表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><ul><li>常量池是 *.class 文件中的<code>Constant pool</code>中的内容，存在二进制字节码文件中</li><li>而运行时常量池是当该类被加载时，将常量池信息放入运行时常量池，并把里面的符号地址(#2、#3)变为内存地址</li></ul><blockquote><p>符号引用(Symbolic References):符号引用以一组符号来描述所引用的目标，符号可以是任何<br>形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引<br>用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，<br>但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规<br>范》的Class文件格式中。</p><p>·直接引用(Direct References)直接引用是可以直接指向目标的指针、相对偏移量或者是一个能<br>间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚<br>拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机<br>的内存中存在。</p></blockquote><h3 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h3><p><strong>JDK 1.7 为什么要将字符串常量池移动到堆中？</strong></p><p>主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。</p><p>StringTable类似于是一个HashTable</p><p>在下面这段Demo_08代码中，进行编译后的类的信息在常量池中，当该类被加载时，信息就被加载到了运行时常量池，此时的<code>a</code>，<code>b</code>，<code>ab</code>都没变为Java的字符串对象，当运行到该语句时才会转换。</p><p>而对于第7行代码而言，实质上是做了下面的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(<span class="string">&quot;a&quot;</span>).append(<span class="string">&quot;b&quot;</span>).toSting()</span><br></pre></td></tr></table></figure><p>而在<code>StringBuilder</code>中的<code>toString</code>方法中是创建了一个新的字符串对象，所以，s3是在常量池中的，而s4是在堆中的，所以这里打印为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编译期优化"><a href="#编译期优化" class="headerlink" title="编译期优化"></a>编译期优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码与最初的代码相比，就是用常量代替了变量去拼接，在编译期间，jvm认为常量不会再变化，所以在编译时就完成了拼接，这里的拼接是在StringTable串池中去寻找，找到了<code>ab</code>的字符串，就不会重新创建一个<code>ab</code>字符串了，所以第5行和第6行在底层存入的都是串池中的<code>ab</code>对象，故这里会打印True</p><h4 id="字符串延迟加载"><a href="#字符串延迟加载" class="headerlink" title="字符串延迟加载"></a>字符串延迟加载</h4><p>常量池中的字符串仅是符号，第一次用到时才变为对象</p><h4 id="intern方法"><a href="#intern方法" class="headerlink" title="intern方法"></a>intern方法</h4><p>可以使用intern方法，主动将串池中还没有的字符串对象放入串池</p><p>1.8中，将这个字符串对象尝试放入串池</p><ul><li>如果串池中已有，则不会放入</li><li>如果串池中没有，则放入串池，并将串池中的结果返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;            <span class="comment">// 常量池：[&quot;a&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;            <span class="comment">// 常量池：[&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;      <span class="comment">// 常量池：[&quot;a&quot;, &quot;b&quot;, &quot;ab&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + s2;        <span class="comment">// 堆：new String(&quot;ab&quot;)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;           <span class="comment">// s5引用常量池中已有的对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s4.intern();    <span class="comment">// 常量池中已有&quot;ab&quot;，将常量池中的&quot;ab&quot;的引用返回，s6引用常量池中已有的对象</span></span><br><span class="line"></span><br><span class="line">        System.out.println(s3 == s4);   <span class="comment">// s3在常量池，s4在堆，false</span></span><br><span class="line">        System.out.println(s3 == s5);   <span class="comment">// s3在常量池，s5在常量池，true</span></span><br><span class="line">        System.out.println(s3 == s6);   <span class="comment">// s3在常量池，s6在常量池，true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;cd&quot;</span>;     <span class="comment">// 常量池：[&quot;cd&quot;]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;c&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;d&quot;</span>);    <span class="comment">// 堆：new String(&quot;cd&quot;)</span></span><br><span class="line">        str2.intern();  <span class="comment">// 常量池中已有&quot;cd&quot;，放入失败</span></span><br><span class="line">        System.out.println(str1 == str2);   <span class="comment">// str1在常量池，str2在堆，false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;e&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;f&quot;</span>);    <span class="comment">// 堆：new String(&quot;ef&quot;)</span></span><br><span class="line">        str4.intern();          <span class="comment">// 常量池中没有&quot;ef&quot;，放入成功，并返回常量池&quot;ef&quot;的引用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ef&quot;</span>;     <span class="comment">// 常量池：[&quot;ef&quot;]</span></span><br><span class="line">        System.out.println(str3 == str4);   <span class="comment">// str4是常量池的引用，str3也是常量池的引用，true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>1.6 中 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有会把此对象复制一份，<br>放入串池，会把串池中的对象返回</p><blockquote><p>也就是调用intern方法的对象并不是存入串池中的对象，而是复制出来的一个新的对象</p><p>例如s.intern()，在1.8中如果串池中没有该元素则放入，此时s也变成常量池中的对象，而在1.6中，s还是堆对象</p></blockquote><h4 id="StringTable-位置"><a href="#StringTable-位置" class="headerlink" title="StringTable 位置"></a>StringTable 位置</h4><p>在 <code>JDK 1.6</code> 中，字符串常量池（也就是 StringTable）是位于<code>永久代</code>中的。而在 <code>JDK 1.8</code> 中，永久代已经被移除，取而代之的是元空间（Metaspace），而字符串常量池也随之移动到了<code>堆</code>中。这意味着在 JDK 1.8 中，字符串常量池中的字符串也可以被垃圾回收器回收，而在 JDK 1.6 中则不行。</p><blockquote><p>原因：因为字符串是很常用的，如果在永久代中保存是要等到老年代的时候才会去回收，不符合常用的特性。</p><ul><li>字符串常量池的大小是有限的，如果大量字符串被创建，永久代可能会出现内存溢出。</li><li>字符串常量池中的字符串对象难以被垃圾回收，即使它们不再被引用，也不会被回收，容易导致永久代的内存泄漏。</li></ul></blockquote><h4 id="StringTable垃圾回收"><a href="#StringTable垃圾回收" class="headerlink" title="StringTable垃圾回收"></a>StringTable垃圾回收</h4><p>在 Java 8 及更高版本中，字符串常量池位于堆中，而堆是 JVM 中的一部分，因此字符串常量池中的字符串可以被垃圾回收器回收。具体来说，只有当字符串没有被任何对象引用时，它才能被垃圾回收。当字符串被回收时，它的存储空间将被释放并可以被重新利用。</p><h4 id="StringTable-性能调优"><a href="#StringTable-性能调优" class="headerlink" title="StringTable 性能调优"></a>StringTable 性能调优</h4><ol><li>调整 -XX:StringTableSize&#x3D;桶个数</li></ol><blockquote><p>Stringtable类似于hashtable，这里的桶的个数指的就是存放链表的数组的个数，适当增大能有效避免哈希碰撞，能极大地提高效率</p></blockquote><ol start="2"><li>考虑将字符串对象是否入池</li></ol><blockquote><p>重复的字符串过多时考虑入池</p></blockquote><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ul><li>常见于 NIO 操作时，用于数据缓冲区 </li><li>分配回收成本较高，但读写性能高 </li><li>不受 JVM 内存回收管理</li><li>直接内存也会导致内存溢出</li></ul><p>传统IO，将文件读取到系统缓冲区中，但是Java代码不能直接读取系统缓冲区，所以需要在堆内存中分配一块Java缓冲区，将数据从系统缓冲区读取到Java缓冲区后，才能进行写操作</p><p><img src="/../assets/JVM/image-20230919223640091.png" alt="image-20230919223640091"></p><p>直接内存的Direct Memory对Java堆内存和系统内存是共享的一块内存区，那么磁盘文件就可以直接读取到Direct Memory，而Java堆内存也可以直接访问Direct Memory</p><p><img src="/../assets/JVM/image-20230919223613085.png" alt="image-20230919223613085"></p><blockquote><p>减少了不必要的数据复制，从而提高了效率</p></blockquote><h3 id="分配和回收原理"><a href="#分配和回收原理" class="headerlink" title="分配和回收原理"></a>分配和回收原理</h3><p>对于直接内存需要使用<code>Unsafe</code>对象完成直接内存的分配回收，并且回收需要主动调用<code>freeMemory</code>方法</p><p>回收方法<code>freeMemory</code></p><ul><li>其实释放的方法是在Deallocator()这个回调方法中</li><li>而它是由Cleaner调用的， Cleaner（虚引用类型）是用来监测<code>ByteBuffer</code>对象的，一旦<code>ByteBuffer</code>对象被垃圾<code>回收</code>，那么就会由<code>ReferenceHandler</code>线程通过<code>Cleaner</code>的<code>clean</code>方法调用<code>freeMemory</code>来释放直接内存</li><li><strong>ByteBuﬀer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuﬀer 对象，一旦 ByteBuﬀer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调 用 freeMemory 来释放直接内存</strong></li></ul><h3 id="禁用垃圾回收对直接内存的影响"><a href="#禁用垃圾回收对直接内存的影响" class="headerlink" title="禁用垃圾回收对直接内存的影响"></a>禁用垃圾回收对直接内存的影响</h3><ul><li>由于垃圾回收是一个相对昂贵的操作，需要消耗CPU时间和系统资源。频繁调用System.gc()可能会导致性能下降，并且在某些情况下可能会造成应用程序的不稳定性。</li><li>所以为了避免有些程序员老是手动调用垃圾回收，我们一般会进制显式手动垃圾回收，添加VM参数<code>-XX:+DisableExplicitGC</code>禁用显式的垃圾回收</li></ul><h2 id="🌈补充：对象"><a href="#🌈补充：对象" class="headerlink" title="🌈补充：对象"></a>🌈补充：对象</h2><h3 id="Java-对象的创建过程"><a href="#Java-对象的创建过程" class="headerlink" title="Java 对象的创建过程"></a>Java 对象的创建过程</h3><p>文章取自<a href="https://javaguide.cn/java/jvm/memory-area.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA">JavaGuide</a></p><h4 id="Step1-类加载检查"><a href="#Step1-类加载检查" class="headerlink" title="Step1:类加载检查"></a>Step1:类加载检查</h4><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><h4 id="Step2-分配内存"><a href="#Step2-分配内存" class="headerlink" title="Step2:分配内存"></a>Step2:分配内存</h4><p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p><p><strong>内存分配的两种方式</strong> （补充内容，需要掌握）：</p><ul><li>指针碰撞： <ul><li>适用场合：堆内存规整（即没有内存碎片）的情况下。</li><li>原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。</li><li>使用该分配方式的 GC 收集器：Serial, ParNew</li></ul></li><li>空闲列表： <ul><li>适用场合：堆内存不规整的情况下。</li><li>原理：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。</li><li>使用该分配方式的 GC 收集器：CMS</li></ul></li></ul><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的。</p><h4 id="Step3-初始化零值"><a href="#Step3-初始化零值" class="headerlink" title="Step3:初始化零值"></a>Step3:初始化零值</h4><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h4 id="Step4-设置对象头"><a href="#Step4-设置对象头" class="headerlink" title="Step4:设置对象头"></a>Step4:设置对象头</h4><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong></p><h4 id="Step5-执行-init-方法"><a href="#Step5-执行-init-方法" class="headerlink" title="Step5:执行 init 方法"></a>Step5:执行 init 方法</h4><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><h3 id="对象的访问定位的两种方式"><a href="#对象的访问定位的两种方式" class="headerlink" title="对象的访问定位的两种方式"></a>对象的访问定位的两种方式</h3><p>文章取自<a href="https://javaguide.cn/java/jvm/memory-area.html#%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D">JavaGuide</a></p><p>建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有：<strong>使用句柄</strong>、<strong>直接指针</strong>。</p><h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与对象类型数据各自的具体地址信息。</p><p><img src="/../assets/JVM/image-20231023095835562.png" alt="image-20231023095835562"></p><h4 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h4><p>如果使用直接指针访问，reference 中存储的直接就是对象的地址。</p><p><img src="/../assets/JVM/image-20231023095911060.png" alt="image-20231023095911060"></p><p>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</p><p>HotSpot 虚拟机主要使用的就是这种方式来进行对象访问。</p><h1 id="垃圾回收✏️"><a href="#垃圾回收✏️" class="headerlink" title="垃圾回收✏️"></a>垃圾回收✏️</h1><p>文章参考自：<a href="https://cyborg2077.github.io/2023/04/01/JvmPart3/">https://cyborg2077.github.io/2023/04/01/JvmPart3/</a></p><ul><li><p><strong>内存泄露</strong>：申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机分配给别人用。</p></li><li><p><strong>内存溢出</strong>：申请的内存超出了JVM能提供的内存大小，此时称之为溢出。</p></li></ul><h2 id="如何判断一个常量是废弃常量"><a href="#如何判断一个常量是废弃常量" class="headerlink" title="如何判断一个常量是废弃常量"></a>如何判断一个常量是废弃常量</h2><p>假如在字符串常量池中存在字符串 “abc”，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池了。</p><h2 id="如何判断一个类是无用的类"><a href="#如何判断一个类是无用的类" class="headerlink" title="如何判断一个类是无用的类"></a>如何判断一个类是无用的类</h2><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p><p>判定一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多。类需要同时满足下面 3 个条件才能算是 <strong>“无用的类”</strong>：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h2 id="如何判断对象可以回收"><a href="#如何判断对象可以回收" class="headerlink" title="如何判断对象可以回收"></a>如何判断对象可以回收</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>当一个对象被引用是，就当引用对象的值<code>+1</code>，当引用对象的值为<code>0</code>时，则说明该对象没有被引用，那么就可以被垃圾回收器回收</p><p>这个引用计数法听起来很不错，而且实现起来也非常的简单，可是它有一个弊端，如下图所示，当两个对象循环引用时，两个对象的计数都未1，就导致这两个对象都无法被释放</p><p><img src="/../assets/JVM/image-20230920103843316.png" alt="引用计数法弊端"></p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>文章参考自：<a href="https://blog.csdn.net/qq_32099833/article/details/109253339">https://blog.csdn.net/qq_32099833/article/details/109253339</a></p><ul><li>JVM垃圾回收机制的可达性分析算法，是一种基于引用的垃圾回收算法。其基本思想是通过一系列被称为”GC Roots”的根对象作为起点，寻找所有被根对象直接或间接引用的对象，将这些对象称为”可达对象”，而没有被找到的对象则被视为”不可达对象”，需要被回收。</li></ul><p><img src="/../assets/JVM/image-20230920114845138.png" alt="image-20230920114845138"></p><ul><li><p>可达性分析算法的主要优点是可以处理复杂的引用结构，例如循环引用、交叉引用等情况，能够识别出所有可达对象，从而准确地进行垃圾回收。但是，它也有一些缺点，例如需要耗费较多的时间进行垃圾回收、可能会出现漏标和误标等问题。为了解决这些问题，JVM中还采用了其他的垃圾回收算法，如标记-清除算法、复制算法、标记-整理算法等，以提高垃圾回收的效率和准确性。</p></li><li><p>在JVM中，有几种类型的GC Roots对象：</p><ol><li><code>虚拟机栈中引用的对象</code>：虚拟机栈是用于存储方法调用和执行的栈空间。当一个方法被调用时，会在栈中创建一个栈帧，用于存储该方法的局部变量、参数和返回值等信息。如果栈帧中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>方法区中类静态属性引用的对象</code>：方法区是用于存储类信息、常量池、静态变量等信息的内存区域。当一个类被加载到方法区时，其中的静态属性会被分配在方法区中，如果这些静态属性中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>方法区中常量引用的对象</code>：常量池是方法区的一部分，用于存储常量。如果常量池中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>本地方法栈中JNI引用的对象</code>：JNI是Java Native Interface的缩写，用于在Java程序中调用本地方法（即由C或C++等语言编写的方法）。当本地方法被调用时，会在本地方法栈中创建一个栈帧，如果该栈帧中包含对某个对象的引用，那么这个对象就被视为GC Roots对象。</li><li><code>被同步锁持有的对象</code>：被synchronized锁住的对象也是绝对不能回收的，当前有线程持有对象锁呢，GC如果回收了对象，锁不就失效了嘛。</li></ol></li></ul><h3 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h3><p>参考文章自：<a href="https://blog.csdn.net/l540675759/article/details/73733763">https://blog.csdn.net/l540675759/article/details/73733763</a></p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>上述Object这类对象就具有强引用，属于不可回收的资源，垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠回收具有强引用的对象，来解决内存不足的问题。</p><p>值得注意的是：如果想中断或者回收强引用对象，可以显式地将引用赋值为null，这样的话JVM就会在合适的时间，进行垃圾回收。</p><h4 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h4><p>如果一个对象只具有软引用，那么它的性质属于可有可无的那种。如果此时内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><p>软引用可以和引用队列一起使用。</p><p>当不再有强引用引用该对象，此时只有软引用引用该对象时，该对象会在内存不足且垃圾回收的情况下被回收。</p><p><img src="/../assets/JVM/image-20230920121439505.png" alt="image-20230920121439505"></p><p>而软引用本身也是个被强引用所引用的对象</p><p><img src="/../assets/JVM/image-20230920121310033.png" alt="image-20230920121310033"></p><hr><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示软引用</span></span><br><span class="line"><span class="comment"> * -Xmx20m -XX:+PrintGCDetails -verbose:gc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_18</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">_4MB</span> <span class="operator">=</span> <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/*        List&lt;byte[]&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 15; i++) &#123;</span></span><br><span class="line"><span class="comment">            list.add(new byte[_4MB]);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        soft();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">soft</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SoftReference&lt;<span class="type">byte</span>[]&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            SoftReference&lt;<span class="type">byte</span>[]&gt; ref = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">byte</span>[_4MB]);</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">            list.add(ref);</span><br><span class="line">            System.out.println(list.size());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;循环结束：&quot;</span> + list.size());</span><br><span class="line">        <span class="keyword">for</span> (SoftReference&lt;<span class="type">byte</span>[]&gt; ref : list) &#123;</span><br><span class="line">            System.out.println(ref.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="弱引用-WeakReference"><a href="#弱引用-WeakReference" class="headerlink" title="弱引用(WeakReference)"></a>弱引用(WeakReference)</h4><p>如果一个对象具有弱引用，那其的性质也是可有可无的状态。</p><p>而弱引用和软引用的区别在于：弱引用的对象拥有更短的生命周期，只要垃圾回收器扫描到它，不管内存空间充足与否，都会回收它的内存。</p><p>弱引用也可以和引用队列一起使用。</p><h4 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h4><p>虚引用和前面的软引用、弱引用不同，它并不影响对象的生命周期。如果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。</p><p>注意：虚引用必须和引用队列关联使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会把这个虚引用加入到与之关联的引用队列中。</p><p>程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p><h4 id="引用总结"><a href="#引用总结" class="headerlink" title="引用总结"></a>引用总结</h4><p><img src="/../assets/JVM/image-20230920113244283.png" alt="image-20230920113244283"></p><hr><p><img src="/../assets/JVM/image-20230920114442159.png" alt="image-20230920114442159"></p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除（Mark-Sweep）"><a href="#标记清除（Mark-Sweep）" class="headerlink" title="标记清除（Mark Sweep）"></a>标记清除（Mark Sweep）</h3><ul><li>速度较快</li><li>会产生内存碎片</li></ul><p><img src="/../assets/JVM/image-20230920205051128.png" alt="标记清除"></p><h3 id="标记整理（Mark-Compact）"><a href="#标记整理（Mark-Compact）" class="headerlink" title="标记整理（Mark Compact）"></a>标记整理（Mark Compact）</h3><ul><li>速度慢</li><li>没有内存碎片</li></ul><p><img src="/../assets/JVM/image-20230920205412941.png" alt="标记整理"></p><h3 id="复制（Copy）"><a href="#复制（Copy）" class="headerlink" title="复制（Copy）"></a>复制（Copy）</h3><ul><li>没有内存碎片</li><li>需要占用双倍内存空间</li></ul><p><img src="/../assets/JVM/image-20230920205522420.png" alt="复制"></p><h2 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h2><p><img src="/../assets/JVM/image-20230920205716241.png" alt="分代垃圾回收"></p><ul><li>对象首先分配在伊甸园区域</li><li>新生代空间不足时，触发 minor gc，伊甸园和 from 存活的对象使用 copy 复制到 to 中，存活的对象年龄加 1并且交换 from to</li><li>minor gc 会引发 stop the world，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行 </li><li>当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（4bit）</li><li>当老年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW（ stop the world）的时间更长</li></ul><h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><ul><li><p>当一次申请的内存大过伊甸园，大过幸存区时，且老年代有足够内存空间时，可以直接放入老年代</p></li><li><p>一个线程内出现了内存溢出时不会影响别的进程的执行</p></li></ul><h2 id="GC分类"><a href="#GC分类" class="headerlink" title="GC分类"></a>GC分类</h2><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><p>文章参考自：<a href="https://cloud.tencent.com/developer/article/1592943">https://cloud.tencent.com/developer/article/1592943</a></p><p>如果两个收集器之间存在连线，就说明它们可以搭配使用。</p><p><img src="/../assets/JVM/image-20230925224500405.png" alt="image-20230925224500405"></p><h3 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h3><h4 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h4><ul><li>单线程，简单高效</li><li>堆内存较小，适合个人电脑</li><li>在大型应用程序中可能会出现停顿时间过长的问题</li></ul><hr><p>Serial新生代：复制                       SerialOld老年代：标记整理</p><p><img src="/../assets/JVM/image-20230921214603737.png" alt="image-20230921214603737"></p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><p>ParNew收集器就是Serial收集器的多线程版本，它也是一个新生代收集器。除了使用多线程进行垃圾收集外，其余行为包括Serial收集器可用的所有控制参数、收集算法（复制算法）、Stop The World、对象分配规则、回收策略等与Serial收集器完全相同，两者共用了相当多的代码。</p><p>ParNew收集器的工作过程如下图（老年代采用Serial Old收集器）：</p><p><img src="/../assets/JVM/image-20230925224749631.png" alt="image-20230925224749631"></p><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h4><ul><li>多线程</li><li>堆内存较大，多核 cpu</li><li>让单位时间内，STW 的时间最短 0.2 0.2 &#x3D; 0.4，垃圾回收时间占比最低，这样就称吞吐量高</li></ul><ul><li>JDK 1.8 默认采用的就是这种垃圾回收器</li><li>不设置参数时，垃圾回收线程数默认就是cpu的个数</li></ul><p>Parallel Scavenge收集器也是一个并行的多线程新生代收集器，它也使用复制算法。Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标是达到一个可控制的吞吐量（Throughput）。</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><p><img src="/../assets/JVM/image-20230921215041545.png" alt="image-20230921215041545"></p><h3 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h3><h4 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4><p>Serial Old 是 Serial收集器的老年代版本，它同样是一个单线程收集器，使用“标记-整理”（Mark-Compact）算法。</p><p>此收集器的主要意义也是在于给Client模式下的虚拟机使用。如果在Server模式下，它还有两大用途：</p><ul><li>在JDK1.5 以及之前版本（Parallel Old诞生以前）中与Parallel Scavenge收集器搭配使用。</li><li>作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li></ul><blockquote><p>它的工作流程与Serial收集器相同</p></blockquote><h4 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h4><p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p><hr><p>Parallel新生代：复制            ParallelOld老年代：标记整理</p><p><img src="/../assets/JVM/image-20230921215041545.png" alt="image-20230921215041545"></p><h4 id="响应时间优先（CMS-–-Concurrent-Mark-Sweep）⭐⭐⭐"><a href="#响应时间优先（CMS-–-Concurrent-Mark-Sweep）⭐⭐⭐" class="headerlink" title="响应时间优先（CMS –&gt; Concurrent Mark Sweep）⭐⭐⭐"></a>响应时间优先（CMS –&gt; Concurrent Mark Sweep）⭐⭐⭐</h4><ul><li>多线程</li><li>堆内存较大，多核 cpu</li><li>尽可能让单次 STW 的时间最短   0.1 0.1 0.1 0.1 0.1 &#x3D; 0.5</li></ul><hr><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器，它非常符合那些集中在互联网站或者B&#x2F;S系统的服务端上的Java应用，这些应用都非常重视服务的响应速度。从名字上（“Mark Sweep”）就可以看出它是基于“标记-清除”算法实现的。</p><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><p>CMS收集器工作的整个流程分为以下4个步骤：</p><ul><li>初始标记（CMS initial mark）：仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li><li>并发标记（CMS concurrent mark）：进行GC Roots Tracing的过程，在整个过程中耗时最长。</li><li>重新标记（CMS remark）：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。此阶段也需要“Stop The World”。</li><li>并发清除（CMS concurrent sweep）</li></ul><p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作。</p><p>所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。通过下图可以比较清楚地看到CMS收集器的运作步骤中并发和需要停顿的时间：</p><p><img src="/../assets/JVM/image-20230921220451317.png" alt="image-20230921220451317"></p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li><strong>优点</strong></li></ol><p>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：并发收集、低停顿，因此CMS收集器也被称为并发低停顿收集器（Concurrent Low Pause Collector）。</p><ol start="2"><li><strong>缺点</strong></li></ol><ul><li>对CPU资源非常敏感 其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。</li><li>CMS默认启动的回收线程数是（CPU数量+3）&#x2F;4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个时（比如2个），CMS对用户程序的影响就可能变得很大，如果本来CPU负载就比较大，还要分出一半的运算能力去执行收集器线程，就可能导致用户程序的执行速度忽然降低了50%，其实也让人无法接受。</li><li>无法处理浮动垃圾（Floating Garbage） 可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</li><li>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生。这一部分垃圾出现在标记过程之后，CMS无法再当次收集中处理掉它们，只好留待下一次GC时再清理掉。</li><li>这一部分垃圾就被称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。</li><li>标记-清除算法导致的空间碎片 CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</li><li>空间碎片过多时，将会给大对象分配带来很大麻烦，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象。</li></ul><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><h4 id="G1特点"><a href="#G1特点" class="headerlink" title="G1特点"></a>G1特点</h4><ul><li><code>并行与并发</code>： G1 能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短“Stop The World”停顿时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li><li><code>分代收集</code> ：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同方式去处理新创建的对象和已存活一段时间、熬过多次GC的旧对象来获取更好的收集效果。</li><li><code>空间整合</code> ：G1从整体来看是基于“标记-整理”算法实现的收集器，从局部（两个Region之间）上来看是基于“复制”算法实现的。这意味着G1运行期间不会产生内存空间碎片，收集后能提供规整的可用内存。此特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li><li><code>可预测的停顿</code>： 这是G1相对CMS的一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了降低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。</li></ul><h4 id="横跨整个堆内存"><a href="#横跨整个堆内存" class="headerlink" title="横跨整个堆内存"></a>横跨整个堆内存</h4><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老生代，而G1不再是这样。</p><p>G1在使用时，Java堆的内存布局与其他收集器有很大区别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，而都是一部分Region（不需要连续）的集合。</p><h4 id="建立可预测的时间模型"><a href="#建立可预测的时间模型" class="headerlink" title="建立可预测的时间模型"></a>建立可预测的时间模型</h4><p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p><h4 id="避免全堆扫描——Remembered-Set"><a href="#避免全堆扫描——Remembered-Set" class="headerlink" title="避免全堆扫描——Remembered Set"></a>避免全堆扫描——Remembered Set</h4><p>G1把Java堆分为多个Region，就是“化整为零”。但是Region不可能是孤立的，一个对象分配在某个Region中，可以与整个Java堆任意的对象发生引用关系。在做可达性分析确定对象是否存活的时候，需要扫描整个Java堆才能保证准确性，这显然是对GC效率的极大伤害。</p><p>为了避免全堆扫描的发生，虚拟机为G1中每个Region维护了一个与之对应的Remembered Set。虚拟机发现程序在对Reference类型的数据进行写操作时，会产生一个Write Barrier暂时中断写操作。</p><p>检查Reference引用的对象是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代中的对象），如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的Remembered Set之中。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏。</p><h4 id="G1运行流程"><a href="#G1运行流程" class="headerlink" title="G1运行流程"></a>G1运行流程</h4><ul><li><code>初始标记</code>： 仅仅只是标记一下GC Roots 能直接关联到的对象，并且修改TAMS（Nest Top Mark Start）的值，让下一阶段用户程序并发运行时，能正确的在Region中创建对象，此阶段需要<strong>停顿线程</strong>，但耗时很短。</li><li><code>并发标记</code>： 从GC Root 开始对堆中对象进行可达性分析，找到存活对象，此阶段耗时较长，但可与用户程序<strong>并发执行</strong>。</li><li><code>最终标记</code>：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要<strong>停顿线程，但是可并行执行</strong>。</li><li><code>筛选回收</code>： 首先对各个Region中的回收价值和成本进行排序，根据用户所期望的GC 停顿是时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li></ul><p><img src="/../assets/JVM/image-20230925225550414.png" alt="image-20230925225550414"></p><h4 id="G1和CMS比较"><a href="#G1和CMS比较" class="headerlink" title="G1和CMS比较"></a>G1和CMS比较</h4><p>CMS（Concurrent Mark-Sweep）和G1（Garbage-First）是两种不同的Java垃圾回收器，它们在垃圾回收的工作流程和性能特点上有一些重要区别：</p><ol><li>工作流程：<ul><li>CMS：CMS回收器的工作流程包括初始标记、并发标记、重新标记和并发清除四个阶段。初始标记和重新标记需要”Stop The World”，而并发标记和并发清除可以与应用程序并行执行。它以尽量减少停顿时间为目标，但在初始标记和重新标记阶段仍然需要较长的停顿时间。</li><li>G1：G1回收器的工作流程包括初始标记、并发标记、最终标记和筛选回收四个阶段。初始标记和最终标记需要停顿线程，但耗时短暂。并发标记和筛选回收可以与应用程序并行执行。G1回收器以”Garbage-First”为目标，尝试在满足用户指定的停顿时间目标的情况下，尽量回收垃圾对象。</li></ul></li><li>垃圾回收方式：<ul><li>CMS：CMS回收器使用标记-清除算法。它首先标记存活对象，然后清除未标记的对象。这会导致内存碎片问题，可能需要更频繁的Full GC来解决。</li><li>G1：G1回收器使用分代垃圾回收，将堆内存划分为多个区域（Region），可以有选择性地回收这些区域。G1回收器会尽量避免内存碎片问题，因为它可以进行区域之间的内存拷贝来压缩碎片。</li></ul></li><li>垃圾回收停顿时间：<ul><li>CMS：CMS回收器的停顿时间相对较短，但在初始标记和重新标记阶段仍然需要较长的停顿时间，这可能在某些情况下对响应时间敏感的应用程序造成问题。</li><li>G1：G1回收器的停顿时间可控，用户可以指定目标停顿时间。这使得G1更适合需要可预测停顿时间的应用程序，可以更好地满足实时性要求。</li></ul></li></ol><p>总的来说，CMS和G1回收器都是为了减少垃圾回收引起的停顿时间而设计的，但它们的工作方式和性能特点有所不同。G1在内存碎片处理和停顿时间可控性方面提供了更好的解决方案，而CMS则在某些情况下可能更适合特定的应用程序。选择哪个回收器应根据具体应用程序的需求和性能特点来决定。</p><h2 id="垃圾回收调优"><a href="#垃圾回收调优" class="headerlink" title="垃圾回收调优"></a>垃圾回收调优</h2><p>看不懂，后续补充……….</p><h1 id="类加载与字节码技术✏️"><a href="#类加载与字节码技术✏️" class="headerlink" title="类加载与字节码技术✏️"></a>类加载与字节码技术✏️</h1><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4 magic;                  <span class="comment">// 魔数，用于标识文件类型</span></span><br><span class="line">    u2 minor_version;          <span class="comment">// Java虚拟机的次版本号</span></span><br><span class="line">    u2 major_version;          <span class="comment">// Java虚拟机的主版本号</span></span><br><span class="line">    u2 constant_pool_count;    <span class="comment">// 常量池大小</span></span><br><span class="line">    cp_info constant_pool[constant_pool_count-<span class="number">1</span>]; <span class="comment">// 常量池数组</span></span><br><span class="line">    u2 access_flags;           <span class="comment">// 访问标识符，用于表示类或接口的访问控制</span></span><br><span class="line">    u2 this_class;             <span class="comment">// 当前类或接口的索引</span></span><br><span class="line">    u2 super_class;            <span class="comment">// 当前类的超类(父类)索引</span></span><br><span class="line">    u2 interfaces_count;       <span class="comment">// 接口数量</span></span><br><span class="line">    u2 interfaces[interfaces_count]; <span class="comment">// 接口索引列表</span></span><br><span class="line">    u2 fields_count;           <span class="comment">// 字段数量</span></span><br><span class="line">    field_info fields[fields_count]; <span class="comment">// 字段信息数组</span></span><br><span class="line">    u2 methods_count;          <span class="comment">// 方法数量</span></span><br><span class="line">    method_info methods[methods_count]; <span class="comment">// 方法信息数组</span></span><br><span class="line">    u2 attributes_count;       <span class="comment">// 类或接口的附加属性数量</span></span><br><span class="line">    attribute_info attributes[attributes_count]; <span class="comment">// 类或接口的附加属性信息数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一段java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行编译后得到的二进制字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000</span> ca fe ba be <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">34</span> <span class="number">00</span> <span class="number">23</span> 0a <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">15</span> 09</span><br><span class="line"><span class="number">0000020</span> <span class="number">00</span> <span class="number">16</span> <span class="number">00</span> <span class="number">17</span> 08 <span class="number">00</span> <span class="number">18</span> 0a <span class="number">00</span> <span class="number">19</span> <span class="number">00</span> 1a <span class="number">07</span> <span class="number">00</span> 1b <span class="number">07</span></span><br><span class="line"><span class="number">0000040</span> <span class="number">00</span> 1c <span class="number">01</span> <span class="number">00</span> <span class="number">06</span> 3c <span class="number">69</span> 6e <span class="number">69</span> <span class="number">74</span> 3e <span class="number">01</span> <span class="number">00</span> <span class="number">03</span> <span class="number">28</span> <span class="number">29</span></span><br><span class="line"><span class="number">0000060</span> <span class="number">56</span> <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">43</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">0f</span> 4c <span class="number">69</span> 6e <span class="number">65</span> 4e</span><br><span class="line"><span class="number">0000100</span> <span class="number">75</span> <span class="number">6d</span> <span class="number">62</span> <span class="number">65</span> <span class="number">72</span> <span class="number">54</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">12</span> 4c <span class="number">6f</span> <span class="number">63</span></span><br><span class="line"><span class="number">0000120</span> <span class="number">61</span> 6c <span class="number">56</span> <span class="number">61</span> <span class="number">72</span> <span class="number">69</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">54</span> <span class="number">61</span> <span class="number">62</span> 6c <span class="number">65</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000140</span> <span class="number">00</span> <span class="number">04</span> <span class="number">74</span> <span class="number">68</span> <span class="number">69</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> <span class="number">1d</span> 4c <span class="number">63</span> 6e <span class="number">2f</span> <span class="number">69</span> <span class="number">74</span> <span class="number">63</span></span><br><span class="line"><span class="number">0000160</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">2f</span> 6a <span class="number">76</span> <span class="number">6d</span> <span class="number">2f</span> <span class="number">74</span> <span class="number">35</span> <span class="number">2f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c <span class="number">6f</span></span><br><span class="line"><span class="number">0000200</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">6d</span> <span class="number">61</span> <span class="number">69</span> 6e <span class="number">01</span> <span class="number">00</span> <span class="number">16</span></span><br><span class="line"><span class="number">0000220</span> <span class="number">28</span> 5b 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span></span><br><span class="line"><span class="number">0000240</span> <span class="number">69</span> 6e <span class="number">67</span> 3b <span class="number">29</span> <span class="number">56</span> <span class="number">01</span> <span class="number">00</span> <span class="number">04</span> <span class="number">61</span> <span class="number">72</span> <span class="number">67</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> <span class="number">13</span></span><br><span class="line"><span class="number">0000260</span> 5b 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">69</span></span><br><span class="line"><span class="number">0000300</span> 6e <span class="number">67</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> <span class="number">4d</span> <span class="number">65</span> <span class="number">74</span> <span class="number">68</span> <span class="number">6f</span> <span class="number">64</span> <span class="number">50</span> <span class="number">61</span> <span class="number">72</span> <span class="number">61</span></span><br><span class="line"><span class="number">0000320</span> <span class="number">6d</span> <span class="number">65</span> <span class="number">74</span> <span class="number">65</span> <span class="number">72</span> <span class="number">73</span> <span class="number">01</span> <span class="number">00</span> 0a <span class="number">53</span> <span class="number">6f</span> <span class="number">75</span> <span class="number">72</span> <span class="number">63</span> <span class="number">65</span> <span class="number">46</span></span><br><span class="line"><span class="number">0000340</span> <span class="number">69</span> 6c <span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">0f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c <span class="number">6f</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span></span><br><span class="line"><span class="number">0000360</span> 2e 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> 0c <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 08 <span class="number">07</span> <span class="number">00</span> <span class="number">1d</span> 0c <span class="number">00</span> 1e</span><br><span class="line"><span class="number">0000400</span> <span class="number">00</span> <span class="number">1f</span> <span class="number">01</span> <span class="number">00</span> 0b <span class="number">68</span> <span class="number">65</span> 6c 6c <span class="number">6f</span> <span class="number">20</span> <span class="number">77</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span></span><br><span class="line"><span class="number">0000420</span> <span class="number">07</span> <span class="number">00</span> <span class="number">20</span> 0c <span class="number">00</span> <span class="number">21</span> <span class="number">00</span> <span class="number">22</span> <span class="number">01</span> <span class="number">00</span> 1b <span class="number">63</span> 6e <span class="number">2f</span> <span class="number">69</span> <span class="number">74</span></span><br><span class="line"><span class="number">0000440</span> <span class="number">63</span> <span class="number">61</span> <span class="number">73</span> <span class="number">74</span> <span class="number">2f</span> 6a <span class="number">76</span> <span class="number">6d</span> <span class="number">2f</span> <span class="number">74</span> <span class="number">35</span> <span class="number">2f</span> <span class="number">48</span> <span class="number">65</span> 6c 6c</span><br><span class="line"><span class="number">0000460</span> <span class="number">6f</span> <span class="number">57</span> <span class="number">6f</span> <span class="number">72</span> 6c <span class="number">64</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span></span><br><span class="line"><span class="number">0000500</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">4f</span> <span class="number">62</span> 6a <span class="number">65</span> <span class="number">63</span> <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span></span><br><span class="line"><span class="number">0000520</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">79</span> <span class="number">73</span> <span class="number">74</span> <span class="number">65</span> <span class="number">6d</span> <span class="number">01</span> <span class="number">00</span> <span class="number">03</span> <span class="number">6f</span></span><br><span class="line"><span class="number">0000540</span> <span class="number">75</span> <span class="number">74</span> <span class="number">01</span> <span class="number">00</span> <span class="number">15</span> 4c 6a <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> <span class="number">69</span> <span class="number">6f</span> <span class="number">2f</span> <span class="number">50</span> <span class="number">72</span></span><br><span class="line"><span class="number">0000560</span> <span class="number">69</span> 6e <span class="number">74</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">65</span> <span class="number">61</span> <span class="number">6d</span> 3b <span class="number">01</span> <span class="number">00</span> <span class="number">13</span> 6a <span class="number">61</span> <span class="number">76</span></span><br><span class="line"><span class="number">0000600</span> <span class="number">61</span> <span class="number">2f</span> <span class="number">69</span> <span class="number">6f</span> <span class="number">2f</span> <span class="number">50</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">74</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">65</span> <span class="number">61</span> <span class="number">6d</span></span><br><span class="line"><span class="number">0000620</span> <span class="number">01</span> <span class="number">00</span> <span class="number">07</span> <span class="number">70</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">74</span> 6c 6e <span class="number">01</span> <span class="number">00</span> <span class="number">15</span> <span class="number">28</span> 4c 6a</span><br><span class="line"><span class="number">0000640</span> <span class="number">61</span> <span class="number">76</span> <span class="number">61</span> <span class="number">2f</span> 6c <span class="number">61</span> 6e <span class="number">67</span> <span class="number">2f</span> <span class="number">53</span> <span class="number">74</span> <span class="number">72</span> <span class="number">69</span> 6e <span class="number">67</span> 3b</span><br><span class="line"><span class="number">0000660</span> <span class="number">29</span> <span class="number">56</span> <span class="number">00</span> <span class="number">21</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000700</span> <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 08 <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">2f</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">0000720</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> 2a b7 <span class="number">00</span> <span class="number">01</span> b1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 0a <span class="number">00</span></span><br><span class="line"><span class="number">0000740</span> <span class="number">00</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">04</span> <span class="number">00</span> 0b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0c <span class="number">00</span></span><br><span class="line"><span class="number">0000760</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> 0c <span class="number">00</span> <span class="number">0d</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 09 <span class="number">00</span> 0e <span class="number">00</span></span><br><span class="line"><span class="number">0001000</span> <span class="number">0f</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">37</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001020</span> 09 b2 <span class="number">00</span> <span class="number">02</span> <span class="number">12</span> <span class="number">03</span> b6 <span class="number">00</span> <span class="number">04</span> b1 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> 0a</span><br><span class="line"><span class="number">0001040</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0a <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">06</span> <span class="number">00</span> 08 <span class="number">00</span> <span class="number">07</span> <span class="number">00</span> 0b</span><br><span class="line"><span class="number">0001060</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0c <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 09 <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001100</span> <span class="number">00</span> <span class="number">12</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">05</span> <span class="number">01</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">13</span> <span class="number">00</span></span><br><span class="line"><span class="number">0001120</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">14</span></span><br></pre></td></tr></table></figure><h2 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>在上面这个helloworld中有两个方法，对应着两个字节码指令</p><ul><li><p>一个是<code>public cn.itcast.jvm.t5.HelloWorld();</code>构造方法的字节码指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2a b7 00 01 b1</span><br></pre></td></tr></table></figure><ol><li>2a &#x3D;&gt; aload_0 加载 slot 0 的局部变量，即 this，做为下面的 invokespecial 构造方法调用的参数</li><li>b7 &#x3D;&gt; invokespecial 预备调用构造方法，哪个方法呢？</li><li>00 01 引用常量池中 #1 项，即<code>Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code></li><li>b1 表示返回</li></ol></li><li><p>另一个是<code>public static void main(java.lang.String[]);</code>主方法的字节码指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b2 00 02 12 03 b6 00 04 b1</span><br></pre></td></tr></table></figure><ol><li>b2 &#x3D;&gt; getstatic 用来加载静态变量，哪个静态变量呢？</li><li>00 02 引用常量池中 #2 项，即<code>Field java/lang/System.out:Ljava/io/PrintStream;</code></li><li>12 &#x3D;&gt; ldc 加载参数，哪个参数呢？</li><li>03 引用常量池中 #3 项，即 <code>String hello world</code></li><li>b6 &#x3D;&gt; invokevirtual 预备调用成员方法，哪个方法呢？</li><li>00 04 引用常量池中 #4 项，即<code>Method java/io/PrintStream.println:(Ljava/lang/String;)V</code></li><li>b1 表示返回</li></ol></li></ul><h3 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h3><p>可以使用javap工具来反编译class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v HelloWorld.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/HelloWorld.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">5</span>; size <span class="number">551</span> bytes</span><br><span class="line">  MD5 checksum 1389d939c65ba536eb81d1a5c61d99be</span><br><span class="line">  Compiled from <span class="string">&quot;HelloWorld.java&quot;</span>              </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.HelloWorld               </span><br><span class="line">  minor version: <span class="number">0</span>                             </span><br><span class="line">  major version: <span class="number">52</span>                            </span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">6.</span>#<span class="number">20</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">21.</span>#<span class="number">22</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = String             #<span class="number">23</span>            <span class="comment">// hello world</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">24.</span>#<span class="number">25</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">26</span>            <span class="comment">// com/demo/HelloWorld</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">27</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">7</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">8</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">9</span> = Utf8               Code</span><br><span class="line">  #<span class="number">10</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">12</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">13</span> = Utf8               Lcom/demo/HelloWorld;</span><br><span class="line">  #<span class="number">14</span> = Utf8               main</span><br><span class="line">  #<span class="number">15</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">16</span> = Utf8               args</span><br><span class="line">  #<span class="number">17</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">18</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">19</span> = Utf8               HelloWorld.java</span><br><span class="line">  #<span class="number">20</span> = NameAndType        #<span class="number">7</span>:#<span class="number">8</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">21</span> = Class              #<span class="number">28</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">29</span>:#<span class="number">30</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">23</span> = Utf8               hello world</span><br><span class="line">  #<span class="number">24</span> = Class              #<span class="number">31</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">32</span>:#<span class="number">33</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">26</span> = Utf8               com/demo/HelloWorld</span><br><span class="line">  #<span class="number">27</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">28</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">29</span> = Utf8               out</span><br><span class="line">  #<span class="number">30</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">31</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">32</span> = Utf8               println</span><br><span class="line">  #<span class="number">33</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.HelloWorld();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// String hello world</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;HelloWorld.java&quot;</span></span><br></pre></td></tr></table></figure><h3 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h3><ol><li>原始java代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Short.MAX_VALUE + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">       System.out.println(c); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编译后的字节码文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v Demo_20.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/Demo_20.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">7</span>; size <span class="number">601</span> bytes       </span><br><span class="line">  MD5 checksum 0f9e41fb2a7334a69c89d2661540f4f1</span><br><span class="line">  Compiled from <span class="string">&quot;Demo_20.java&quot;</span>                 </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.Demo_20                  </span><br><span class="line">  minor version: <span class="number">0</span>                             </span><br><span class="line">  major version: <span class="number">52</span>                            </span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER                 </span><br><span class="line">Constant pool:                                 </span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">7.</span>#<span class="number">25</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V             </span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">26</span>            <span class="comment">// java/lang/Short                           </span></span><br><span class="line">   #<span class="number">3</span> = Integer            <span class="number">32768</span>                                                       </span><br><span class="line">   #<span class="number">4</span> = Fieldref           #<span class="number">27.</span>#<span class="number">28</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">5</span> = Methodref          #<span class="number">29.</span>#<span class="number">30</span>        <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">31</span>            <span class="comment">// com/demo/Demo_20</span></span><br><span class="line">   #<span class="number">7</span> = Class              #<span class="number">32</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">8</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">9</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">10</span> = Utf8               Code</span><br><span class="line">  #<span class="number">11</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">12</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">13</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               Lcom/demo/Demo_20;</span><br><span class="line">  #<span class="number">15</span> = Utf8               main</span><br><span class="line">  #<span class="number">16</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">17</span> = Utf8               args</span><br><span class="line">  #<span class="number">18</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">19</span> = Utf8               a</span><br><span class="line">  #<span class="number">20</span> = Utf8               I</span><br><span class="line">  #<span class="number">21</span> = Utf8               b</span><br><span class="line">  #<span class="number">22</span> = Utf8               c</span><br><span class="line">  #<span class="number">23</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">24</span> = Utf8               Demo_20.java</span><br><span class="line">  #<span class="number">25</span> = NameAndType        #<span class="number">8</span>:#<span class="number">9</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">26</span> = Utf8               java/lang/Short</span><br><span class="line">  #<span class="number">27</span> = Class              #<span class="number">33</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">28</span> = NameAndType        #<span class="number">34</span>:#<span class="number">35</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">29</span> = Class              #<span class="number">36</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">37</span>:#<span class="number">38</span>        <span class="comment">// println:(I)V</span></span><br><span class="line">  #<span class="number">31</span> = Utf8               com/demo/Demo_20</span><br><span class="line">  #<span class="number">32</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">33</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">34</span> = Utf8               out</span><br><span class="line">  #<span class="number">35</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">36</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">37</span> = Utf8               println</span><br><span class="line">  #<span class="number">38</span> = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.Demo_20();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcom/demo/Demo_20;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">3</span>                  <span class="comment">// int 32768</span></span><br><span class="line">         <span class="number">5</span>: istore_2</span><br><span class="line">         <span class="number">6</span>: iload_1</span><br><span class="line">         <span class="number">7</span>: iload_2</span><br><span class="line">         <span class="number">8</span>: iadd</span><br><span class="line">         <span class="number">9</span>: istore_3</span><br><span class="line">        <span class="number">10</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">13</span>: iload_3</span><br><span class="line">        <span class="number">14</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">17</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">18</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">15</span>     <span class="number">1</span>     a   I</span><br><span class="line">            <span class="number">6</span>      <span class="number">12</span>     <span class="number">2</span>     b   I</span><br><span class="line">           <span class="number">10</span>       <span class="number">8</span>     <span class="number">3</span>     c   I</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Demo_20.java&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>常量池载入运行时常量池</li></ol><p><img src="/../assets/JVM/image-20231010162136501.png" alt="image-20231010162136501"></p><ol start="4"><li>方法字节码载入方法区</li></ol><p><img src="/../assets/JVM/image-20231010162213690.png" alt="image-20231010162213690"></p><ol start="5"><li>main 线程开始运行，分配栈帧内存</li></ol><p>（stack&#x3D;2，locals&#x3D;4）：操作数栈深度为2，局部变量表数量为4</p><p><img src="/../assets/JVM/image-20231010162352755.png" alt="image-20231010162352755"></p><ol start="6"><li>执行引擎开始执行字节码</li></ol><ul><li>bipush 10<ul><li>将一个 byte 压入操作数栈（其长度会补齐 4 个字节），类似的指令还有 </li><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（分两次压入，因为 long 是 8 个字节）</li><li><strong>这里小的数字都是和字节码指令存在一起，超过 short 范围的数字存入了常量池</strong></li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163015751.png" alt="image-20231010163015751"></p><ul><li>istore_1<ul><li>将操作数栈顶数据弹出，存入局部变量表的 slot 1</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163105787.png" alt="image-20231010163105787"></p><ul><li>ldc #3<ul><li>从常量池加载 #3 数据到操作数栈</li><li>注意 Short.MAX_VALUE 是 32767，所以 32768 &#x3D; Short.MAX_VALUE + 1 实际是在编译期间计算<br>好的</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010163201925.png" alt="image-20231010163201925"></p><ul><li>istore_2</li></ul><p><img src="/../assets/JVM/image-20231010163243864.png" alt="image-20231010163243864"></p><ul><li>iload_1</li></ul><p><img src="/../assets/JVM/image-20231010163355144.png" alt="image-20231010163355144"></p><ul><li>iload_2</li></ul><p><img src="/../assets/JVM/image-20231010163433368.png" alt="image-20231010163433368"></p><ul><li>iadd</li></ul><p><img src="/../assets/JVM/image-20231010163623499.png" alt="image-20231010163623499"></p><ul><li>istore_3</li></ul><p><img src="/../assets/JVM/image-20231010164657704.png" alt="image-20231010164657704"></p><ul><li>getstatic #4</li></ul><p><img src="/../assets/JVM/image-20231010165829176.png" alt="image-20231010165829176"></p><p><img src="/../assets/JVM/image-20231010165852971.png" alt="image-20231010165852971"></p><ul><li>iload_3</li></ul><p><img src="/../assets/JVM/image-20231010170007711.png" alt="image-20231010170007711"></p><ul><li>invokevirtual #5<ul><li>找到常量池 #5 项</li><li>定位到方法区   java&#x2F;io&#x2F;PrintStream.println:(I)V 方法 </li><li>生成新的栈帧（分配 locals、stack等）</li><li>传递参数，执行新栈帧中的字节码</li></ul></li></ul><p><img src="/../assets/JVM/image-20231010170131429.png" alt="image-20231010170131429"></p><ul><li><p>执行完毕，弹出栈帧 </p></li><li><p>清除 main 操作数栈内容</p></li></ul><p><img src="/../assets/JVM/image-20231010170243175.png" alt="image-20231010170243175"></p><ul><li>return<ul><li>完成 main 方法调用，弹出 main 栈帧 </li><li>程序结束</li></ul></li></ul><h3 id="例子：从字节码角度分析-a"><a href="#例子：从字节码角度分析-a" class="headerlink" title="例子：从字节码角度分析 a++"></a>例子：从字节码角度分析 a++</h3><ul><li>源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++ + ++a + a--; </span><br><span class="line">       System.out.println(a); <span class="comment">//11</span></span><br><span class="line">       System.out.println(b); <span class="comment">//34</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">$ javap -v Demo_21.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/Workspace/JVM/demo/target/classes/com/demo/Demo_21.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2023</span>-<span class="number">4</span>-<span class="number">7</span>; size <span class="number">576</span> bytes</span><br><span class="line">  MD5 checksum 5bc962752b10ca4b57350ca9814ec5b0</span><br><span class="line">  Compiled from <span class="string">&quot;Demo_21.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">com</span>.demo.Demo_21</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">5.</span>#<span class="number">22</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">23.</span>#<span class="number">24</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">3</span> = Methodref          #<span class="number">25.</span>#<span class="number">26</span>        <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">   #<span class="number">4</span> = Class              #<span class="number">27</span>            <span class="comment">// com/demo/Demo_21</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">28</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">6</span> = Utf8               &lt;init&gt;</span><br><span class="line">   #<span class="number">7</span> = Utf8               ()V</span><br><span class="line">   #<span class="number">8</span> = Utf8               Code</span><br><span class="line">   #<span class="number">9</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">10</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">11</span> = Utf8               <span class="built_in">this</span></span><br><span class="line">  #<span class="number">12</span> = Utf8               Lcom/demo/Demo_21;</span><br><span class="line">  #<span class="number">13</span> = Utf8               main</span><br><span class="line">  #<span class="number">14</span> = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #<span class="number">15</span> = Utf8               args</span><br><span class="line">  #<span class="number">16</span> = Utf8               [Ljava/lang/String;</span><br><span class="line">  #<span class="number">17</span> = Utf8               a</span><br><span class="line">  #<span class="number">18</span> = Utf8               I</span><br><span class="line">  #<span class="number">19</span> = Utf8               b</span><br><span class="line">  #<span class="number">20</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">21</span> = Utf8               Demo_21.java</span><br><span class="line">  #<span class="number">22</span> = NameAndType        #<span class="number">6</span>:#<span class="number">7</span>          <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">23</span> = Class              #<span class="number">29</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">24</span> = NameAndType        #<span class="number">30</span>:#<span class="number">31</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">25</span> = Class              #<span class="number">32</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">26</span> = NameAndType        #<span class="number">33</span>:#<span class="number">34</span>        <span class="comment">// println:(I)V</span></span><br><span class="line">  #<span class="number">27</span> = Utf8               com/demo/Demo_21</span><br><span class="line">  #<span class="number">28</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">29</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">30</span> = Utf8               out</span><br><span class="line">  #<span class="number">31</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">32</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">33</span> = Utf8               println</span><br><span class="line">  #<span class="number">34</span> = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.demo.Demo_21();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Lcom/demo/Demo_21;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: iload_1</span><br><span class="line">         <span class="number">4</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">         <span class="number">7</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">10</span>: iload_1</span><br><span class="line">        <span class="number">11</span>: iadd</span><br><span class="line">        <span class="number">12</span>: iload_1</span><br><span class="line">        <span class="number">13</span>: iinc          <span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">        <span class="number">16</span>: iadd</span><br><span class="line">        <span class="number">17</span>: istore_2</span><br><span class="line">        <span class="number">18</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">21</span>: iload_1</span><br><span class="line">        <span class="number">22</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">25</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">28</span>: iload_2</span><br><span class="line">        <span class="number">29</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">32</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">18</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">25</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">32</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">33</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">30</span>     <span class="number">1</span>     a   I</span><br><span class="line">           <span class="number">18</span>      <span class="number">15</span>     <span class="number">2</span>     b   I</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Demo_21.java&quot;</span></span><br></pre></td></tr></table></figure><ul><li>分析⭐⭐⭐：<ul><li>注意 iinc 指令是直接在局部变量 slot 上进行运算 </li><li>a++ 和 ++a 的区别是先执行 iload 还是 先执行 iinc</li></ul></li></ul><h3 id="条件判断指令"><a href="#条件判断指令" class="headerlink" title="条件判断指令"></a>条件判断指令</h3><table><thead><tr><th align="center">指令</th><th align="center">助记符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0x99</td><td align="center">ifeq</td><td align="center">判断是否 &#x3D;&#x3D; 0</td></tr><tr><td align="center">0x9a</td><td align="center">ifne</td><td align="center">判断是否 !&#x3D; 0</td></tr><tr><td align="center">0x9b</td><td align="center">iflt</td><td align="center">判断是否 &lt; 0</td></tr><tr><td align="center">0x9c</td><td align="center">ifge</td><td align="center">判断是否 &gt;&#x3D; 0</td></tr><tr><td align="center">0x9d</td><td align="center">ifgt</td><td align="center">判断是否 &gt; 0</td></tr><tr><td align="center">0x9e</td><td align="center">ifle</td><td align="center">判断是否 &lt;&#x3D; 0</td></tr><tr><td align="center">0x9f</td><td align="center">if_icmpeq</td><td align="center">两个int是否 &#x3D;&#x3D;</td></tr><tr><td align="center">0xa0</td><td align="center">if_icmpne</td><td align="center">两个int是否 !&#x3D;</td></tr><tr><td align="center">0xa1</td><td align="center">if_icmplt</td><td align="center">两个int是否 &lt;</td></tr><tr><td align="center">0xa2</td><td align="center">if_icmpge</td><td align="center">两个int是否 &gt;&#x3D;</td></tr><tr><td align="center">0xa3</td><td align="center">if_icmpgt</td><td align="center">两个int是否 &gt;</td></tr><tr><td align="center">0xa4</td><td align="center">if_icmple</td><td align="center">两个int是否 &lt;&#x3D;</td></tr><tr><td align="center">0xa5</td><td align="center">if_acmpeq</td><td align="center">两个引用是否 &#x3D;&#x3D;</td></tr><tr><td align="center">0xa6</td><td align="center">if_acmpne</td><td align="center">两个引用是否 !&#x3D;</td></tr><tr><td align="center">0xc6</td><td align="center">ifnull</td><td align="center">判断是否 &#x3D;&#x3D; null</td></tr><tr><td align="center">0xc7</td><td align="center">ifnonnull</td><td align="center">判断是否 !&#x3D; null</td></tr></tbody></table><ul><li>原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(a == <span class="number">0</span>) &#123; </span><br><span class="line">           a = <span class="number">10</span>; </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           a = <span class="number">20</span>; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iconst_0</span><br><span class="line"><span class="number">1</span>: istore_1</span><br><span class="line"><span class="number">2</span>: iload_1      </span><br><span class="line"><span class="number">3</span>: ifne          <span class="number">12</span> </span><br><span class="line"><span class="number">6</span>: bipush        <span class="number">10</span> </span><br><span class="line"><span class="number">8</span>: istore_1</span><br><span class="line"><span class="number">9</span>: goto         <span class="number">15</span> </span><br><span class="line"><span class="number">12</span>: bipush       <span class="number">20</span> </span><br><span class="line"><span class="number">14</span>: istore_1</span><br><span class="line"><span class="number">15</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: iconst_0                <span class="comment">// 将整数常量值0（int类型）压入操作数栈中。</span></span><br><span class="line"> <span class="number">1</span>: istore_1                <span class="comment">// 将栈顶数据存入局部变量表 slot 1</span></span><br><span class="line"> <span class="number">2</span>: iload_1                 <span class="comment">// 将局部变量表slot 1的值压入操作数栈</span></span><br><span class="line"> <span class="number">3</span>: bipush        <span class="number">10</span>        <span class="comment">// 将10压入操作数栈</span></span><br><span class="line"> <span class="number">5</span>: if_icmpge     <span class="number">14</span>        <span class="comment">// 判断 i &gt;= 10 ，成立则跳转到14行，不成立则执行下一行</span></span><br><span class="line"> <span class="number">8</span>: iinc          <span class="number">1</span>, <span class="number">1</span>      <span class="comment">// i自增</span></span><br><span class="line"><span class="number">11</span>: goto          <span class="number">2</span>         <span class="comment">// 跳转到第2行</span></span><br><span class="line"><span class="number">14</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="练习-判断结果"><a href="#练习-判断结果" class="headerlink" title="练习-判断结果"></a>练习-判断结果</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            x = x++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最终x的结果是0<ul><li>执行<code>x++</code>时，先执行<code>iload_x</code>，将0加载到操作数栈中</li><li>然后执行iinc，将局部变量表中的x自增，此时局部变量表中的<code>x = 1</code></li><li>此时又执行了一个赋值操作，<code>istore_x</code>，将操作数栈中的0，重新赋给了局部变量表中的x，导致x为0</li></ul></li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="V"><a href="#V" class="headerlink" title="&lt;cinit&gt;()V"></a><code>&lt;cinit&gt;()V</code></h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_27</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line"> <span class="number">2</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"> <span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line"> <span class="number">7</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"><span class="number">10</span>: bipush        <span class="number">30</span></span><br><span class="line"><span class="number">12</span>: putstatic     #<span class="number">2</span>                  <span class="comment">// Field i:I</span></span><br><span class="line"><span class="number">15</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>编译器会按照从上至下的顺序，收集所有的static静态代码块和静态成员赋值的代码，合并成一个特殊的方法<code>&lt;cinit&gt;()V</code></li><li><code>&lt;cinit&gt;()V</code>方法会在类加载的初始化阶段被调用</li></ul><h4 id="V-1"><a href="#V-1" class="headerlink" title=" &lt;init&gt;()V"></a><code> &lt;init&gt;()V</code></h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_28</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;s1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo_28</span><span class="params">(String a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo_28</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_28</span>(<span class="string">&quot;s3&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(demo.a);</span><br><span class="line">        System.out.println(demo.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: aload_0</span><br><span class="line"> <span class="number">1</span>: invokespecial #<span class="number">1</span>      <span class="comment">// super.&lt;init&gt;()V</span></span><br><span class="line"> <span class="number">4</span>: aload_0</span><br><span class="line"> <span class="number">5</span>: ldc #<span class="number">2</span>                <span class="comment">// &lt;- &quot;s1&quot;</span></span><br><span class="line"> <span class="number">7</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a</span></span><br><span class="line"><span class="number">10</span>: aload_0</span><br><span class="line"><span class="number">11</span>: bipush <span class="number">20</span>             <span class="comment">// &lt;- 20</span></span><br><span class="line"><span class="number">13</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b</span></span><br><span class="line"><span class="number">16</span>: aload_0</span><br><span class="line"><span class="number">17</span>: bipush <span class="number">10</span>             <span class="comment">// &lt;- 10</span></span><br><span class="line"><span class="number">19</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b</span></span><br><span class="line"><span class="number">22</span>: aload_0</span><br><span class="line"><span class="number">23</span>: ldc #<span class="number">5</span>                <span class="comment">// &lt;- &quot;s2&quot;</span></span><br><span class="line"><span class="number">25</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a</span></span><br><span class="line"><span class="number">28</span>: aload_0               <span class="comment">// ------------------------------</span></span><br><span class="line"><span class="number">29</span>: aload_1               <span class="comment">// &lt;- slot 1(a) &quot;s3&quot;            |</span></span><br><span class="line"><span class="number">30</span>: putfield #<span class="number">3</span>           <span class="comment">// -&gt; this.a                    |</span></span><br><span class="line"><span class="number">33</span>: aload_0                                               |</span><br><span class="line"><span class="number">34</span>: iload_2               <span class="comment">// &lt;- slot 2(b) 30              |</span></span><br><span class="line"><span class="number">35</span>: putfield #<span class="number">4</span>           <span class="comment">// -&gt; this.b --------------------</span></span><br><span class="line"><span class="number">38</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>编译器会按照从上至下的顺序，收集所有代码块和所有成员变量赋值的代码，形成新的构造方法，但原始构造方法内的代码总是会在最后</li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo_29</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo_29</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_29</span>();</span><br><span class="line">        demo.test1();</span><br><span class="line">        demo.test2();</span><br><span class="line">        demo.test3();</span><br><span class="line">        demo.test4();</span><br><span class="line">        Demo_29.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class com/demo/Demo_29</span></span><br><span class="line"> <span class="number">3</span>: dup</span><br><span class="line"> <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line"> <span class="number">7</span>: astore_1</span><br><span class="line"> <span class="number">8</span>: aload_1</span><br><span class="line"> <span class="number">9</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method test1:()V</span></span><br><span class="line"><span class="number">12</span>: aload_1</span><br><span class="line"><span class="number">13</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method test2:()V</span></span><br><span class="line"><span class="number">16</span>: aload_1</span><br><span class="line"><span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method test3:()V</span></span><br><span class="line"><span class="number">20</span>: aload_1</span><br><span class="line"><span class="number">21</span>: pop</span><br><span class="line"><span class="number">22</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method test4:()V</span></span><br><span class="line"><span class="number">25</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method test4:()V</span></span><br><span class="line"><span class="number">28</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>new 是创建【对象】，给对象分配堆内存，执行成功会将【对象引用】压入操作数栈</li><li>dup 是赋值操作数栈栈顶的内容，本例即为【对象引用】，为什么需要两份引用呢，一个是要配<br>合 invokespecial 调用该对象的构造方法   “<init>“:()V （会消耗掉栈顶一个引用），另一个要配合 astore_1 赋值给局部变量</li><li>最终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静<br>态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于动态绑定，即支持多态</li><li>成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li><li>比较有意思的是   d.test4();是通过【对象引用】调用一个静态方法，可以看到在调用invokestatic 之前执行了 pop 指令，把【对象引用】从操作数栈弹掉了</li></ul><blockquote><p>所以在调用静态方法的时候就不要用对象去调用了，否则会多出来20，21这两行的多余的代码</p></blockquote><h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><p>当执行 invokevirtual 指令时，</p><ol><li><strong>通过栈帧中的对象引用找到对象</strong>：<ul><li>在多态情况下，对象引用可以指向子类对象，即父类引用指向子类实例。这意味着你可以通过父类引用调用子类对象的方法。</li></ul></li><li><strong>分析对象头，找到对象的实际 Class</strong>：<ul><li>JVM需要确定实际对象的类型，这是多态的关键。通过对象的头部信息，JVM可以确定它属于哪个类。</li></ul></li><li><strong>Class 结构中有 vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了</strong>：<ul><li>vtable（虚方法表）是每个类的一部分，它包含了该类及其父类中的虚拟方法的引用。在类加载的链接阶段，JVM会构建vtable，确保正确的方法引用与类的层次结构一致。</li></ul></li><li><strong>查表得到方法的具体地址</strong>：<ul><li>当你调用一个虚拟方法时，JVM会根据对象的实际类型，查找与方法名匹配的虚方法表中的方法引用。这确保了调用的是实际对象的版本，而不是引用类型的版本。</li></ul></li><li><strong>执行方法的字节码</strong>：<ul><li>一旦找到了正确的方法引用，JVM将执行该方法的字节码。这是多态的最终体现，因为不同对象的不同实现将根据其实际类型而执行不同的行为。</li></ul></li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">20</span>;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span> </span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">12</span> </span><br><span class="line">        <span class="number">8</span>: astore_2</span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">20</span> </span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/Exception </span><br><span class="line">     LineNumberTable: ...        </span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">9</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception; </span><br><span class="line">           <span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">11</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是前闭后开的检测范围，一旦这个范围<br>内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号 </li><li>8 行的字节码指令 astore_2 是将异常对象引用存入局部变量表的 slot 2 位置</li></ul><h4 id="多个-single-catch-块的情况"><a href="#多个-single-catch-块的情况" class="headerlink" title="多个 single-catch 块的情况"></a>多个 single-catch 块的情况</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123; </span><br><span class="line">因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot <span class="number">2</span> 位置被共用</span><br><span class="line">multi-<span class="keyword">catch</span> 的情况</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123; </span><br><span class="line">           i = <span class="number">30</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NullPointerException e) &#123; </span><br><span class="line">           i = <span class="number">40</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">50</span>;</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span> </span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">26</span> </span><br><span class="line">        <span class="number">8</span>: astore_2</span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">30</span> </span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: goto          <span class="number">26</span> </span><br><span class="line">       <span class="number">15</span>: astore_2</span><br><span class="line">       <span class="number">16</span>: bipush        <span class="number">40</span> </span><br><span class="line">       <span class="number">18</span>: istore_1</span><br><span class="line">       <span class="number">19</span>: goto          <span class="number">26</span> </span><br><span class="line">       <span class="number">22</span>: astore_2</span><br><span class="line">       <span class="number">23</span>: bipush        <span class="number">50</span> </span><br><span class="line">       <span class="number">25</span>: istore_1</span><br><span class="line">       <span class="number">26</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/ArithmeticException </span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">15</span>   Class java/lang/NullPointerException </span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">22</span>   Class java/lang/Exception</span><br><span class="line">     LineNumberTable: ... </span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">           <span class="number">9</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/ArithmeticException; </span><br><span class="line">          <span class="number">16</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/NullPointerException; </span><br><span class="line">          <span class="number">23</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception;</span><br><span class="line">           <span class="number">0</span>      <span class="number">27</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">25</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><blockquote><p>因为异常出现时，只能进入 Exception table 中一个分支，所以局部变量表 slot 2 位置被共用</p></blockquote><h4 id="multi-catch-的情况"><a href="#multi-catch-的情况" class="headerlink" title="multi-catch 的情况"></a>multi-catch 的情况</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_3</span> &#123;ﬁnally</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">Method</span> <span class="variable">test</span> <span class="operator">=</span> Demo3_11_3.class.getMethod(<span class="string">&quot;test&quot;</span>); </span><br><span class="line">           test.invoke(<span class="literal">null</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | </span><br><span class="line">InvocationTargetException e) &#123;</span><br><span class="line">           e.printStackTrace(); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123; </span><br><span class="line">       System.out.println(<span class="string">&quot;ok&quot;</span>); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: ldc           #<span class="number">2</span>                  </span><br><span class="line">        <span class="number">2</span>: ldc           #<span class="number">3</span>                  </span><br><span class="line">        <span class="number">4</span>: iconst_0</span><br><span class="line">        <span class="number">5</span>: anewarray     #<span class="number">4</span>                  </span><br><span class="line">        <span class="number">8</span>: invokevirtual #<span class="number">5</span>                  </span><br><span class="line">       <span class="number">11</span>: astore_1</span><br><span class="line">       <span class="number">12</span>: aload_1</span><br><span class="line">       <span class="number">13</span>: aconst_null </span><br><span class="line">       <span class="number">14</span>: iconst_0</span><br><span class="line">       <span class="number">15</span>: anewarray     #<span class="number">6</span>                  </span><br><span class="line">       <span class="number">18</span>: invokevirtual #<span class="number">7</span>                  </span><br><span class="line">       <span class="number">21</span>: pop</span><br><span class="line">       <span class="number">22</span>: goto          <span class="number">30</span> </span><br><span class="line">       <span class="number">25</span>: astore_1</span><br><span class="line">       <span class="number">26</span>: aload_1</span><br><span class="line">       <span class="number">27</span>: invokevirtual #<span class="number">11</span> <span class="comment">// e.printStackTrace:()V </span></span><br><span class="line">       <span class="number">30</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/NoSuchMethodException</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/IllegalAccessException</span><br><span class="line">            <span class="number">0</span>    <span class="number">22</span>    <span class="number">25</span>   Class java/lang/reflect/InvocationTargetException </span><br><span class="line">     LineNumberTable: ...</span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">12</span>      <span class="number">10</span>     <span class="number">1</span>  test   Ljava/lang/reflect/Method;</span><br><span class="line">          <span class="number">26</span>       <span class="number">4</span>     <span class="number">1</span>     e   Ljava/lang/ReflectiveOperationException; </span><br><span class="line">           <span class="number">0</span>      <span class="number">31</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><p>Exception table中的target都指向一个地方</p><h4 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_11_4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">           i = <span class="number">20</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">           i = <span class="number">30</span>; </span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部分关键字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>; </span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC </span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span> </span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1            <span class="comment">// 0 -&gt; i</span></span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span>    <span class="comment">// try -------------------------------------- </span></span><br><span class="line">        <span class="number">4</span>: istore_1            <span class="comment">// 10 -&gt; i                                 | </span></span><br><span class="line">        <span class="number">5</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">        <span class="number">7</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">        <span class="number">8</span>: goto          <span class="number">27</span>    <span class="comment">// return ----------------------------------- </span></span><br><span class="line">       <span class="number">11</span>: astore_2            <span class="comment">// catch Exceptin -&gt; e ---------------------- </span></span><br><span class="line">       <span class="number">12</span>: bipush        <span class="number">20</span>    <span class="comment">//                                         | </span></span><br><span class="line">       <span class="number">14</span>: istore_1            <span class="comment">// 20 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">15</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">       <span class="number">17</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">18</span>: goto          <span class="number">27</span>    <span class="comment">// return ----------------------------------- </span></span><br><span class="line">       <span class="number">21</span>: astore_3            <span class="comment">// catch any -&gt; slot 3 ---------------------- </span></span><br><span class="line">       <span class="number">22</span>: bipush        <span class="number">30</span>    <span class="comment">// finally                                 | </span></span><br><span class="line">       <span class="number">24</span>: istore_1            <span class="comment">// 30 -&gt; i                                 | </span></span><br><span class="line">       <span class="number">25</span>: aload_3             <span class="comment">// &lt;- slot 3                               | </span></span><br><span class="line">       <span class="number">26</span>: athrow              <span class="comment">// throw ------------------------------------ </span></span><br><span class="line">       <span class="number">27</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">21</span>   any    <span class="comment">// 剩余的异常类型，比如 Error </span></span><br><span class="line">           <span class="number">11</span>    <span class="number">15</span>    <span class="number">21</span>   any    <span class="comment">// 剩余的异常类型，比如 Error </span></span><br><span class="line">     LineNumberTable: ...</span><br><span class="line">     LocalVariableTable:</span><br><span class="line">       Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">12</span>       <span class="number">3</span>     <span class="number">2</span>     e   Ljava/lang/Exception; </span><br><span class="line">           <span class="number">0</span>      <span class="number">28</span>     <span class="number">0</span>  args   [Ljava/lang/String; </span><br><span class="line">           <span class="number">2</span>      <span class="number">26</span>     <span class="number">1</span>     i   I</span><br><span class="line">     StackMapTable: ... </span><br><span class="line">   MethodParameters: ...</span><br></pre></td></tr></table></figure><ul><li>可以看到有3个[from, to)<ul><li>第一个<code>[2, 5)</code>是检测try块中是否有Exception异常，如果有则跳转至11行执行catch块</li><li>第二个<code>[2, 5)</code>是检测try块中是否有其他异常（非Exception异常），如果有则跳转至21行执行finally块</li><li>第三个<code>[11, 15)</code>是检测catch快中是否有其他异常，如果有则跳转至21行执行finally块</li></ul></li><li>结论：finally中的代码被复制了三分，分别放进try流程、catch流程以及catch剩余的异常类型流程</li></ul><h3 id="finally面试题"><a href="#finally面试题" class="headerlink" title="finally面试题"></a>finally面试题</h3><ul><li>源代码，结果为20</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()I</span><br><span class="line">  flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>      <span class="comment">// 将 int 10 压入栈顶</span></span><br><span class="line">       <span class="number">2</span>: istore_0              <span class="comment">// 将栈顶的 int 10 存入到局部变量 slot 0 中，并从栈顶弹出</span></span><br><span class="line">       <span class="number">3</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 int 20 压入栈顶</span></span><br><span class="line">       <span class="number">5</span>: ireturn               <span class="comment">// 返回栈顶的 int 20</span></span><br><span class="line">       <span class="number">6</span>: astore_1              <span class="comment">// 捕获任何异常</span></span><br><span class="line">       <span class="number">7</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 int 20 压入栈顶</span></span><br><span class="line">       <span class="number">9</span>: ireturn</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">0</span>     <span class="number">3</span>     <span class="number">6</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">13</span>: <span class="number">3</span></span><br><span class="line">    StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">      frame_type = <span class="number">70</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">        stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br></pre></td></tr></table></figure><ul><li><p>由于 ﬁnally 中的 ireturn 被插入了所有可能的流程，因此返回结果肯定以 ﬁnally 的为准 </p></li><li><p>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</p></li><li><p>跟上例中的 ﬁnally 相比，发现没有 athrow 了，这告诉我们：如果在 ﬁnally 中出现了 return，会<br>吞掉异常</p></li><li><p>源代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_37</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> test();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()I</span><br><span class="line">  flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span>      <span class="comment">// 将 10 放入栈顶</span></span><br><span class="line">       <span class="number">2</span>: istore_0              <span class="comment">// 10 -&gt; i</span></span><br><span class="line">       <span class="number">3</span>: iload_0               <span class="comment">// &lt;- i(10)</span></span><br><span class="line">       <span class="number">4</span>: istore_1              <span class="comment">// 将 i(10) 暂存至 slot 1，目的是为了固定返回值</span></span><br><span class="line">       <span class="number">5</span>: bipush        <span class="number">20</span>      <span class="comment">// 将 20 放入栈顶</span></span><br><span class="line">       <span class="number">7</span>: istore_0              <span class="comment">// 20 -&gt; i</span></span><br><span class="line">       <span class="number">8</span>: iload_1               <span class="comment">// 载入 slot 1 暂存的值 (10)</span></span><br><span class="line">       <span class="number">9</span>: ireturn               <span class="comment">// 返回栈顶的值</span></span><br><span class="line">      <span class="number">10</span>: astore_2</span><br><span class="line">      <span class="number">11</span>: bipush        <span class="number">20</span></span><br><span class="line">      <span class="number">13</span>: istore_0</span><br><span class="line">      <span class="number">14</span>: aload_2</span><br><span class="line">      <span class="number">15</span>: athrow</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           <span class="number">3</span>     <span class="number">5</span>    <span class="number">10</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">3</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">5</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">10</span></span><br><span class="line">      line <span class="number">15</span>: <span class="number">14</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">3</span>      <span class="number">13</span>     <span class="number">0</span>     i   I</span><br><span class="line">    StackMapTable: number_of_entries = <span class="number">1</span></span><br><span class="line">      frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">        offset_delta = <span class="number">10</span></span><br><span class="line">        locals = [ <span class="type">int</span> ]</span><br><span class="line">        stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br></pre></td></tr></table></figure><p>在上面的例子中，因为只在<code>try</code>块中有一个<code>return</code>语句，而在<code>finally</code>块中没有<code>return</code>语句，所以<code>ireturn</code>会加载<code>try</code>块中的局部变量<code>i</code>，而不是<code>finally</code>块中的局部变量<code>i</code>。如果在<code>finally</code>块中也有一个<code>return</code>语句，那么<code>ireturn</code>将加载<code>finally</code>块中的局部变量<code>i</code> 并返回它的值。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class java/lang/Object</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">7</span>: astore_1                          <span class="comment">// lock引用 -&gt; lock</span></span><br><span class="line">       <span class="number">8</span>: aload_1                           <span class="comment">// &lt;- lock （synchronized开始）</span></span><br><span class="line">       <span class="number">9</span>: dup</span><br><span class="line">      <span class="number">10</span>: astore_2                          <span class="comment">// lock引用 -&gt; slot 2</span></span><br><span class="line">      <span class="number">11</span>: monitorenter                      <span class="comment">// monitorenter(lock引用)</span></span><br><span class="line">      <span class="number">12</span>: getstatic     #<span class="number">3</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">15</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String ok</span></span><br><span class="line">      <span class="number">17</span>: invokevirtual #<span class="number">5</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">20</span>: aload_2                           <span class="comment">// &lt;- slot 2(lock引用)</span></span><br><span class="line">      <span class="number">21</span>: monitorexit                       <span class="comment">// monitorexit(lock引用)</span></span><br><span class="line">      <span class="number">22</span>: goto          <span class="number">30</span></span><br><span class="line">      <span class="number">25</span>: astore_3                          <span class="comment">// any -&gt; slot 3</span></span><br><span class="line">      <span class="number">26</span>: aload_2                           <span class="comment">// &lt;- slot 2(lock引用)</span></span><br><span class="line">      <span class="number">27</span>: monitorexit                       <span class="comment">// monitorexit(lock引用)</span></span><br><span class="line">      <span class="number">28</span>: aload_3</span><br><span class="line">      <span class="number">29</span>: athrow</span><br><span class="line">      <span class="number">30</span>: <span class="keyword">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">          <span class="number">12</span>    <span class="number">22</span>    <span class="number">25</span>   any</span><br><span class="line">          <span class="number">25</span>    <span class="number">28</span>    <span class="number">25</span>   any</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">6</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">12</span></span><br><span class="line">      line <span class="number">8</span>: <span class="number">20</span></span><br><span class="line">      line <span class="number">9</span>: <span class="number">30</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">31</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">          <span class="number">8</span>      <span class="number">23</span>     <span class="number">1</span>  lock   Ljava/lang/Object;</span><br></pre></td></tr></table></figure><h2 id="编译期处理"><a href="#编译期处理" class="headerlink" title="编译期处理"></a>编译期处理</h2><blockquote><p>所谓的语法糖，其实就是指 java 编译器把 java 源码编译为 class 字节码的过程中，自动生成和转换的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利</p></blockquote><h3 id="默认构造器"><a href="#默认构造器" class="headerlink" title="默认构造器"></a>默认构造器</h3><ul><li>如果一个类没有声明任何构造函数，Java 编译器会自动为该类生成一个无参构造函数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy01</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译成class后的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个无参构造是编译器帮助我们加上的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 即调用父类 Object 的无参构造方法，即调用 java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h3><p>这个特性是JDK5开始加入的，代码片段1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码在JDK5之前是无法编译通过的，必须改写为代码片段2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x.intValue(); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然之前版本的代码太麻烦了，需要在基本类型和包装类型之间来回转换（尤其是集合类中操作的都是包装类型），因此这些转换的事情在 JDK5以后都由编译器在编译阶段完成。即代码片段1 都会在编译阶段被转换为代码片段2。</p><h3 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h3><p>泛型也是在JDK 5 开始加入的特性，但 java 在编译泛型代码后会执行 型除的动作，即泛型信息在编译为字节码之后就丢失了，实际的类型都当做了 object 类型来处理:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy3</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(<span class="number">10</span>); <span class="comment">// 实际调用的是    List.add(Object e)</span></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// 实际调用的是    Object obj = List.get(int index); </span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以下是<strong>泛型擦除的一些重要原因和意义</strong>：</p></blockquote><ol><li>向后兼容性：泛型在Java 5及以后的版本引入，但为了保持与之前的版本的兼容性，Java编译器采用了泛型擦除。这意味着你可以编写使用泛型的代码，但在编译后，泛型信息将被擦除，以便在旧版本的Java中运行。</li><li>减少冗余代码：泛型擦除可以减少编译后的字节码文件的大小。因为泛型信息在运行时被擦除，所以编译器不会为每个不同的泛型类型生成新的类文件，从而减小了生成的字节码的体积。</li><li>避免类型相关的错误：泛型擦除确保在运行时不会引入类型相关的错误。这是因为在泛型擦除之后，编译器会插入必要的强制类型转换，以确保类型安全性。这有助于减少在运行时出现ClassCastException等类型错误的可能性。</li><li>可以实现通用性：泛型擦除使得可以编写通用的泛型代码，这些代码不依赖于具体的泛型类型。这有助于编写更通用、可重用的代码库，例如集合框架。</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数也是JDK5加入的新特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(String... args)</span> &#123; </span><br><span class="line">       String[] array = args; <span class="comment">// 直接赋值 </span></span><br><span class="line">       System.out.println(array);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       foo(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变参数   String… args 其实是一个   String[] args ，从代码中的赋值语句中就可以看出来。<br>同样 java 编译器会在编译期间将上述代码变换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy4</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       String[] array = args; <span class="comment">// 直接赋值 </span></span><br><span class="line">       System.out.println(array);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       foo(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果调用foo()时没有提供任何参数，那么则等价为foo(new String)，创建了一个空的数组，而不是传一个null进去</p></blockquote><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><ol><li>数组的循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 数组赋初值的简化写法也是语法糖哦 </span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> e : array) &#123;</span><br><span class="line">           System.out.println(e); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_1</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Candy5_1</span><span class="params">()</span> &#123; </span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">       <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; </span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; ++i) &#123; </span><br><span class="line">           <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> array[i];</span><br><span class="line">           System.out.println(e); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>集合的循环</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>); </span><br><span class="line">       <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">           System.out.println(i); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际被编译器转换为对迭代器的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy5_2</span> &#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Candy5_2</span><span class="params">()</span> &#123; </span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); </span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> (Integer)iter.next(); </span><br><span class="line">           System.out.println(e);</span><br><span class="line">     &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-字符串"><a href="#switch-字符串" class="headerlink" title="switch 字符串"></a>switch 字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy6_1</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;h&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;world&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;w&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy07</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (str.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">99162322</span>:                  <span class="comment">// hello 的 hashCode</span></span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">&quot;hello&quot;</span>)) &#123;</span><br><span class="line">                    x = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">113318802</span>:                 <span class="comment">// world 的 hashCode</span></span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                    x = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，执行了两遍 switch，第一遍是根据字符串的 hashCode 和 equals 将字符串的转换为相应<br>byte 类型，第二遍才是利用 byte 执行进行比较。</li><li>为什么第一遍时必须既比较 hashCode，又利用 equals 比较呢？hashCode 是为了提高效率，减少可<br>能的比较；而 equals 是为了防止 hashCode 冲突，例如 BM 和 C. 这两个字符串的hashCode值都是<br>2123 ，如果有如下代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy6_2</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;BM&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;h&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;C.&quot;</span>: &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;w&quot;</span>); </span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译器转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">choose</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (str.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2123</span>:                  <span class="comment">// hashCode 值可能相同，需要进一步用 equals 比较</span></span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">&quot;C.&quot;</span>)) &#123;</span><br><span class="line">                x = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">&quot;BM&quot;</span>)) &#123;</span><br><span class="line">                x = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;w&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-枚举"><a href="#switch-枚举" class="headerlink" title="switch 枚举"></a>switch 枚举</h3><p>switch 枚举的例子，原始代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">   MALE, FEMALE </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy7</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Sex sex)</span> &#123; </span><br><span class="line">       <span class="keyword">switch</span> (sex) &#123;</span><br><span class="line">           <span class="keyword">case</span> MALE:</span><br><span class="line">               System.out.println(<span class="string">&quot;男&quot;</span>); <span class="keyword">break</span>; </span><br><span class="line">           <span class="keyword">case</span> FEMALE:</span><br><span class="line">               System.out.println(<span class="string">&quot;女&quot;</span>); <span class="keyword">break</span>; </span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy08</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个合成类（仅 jvm 使用，对我们不可见）</span></span><br><span class="line"><span class="comment">     * 用来映射枚举的 ordinal 与数组元素的关系</span></span><br><span class="line"><span class="comment">     * 枚举的 ordinal 表示枚举对象的序号，从 0 开始</span></span><br><span class="line"><span class="comment">     * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">$MAP</span> &#123;</span><br><span class="line">        <span class="comment">// 数组大小即为枚举元素个数，里面存储case用来对比的数字</span></span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            map[Sex.MALE.ordinal()] = <span class="number">1</span>;</span><br><span class="line">            map[Sex.FEMALE.ordinal()] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(Sex sex)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> $MAP.map[sex.ordinal()];</span><br><span class="line">        <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ordinal()是获取枚举编号的方法</p></blockquote><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    MALE, FEMALE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sex</span> <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;Sex&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex MALE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex FEMALE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex[] $VALUES;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        MALE = <span class="keyword">new</span> <span class="title class_">Sex</span>(<span class="string">&quot;MALE&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        FEMALE = <span class="keyword">new</span> <span class="title class_">Sex</span>(<span class="string">&quot;FEMALE&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        $VALUES = <span class="keyword">new</span> <span class="title class_">Sex</span>[]&#123;MALE, FEMALE&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sole constructor. Programmers cannot invoke this constructor.</span></span><br><span class="line"><span class="comment">     * It is for use by code emitted by the compiler in response to</span></span><br><span class="line"><span class="comment">     * enum type declarations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name    - The name of this enum constant, which is the identifier</span></span><br><span class="line"><span class="comment">     *                used to declare it.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordinal - The ordinal of this enumeration constant (its position</span></span><br><span class="line"><span class="comment">     *                in the enum declaration, where the initial constant is</span></span><br><span class="line"><span class="comment">     *                assigned</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Sex</span><span class="params">(String name, <span class="type">int</span> ordinal)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, ordinal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Sex[] values() &#123;</span><br><span class="line">        <span class="keyword">return</span> $VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Sex <span class="title function_">valueOf</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Enum.valueOf(Sex.class, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Sex</code>被声明为一个<code>final</code>类，它继承了<code>Enum&lt;Sex&gt;</code>类，Enum是Java中定义枚举的抽象类。MALE和FEMALE是Sex类的两个枚举值，它们被定义为静态常量。</li><li>除此之外，还有一个私有的、<code>final</code>的<code>Sex</code>类型数组<code>$VALUES</code>，它用于存储Sex类的所有枚举值。在类的静态块中，<code>$VALUES</code>数组被初始化为一个包含<code>MALE</code>和<code>FEMALE</code>的数组。</li><li>构造函数<code>Sex(String name, int ordinal)</code>是私有的，这意味着无法在类的外部使用这个构造函数来创建<code>Sex</code>的实例。只有Java编译器生成的代码才能调用这个构造函数来创建Sex的实例。</li><li><code>values()</code>和<code>valueOf(String name)</code>是从Enum类继承的两个静态方法。<code>values()</code>方法返回一个包含Sex类所有枚举值的数组，<code>valueOf(String name)</code>方法返回指定名称的枚举值。</li><li>当我们使用MALE或者FEMALE时，其实底层调用的是<code>Enum.valueOf(Sex.class, &quot;MALE&quot;)</code>和<code>Enum.valueOf(Sex.class, &quot;FEMALE&quot;)</code></li></ul><h3 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h3><p>]DK 7 开始新增了对需要关闭的资源处理的特殊语法 try-with-resources：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源变量    = 创建资源对象)&#123; </span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span>( ) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中资源对象需要实现 Autocloseable 接口，例如 Inputstream、outputstream、Connection、statement、Resultset 等接口都实现了 Autocloseable，使用 try-with-resources 可以不用写 finally 语句块，编译器会帮助生成关闭资源代码，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy9</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\1.txt&quot;</span>)) &#123; </span><br><span class="line">           System.out.println(is);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123; </span><br><span class="line">           e.printStackTrace(); </span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Candy09</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:\\tmp.txt&quot;</span>);</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(is);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e1) &#123;</span><br><span class="line">                <span class="comment">// t 是我们代码出现的异常</span></span><br><span class="line">                t = e1;</span><br><span class="line">                <span class="keyword">throw</span> e1;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 判断了资源不为空</span></span><br><span class="line">                <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果我们代码有异常</span></span><br><span class="line">                    <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            is.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable e2) &#123;</span><br><span class="line">                            <span class="comment">// 如果 close 出现异常，作为被压制异常添加</span></span><br><span class="line">                            t.addSuppressed(e2);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果我们代码没有异常，close 出现的异常就是最后 catch 块中的 e</span></span><br><span class="line">                        is.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要设计一个 addsuppressed(Throwable e) (添加被压制异常) 的方法呢? </p><p>是为了防止异常信息的丢失(想想 try-with-resources 生成的 fianlly 中如果抛出了异常) :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">MyResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyResource</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyResource</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;close 异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下，两个异常信息都不会丢失：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">    at com.demo.Test.main(Test.java:<span class="number">6</span>)</span><br><span class="line">    Suppressed: java.lang.Exception: close 异常</span><br><span class="line">        at com.demo.MyResource.close(Test.java:<span class="number">14</span>)</span><br><span class="line">        at com.demo.Test.main(Test.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="方法重写时的桥接方法"><a href="#方法重写时的桥接方法" class="headerlink" title="方法重写时的桥接方法"></a>方法重写时的桥接方法</h3><p>方法重写时，对返回值分两种情况</p><ol><li>父类与子类的返回值完全一致</li><li>子类返回值可以是父类返回值的子类（比较绕口，直接看下面的例子来理解）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Number <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 父类A方法的返回值是Number类型，子类B方法的返回值是Integer类型，Integer是Number的子类</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么对于子类，编译器会做如下处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法才是真正重写了父类 public Number m() 方法</span></span><br><span class="line">    <span class="keyword">public</span> synthetic bridge Number <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 public Integer m()</span></span><br><span class="line">        <span class="keyword">return</span> m();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的桥接方法比较特殊，仅对Java虚拟机可见，并且与原来的public Integer m()没有命名冲突</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转换后代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 额外生成的类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Candy10$1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    Candy10$<span class="number">1</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Candy10$1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于匿名内部类，它的底层实现是类似于普通内部类的，只不过没有命名而已。在生成匿名内部类的class文件时，Java编译器会自动为该类生成一个类名，在原始类名上加后缀<code>$1</code>，如果有多个匿名内部类，则<code>$2</code>、<code>$3</code>以此类推</li><li>引用局部变量的匿名内部类，原始Java代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span>  <span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ok&quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>转换后代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 额外生成的类</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Candy11$1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> val$x;</span><br><span class="line">    Candy11$<span class="number">1</span>(<span class="type">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val$x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok:&quot;</span> + <span class="built_in">this</span>.val$x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Candy11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Candy11$1</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：这也解释了为什么匿名内部类引用局部变量时，局部变量必须为final的<ul><li>因为在创建<code>Candy$11</code>对象时，将x的值赋给了<code>val$x</code>属性，所以x不应该再发生变化了</li><li>如果变化，那么<code>val$x</code>属性没有机会再跟着一起变化</li></ul></li></ul><h2 id="类加载阶段"><a href="#类加载阶段" class="headerlink" title="类加载阶段"></a>类加载阶段</h2><p>文章参考自：<a href="https://javaguide.cn/java/jvm/class-loading-process.html">https://javaguide.cn/java/jvm/class-loading-process.html</a></p><p><img src="/../assets/JVM/image-20231014215015858.png" alt="一个类的完整生命周期"></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>将类的字节码载入方法区中，内部采用C++的instanceKlass描述Java类，它的重要field有</p><ol><li>_java_mirror：Java的类镜像，例如对String来说，就是String.class，作用是把klass暴露给Java使用</li><li>_super：父类</li><li>_fields：成员变量</li><li>_methods：方法</li><li>_constants：常量池</li><li>_class_loader：类加载器</li><li>_vtable：需方发表</li><li>_itable：接口方法表</li></ol><ul><li>如果这个类还有父类没有加载，先加载父类</li><li>加载和链接可能是交替运行的</li></ul><blockquote><p>instanceKlass这样的<code>元数据</code>是存储在方法区（1.8后是在元空间内），但_java_mirror是存储在堆中</p></blockquote><p><img src="/../assets/JVM/image-20231018144014687.png" alt="image-20231018144014687"></p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul><li>验证类是否符合JVM规范，安全性检查</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>为static变量分配空间，设置默认值</p><ul><li>static变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成</li><li>如果static遍历是final的基本类型以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成</li><li>如果static遍历是final的，但属于引用类型，那么赋值也会在初始化阶段完成</li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>将常量池中的符号引用解析为直接引用</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化即调用<code>&lt;cinit&gt;()V</code> 方法，虚拟机ui保证这个类的<code>构造方法</code>的线程安全</p><ul><li><p>发生的时机：总的来说，类的初始化是懒惰的</p><ol><li><p>main方法所在的类，总会被首先初始化</p></li><li><p>首次访问这个类的静态变量或静态方法时，会进行初始化</p></li><li><p>子类初始化，如果父类还没未初始化，则父类也会进行初始化</p></li><li><p>默认的Class.forName会导致初始化</p></li><li><p>new对象会导致初始化</p></li></ol></li><li><p>不会导致类初始化的情况</p><ol><li>访问类的 static final 静态常量（基本类型和字符串） 不会触发初始化</li><li>调用类对象.class不会触发初始化</li><li>类加载器的loadClass方法不会触发初始化</li><li>Class.forName的参数2为false时(initalize &#x3D; false)，不会触发初始化</li></ol></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>赋予了 Java 类可以被动态加载到 JVM 中并执行的能力</strong></p><p>简单来说，<strong>类加载器的主要作用就是加载 Java 类的字节码（ <code>.class</code> 文件）到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）。</strong></p><h3 id="类加载器加载规则"><a href="#类加载器加载规则" class="headerlink" title="类加载器加载规则"></a>类加载器加载规则</h3><p>JVM 启动的时候，<strong>并不会一次性加载所有的类，而是根据需要去动态加载</strong>。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。</p><p>对于已经加载的类会被放在 <code>ClassLoader</code> 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>以<code>JDK 8</code>为例</li></ul><table><thead><tr><th align="center">名称</th><th align="center">中文名</th><th align="center">加载哪的类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Bootstrap ClassLoader</td><td align="center">启动类加载器</td><td align="center">JAVA_HOME&#x2F;jre&#x2F;lib</td><td align="center">无法直接访问</td></tr><tr><td align="center">Extension ClassLoader</td><td align="center">扩展类加载器</td><td align="center">JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</td><td align="center">上级为 Bootstrap，显示为 null</td></tr><tr><td align="center">Application ClassLoader</td><td align="center">应用程序类加载器</td><td align="center">classpath</td><td align="center">上级为 Extension</td></tr><tr><td align="center">自定义类加载器</td><td align="center"></td><td align="center">自定义 上级为</td><td align="center">Application</td></tr></tbody></table><ul><li>当JVM需要加载一个类时，它会首先委托父类加载器去加载这个类，如果父类加载器无法加载这个类，就会由当前类加载器来加载。如果所有的父类加载器都无法加载这个类，那么就会抛出ClassNotFoundException异常。</li></ul><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a><strong>启动类加载器</strong></h3><ul><li><p><code>Bootstrap ClassLoader</code>是所有类加载器中最早的一个，负责加载JRE&#x2F;lib下的核心类库，如java.lang.Object、java.lang.String等。</p></li><li><p>输出的结果是null，因为引导类加载器是由JVM的实现者用C&#x2F;C++等语言编写的，而不是由Java编写的。在Java虚拟机的实现中，引导类加载器不是Java对象，也没有对应的Java类，因此它的ClassLoader属性为null。</p></li></ul><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><h4 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h4><ul><li>所谓双亲委派机制，就是指调用类加载器的loadClass方法时，查找类的规则</li><li>从下往上询问，从上往下加载</li><li><code>ClassLoader</code> 类使用委托模型来搜索类和资源。</li><li>双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。</li><li><code>ClassLoader</code> 实例会在试图亲自查找类或资源之前，将搜索类或资源的任务委托给其父类加载器。</li></ul><p><img src="/../assets/JVM/image-20231018154518908.png" alt="image-20231018154518908"></p><p>双亲委派源码精简化后的主要逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果类没有被加载，则委托给父ClassLoader加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// 如果父ClassLoader加载失败，则在自身查找类</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔴🟡🟢简单总结一下双亲委派模型的执行流程：</p><ul><li>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载（每个父类加载器都会走一遍这个流程）。</li><li>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</li><li>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</li><li>如果子类加载器也无法加载这个类，那么它会抛出一个 <code>ClassNotFoundException</code> 异常。</li></ul><h4 id="🌈-拓展一下："><a href="#🌈-拓展一下：" class="headerlink" title="🌈 拓展一下："></a>🌈 拓展一下：</h4><p><strong>JVM 判定两个 Java 类是否相同的具体规则</strong>：JVM 不仅要看类的全名是否相同，还要看加载此类的类加载器是否一样。只有两者都相同的情况，才认为两个类是相同的。即使两个类来源于同一个 <code>Class</code> 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相同。</p><h4 id="双亲委派模型的好处"><a href="#双亲委派模型的好处" class="headerlink" title="双亲委派模型的好处"></a>双亲委派模型的好处</h4><p>双亲委派模型保证了 Java 程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。</p><p>如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现两个不同的 <code>Object</code> 类。双亲委派模型可以保证加载的是 JRE 里的那个 <code>Object</code> 类，而不是你写的 <code>Object</code> 类。这是因为 <code>AppClassLoader</code> 在加载你的 <code>Object</code> 类时，会委托给 <code>ExtClassLoader</code> 去加载，而 <code>ExtClassLoader</code> 又会委托给 <code>BootstrapClassLoader</code>，<code>BootstrapClassLoader</code> 发现自己已经加载过了 <code>Object</code> 类，会直接返回，不会去加载你写的 <code>Object</code> 类。</p><h3 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h3><p>过程就是：启动类加载器加载DriverManager，DriverManager代码里调用了线程上下文类加载器，这个加载器默认就是使用应用程序类加载器加载类，通过应用程序类加载器加载jdbc驱动</p><p>具体参考<a href="https://javaguide.cn/java/jvm/classloader.html">https://javaguide.cn/java/jvm/classloader.html</a></p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p>暂时不学这个了…….待补充</p><p>具体参考<a href="https://javaguide.cn/java/jvm/classloader.html">https://javaguide.cn/java/jvm/classloader.html</a></p><h2 id="运行期优化"><a href="#运行期优化" class="headerlink" title="运行期优化"></a>运行期优化</h2><p>没听懂………….（后续待补充了）</p><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><p>简单的说，JMM 定义了一套在多线程读写共享数据时（成员变量、数组）时，对数据的可见性、有序<br>性、和原子性的规则和保障</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis相关知识</title>
      <link href="/2023/08/03/Study-Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/08/03/Study-Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>文章参考自：</p><p><a href="https://xiaolincoding.com/redis/">小林coding</a></p><p><a href="https://www.bilibili.com/video/BV1Rv41177Af">尚硅谷Redis6教程</a></p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t">黑马程序员Redis入门到实战教程</a></p><p><a href="https://zhangc233.github.io/2021/05/02/Redis/">https://zhangc233.github.io/2021/05/02/Redis/</a></p><h1 id="Redis基础知识"><a href="#Redis基础知识" class="headerlink" title="Redis基础知识"></a>Redis基础知识</h1><h2 id="为什么使用Redis"><a href="#为什么使用Redis" class="headerlink" title="为什么使用Redis"></a>为什么使用Redis</h2><p>当过多用户同时访问数据库时压力会很大，这样会导致在访问数据的时候速度很慢，使得用户在体验的时候响应很慢从而降低了用户体验，而<code>Redis</code>这种无关系型数据库是基于内存的，可以较快去进行访问数据，但毕竟内存是有限的，所以并不是因为它访问快而全部使用这种<code>NoSQL</code>数据库，它与<code>MySQL</code><mark>这种关系型数据库之间是相互合作的</mark>，共同完成任务的。</p><h2 id="Redis-和-Memcached-有什么区别？"><a href="#Redis-和-Memcached-有什么区别？" class="headerlink" title="Redis 和 Memcached 有什么区别？"></a>Redis 和 Memcached 有什么区别？</h2><p>很多人都说用 Redis 作为缓存，但是 Memcached 也是基于内存的数据库，为什么不选择它作为缓存呢？要解答这个问题，我们就要弄清楚 Redis 和 Memcached 的区别。 Redis 与 Memcached <strong>共同点</strong>：</p><ol><li>都是基于内存的数据库，一般都用来当做缓存使用。</li><li>都有过期策略。</li><li>两者的性能都非常高。</li></ol><p>Redis 与 Memcached <strong>区别</strong>：</p><ul><li>Redis 支持的数据类型更丰富（String、Hash、List、Set、ZSet），而 Memcached 只支持最简单的 key-value 数据类型；</li><li>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用，而 Memcached 没有持久化功能，数据全部存在内存之中，Memcached 重启或者挂掉后，数据就没了；</li><li>Redis 原生支持集群模式，Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；</li><li>Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持；</li></ul><hr><h2 id="为什么用Redis做MySQL的缓存？"><a href="#为什么用Redis做MySQL的缓存？" class="headerlink" title="为什么用Redis做MySQL的缓存？"></a>为什么用Redis做MySQL的缓存？</h2><p>Redis 具备「<strong>高性能</strong>」和「<strong>高并发</strong>」两种特性</p><h1 id="Redis网络模型"><a href="#Redis网络模型" class="headerlink" title="Redis网络模型"></a>Redis网络模型</h1><h2 id="五种IO模型"><a href="#五种IO模型" class="headerlink" title="五种IO模型"></a>五种IO模型</h2><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p>应用程序想要去读取数据，他是无法直接去读取磁盘数据的，他需要先到内核里边去等待内核操作硬件拿到数据，这个过程就是1，是需要等待的，等到内核从磁盘上把数据加载出来之后，再把这个数据写给用户的缓存区，这个过程是2，如果是阻塞IO，那么整个过程中，用户从发起读请求开始，一直到读取到数据，都是一个阻塞状态。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653897115346.png" alt="1653897115346"></p><p>具体流程如下图：</p><p>用户去读取数据时，会去先发起recvform一个命令，去尝试从内核上加载数据，如果内核没有数据，那么用户就会等待，此时内核会去从硬件上读取数据，内核读取数据之后，会把数据拷贝到用户态，并且返回ok，整个过程，都是阻塞等待的，这就是阻塞IO</p><p>总结如下：</p><p>顾名思义，阻塞IO就是两个阶段都必须阻塞等待：</p><p><strong>阶段一：</strong></p><ul><li>用户进程尝试读取数据（比如网卡数据）</li><li>此时数据尚未到达，内核需要等待数据</li><li>此时用户进程也处于阻塞状态</li></ul><p>阶段二：</p><ul><li>数据到达并拷贝到内核缓冲区，代表已就绪</li><li>将内核数据拷贝到用户缓冲区</li><li>拷贝过程中，用户进程依然阻塞等待</li><li>拷贝完成，用户进程解除阻塞，处理数据</li></ul><p>可以看到，阻塞IO模型中，用户进程在两个阶段都是阻塞状态。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653897270074.png" alt="1653897270074"></p><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p>可以看到，非阻塞IO模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态。虽然是非阻塞，但性能并没有得到提高。而且忙等机制会导致CPU空转，CPU使用率暴增。</p><blockquote><p>跟阻塞IO相比，就是第一阶段尝试读数据时，前者是等待，后者是<mark>一直询问</mark></p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653897490116.png" alt="1653897490116"></p><h3 id="⭐⭐⭐多路IO复用"><a href="#⭐⭐⭐多路IO复用" class="headerlink" title="⭐⭐⭐多路IO复用"></a>⭐⭐⭐多路IO复用</h3><p>解决多路复用模型是<mark>如何知道内核数据是否就绪</mark>的问题了</p><p>这个问题的解决依赖于提出的：</p><p><strong>文件描述符（File Descriptor）</strong>：简称FD，是一个从0 开始的无符号整数，用来关联Linux中的一个文件。在Linux中，一切皆文件，例如常规文件、视频、硬件设备等，当然也包括网络套接字（Socket）。</p><p>通过FD，我们的网络模型可以利用一个线程监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。</p><p>阶段一：</p><ul><li>用户进程调用select，指定要监听的FD集合</li><li>核监听FD对应的多个socket</li><li>任意一个或多个socket数据就绪则返回readable</li><li>此过程中用户进程阻塞</li></ul><p>阶段二：</p><ul><li>用户进程找到就绪的socket</li><li>依次调用recvfrom读取数据</li><li>内核将数据拷贝到用户空间</li><li>用户进程处理数据</li></ul><p>当用户去读取数据的时候，不再去直接调用recvfrom了，而是调用select的函数，select函数会将需要监听的数据交给内核，由内核去检查这些数据是否就绪了，如果说这个数据就绪了，就会通知应用程序数据就绪，然后来读取数据，再从内核中把数据拷贝给用户态，完成数据处理，如果N多个FD一个都没处理完，此时就进行等待。</p><p>用IO复用模式，可以确保去读数据的时候，数据是一定存在的，他的效率比原来的阻塞IO和非阻塞IO性能都要高</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653898691736.png" alt="1653898691736"></p><p>IO多路复用是利用单个线程来同时监听多个FD，并在某个FD可读、可写时得到通知，从而避免无效的等待，充分利用CPU资源。不过监听FD的方式、通知的方式又有多种实现，常见的有：</p><ul><li>select</li><li>poll</li><li>epoll</li></ul><p>其中select和pool相当于是当被监听的数据准备好之后，他会把你监听的FD整个数据都发给你，你需要到整个FD中去找，哪些是处理好了的，需要通过遍历的方式，所以性能也并不是那么好</p><p>而epoll，则相当于内核准备好了之后，他会把准备好的数据，直接发给你，咱们就省去了遍历的动作。</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>具体流程：</p><p>简单说，就是我们把需要处理的<mark>数据封装成FD</mark>，然后<mark>在用户态时创建一个fd的集合</mark>（这个集合的大小是要监听的那个FD的最大值+1，但是大小整体是有限制的 ），这个集合的长度大小是有限制的，同时在这个集合中，标明出来我们要控制哪些数据，</p><p>比如要监听的数据，是1,2,5三个数据，此时会执行select函数，然后<mark>将整个fd发给内核态</mark>，内核态会去遍历用户态传递过来的数据，如果发现这里边都数据都没有就绪，就休眠，直到有数据准备好时，就会被唤醒，唤醒之后，再次遍历一遍，看看谁准备好了，然后再将处理掉没有准备好的数据，最后再<mark>将这个FD集合写回到用户态</mark>中去，此时用户态就知道了，奥，有人准备好了，但是对于用户态而言，并不知道谁处理好了，所以<mark>用户态也需要去进行遍历</mark>，然后找到对应准备好数据的节点，再去发起读请求</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231106173311672.png" alt="select模式"></p><p>select模式存在三个问题：</p><ol><li><p>需要将<mark>整个</mark>fd_set从用户空间拷贝到内核空间，select结束还要再次拷贝回用户空间</p></li><li><p>select无法得知具体是哪个fd就绪，需要<mark>遍历整个</mark>fd_set</p></li><li><p>fd_set监听的fd<mark>数量不能超过</mark>1024</p></li></ol><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p><strong>与select对比：</strong></p><ul><li>select模式中的fd_set大小固定为1024，而pollfd在内核中<mark>采用链表</mark>，理论上无上限</li><li>监听FD越多，每次遍历消耗时间也越久，性能反而会下降，所以其实是有上限的</li></ul><h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>epoll模式是对select和poll的改进，它提供了三个函数：</p><p>第一个是：<code>eventpoll</code>的函数，他内部包含两个结构：</p><ol><li><p>红黑树（rb_root）-&gt; 记录的事要监听的FD</p></li><li><p>链表（list_head）-&gt;一个链表，记录的是就绪的FD</p></li></ol><p>第二个是：紧接着调用<code>epoll_ctl</code>操作，将要监听的数据添加到红黑树上去，并且给每个fd设置一个监听函数，这个函数会在fd数据就绪时触发，就是准备好了，现在就把fd把数据添加到list_head中去</p><p>第三个是：调用<code>epoll_wait</code>函数（监听函数）</p><p>就去等待，在用户态创建一个空的events数组，当就绪之后，我们的回调函数会把数据添加到list_head中去，当调用这个函数的时候，会去检查list_head，当然这个过程需要参考配置的等待时间，可以等一定时间，也可以一直等， 如果在此过程中，检查到了list_head中有数据会将数据添加到链表中，此时将数据放入到events数组中，并且返回对应的操作的数量，用户态的此时收到响应后，从events中拿到对应准备好的数据的节点，再去调用方法去拿数据。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231106174435434.png" alt="epoll模式"></p><p>优势：<em>（对应的是select的三个缺点）</em></p><ol><li><p>减少了FD的拷贝，select和poll都是每次都要重新把全部的FD再拷贝到内核态，而epoll每次只需要拷贝新来的FD到内核态中</p></li><li><p>从内核态拷贝FD到用户态时，不再是把全部的FD拷贝到用户态，而是只把就绪链表上的FD拷贝回内核态</p></li><li><p>可以尽可能多地监听FD的数量，因为红黑树增加再多结点也不会影响其性能</p></li></ol><h4 id="三种模式的对比与总结"><a href="#三种模式的对比与总结" class="headerlink" title="三种模式的对比与总结"></a>三种模式的对比与总结</h4><p>select模式存在的三个问题：</p><ul><li><p>能监听的FD最大不超过1024</p></li><li><p>每次select都需要把所有要监听的FD都拷贝到内核空间</p></li><li><p>每次都要遍历所有FD来判断就绪状态</p></li></ul><p>poll模式的问题：</p><ul><li>poll利用链表解决了select中监听FD上限的问题，但依然要遍历所有FD，如果监听较多，性能会下降</li></ul><p>epoll模式中如何解决这些问题的？</p><ul><li><p>基于epoll实例中的红黑树保存要监听的FD，理论上无上限，而且增删改查效率都非常高</p></li><li><p>每个FD只需要执行一次epoll_ctl添加到红黑树，以后每次epol_wait无需传递任何参数，无需重复拷贝FD到内核空间</p></li><li><p>利用ep_poll_callback机制来监听FD状态，无需遍历所有FD，因此性能不会随监听的FD数量增多而下降</p></li></ul><h4 id="事件通知机制"><a href="#事件通知机制" class="headerlink" title="事件通知机制"></a>事件通知机制</h4><p>当FD有数据可读时，我们调用epoll_wait（或者select、poll）可以得到通知。但是事件通知的模式有两种：</p><ul><li>LevelTriggered：简称LT，也叫做水平触发。只要某个FD中有数据可读，每次调用epoll_wait都会得到通知。</li><li>EdgeTriggered：简称ET，也叫做边沿触发。只有在某个FD有状态变化时，调用epoll_wait才会被通知。</li></ul><p>🔴🟢🟡结论：</p><ul><li><p>LT：事件通知频率较高，会有<mark>重复通知</mark>，影响性能</p></li><li><p>ET：<mark>仅通知一次</mark>，效率高。可以基于非阻塞IO循环读取解决数据读取不完整问题</p></li></ul><p>select和poll仅支持LT模式，epoll可以自由选择LT和ET两种模式</p><h4 id="基于epoll的服务器端流程"><a href="#基于epoll的服务器端流程" class="headerlink" title="基于epoll的服务器端流程"></a>基于epoll的服务器端流程</h4><p>我们来梳理一下这张图</p><p>服务器启动以后，服务端会去调用epoll_create，创建一个epoll实例，epoll实例中包含两个数据</p><p>1、红黑树（为空）：rb_root 用来去记录需要被监听的FD</p><p>2、链表（为空）：list_head，用来存放已经就绪的FD</p><p>创建好了之后，会去调用epoll_ctl函数，此函数会将需要监听的数据添加到rb_root中去，并且对当前这些存在于红黑树的节点设置回调函数，当这些被监听的数据一旦准备完成，就会被调用，而调用的结果就是将红黑树的fd添加到list_head中去(但是此时并没有完成)</p><p>3、当第二步完成后，就会调用epoll_wait函数，这个函数会去校验是否有数据准备完毕（因为数据一旦准备就绪，就会被回调函数添加到list_head中），在等待了一段时间后(可以进行配置)，如果等够了超时时间，则返回没有数据，如果有，则进一步判断当前是什么事件，如果是建立连接时间，则调用accept() 接受客户端socket，拿到建立连接的socket，然后建立起来连接，如果是其他事件，则把数据进行写出</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231106145531092.png" alt="image-20231106145531092"></p><p>⭐⭐⭐此处回看第171集：<a href="https://www.bilibili.com/video/BV1cr4y1671t?p=171&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">https://www.bilibili.com/video/BV1cr4y1671t?p=171&amp;vd_source=fa7ba4ae353f08f1d08d1bb24528e96c</a></p><h3 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h3><p>信号驱动IO是与内核建立SIGIO的信号关联并设置回调，<mark>当内核有FD就绪时，会发出SIGIO信号通知用户</mark>，期间用户应用可以执行其它业务，无需阻塞等待。</p><p>阶段一：</p><ul><li>用户进程调用sigaction，注册信号处理函数</li><li>内核返回成功，开始监听FD</li><li>用户进程不阻塞等待，可以执行其它业务</li><li>当内核数据就绪后，回调用户进程的SIGIO处理函数</li></ul><p>阶段二：</p><ul><li>收到SIGIO回调信号</li><li>调用recvfrom，读取</li><li>内核将数据拷贝到用户空间</li><li>用户进程处理数据</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653911776583.png" alt="1653911776583"></p><p>当有<mark>大量IO操作</mark>时，信号较多，SIGIO处理函数<mark>不能及时处理</mark>可能导致信号队列溢出，而且内核空间与用户空间的频繁信号交互性能也较低。</p><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><p>这种方式，不仅仅是用户态在试图读取数据后，不阻塞，而且当内核的数据准备完成后，也不会阻塞</p><p>他会由内核将所有数据处理完成后，由内核将数据写入到用户态中，然后才算完成，所以性能极高，不会有任何阻塞，全部都由内核完成，可以看到，异步IO模型中，用户进程在两个阶段都是非阻塞状态。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653911877542.png" alt="1653911877542"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>最后用一幅图，来说明他们之间的区别</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/1653912219712.png" alt="1653912219712"></p><h2 id="小林coding面试题"><a href="#小林coding面试题" class="headerlink" title="小林coding面试题"></a>小林coding面试题</h2><h3 id="Redis-是单线程吗？"><a href="#Redis-是单线程吗？" class="headerlink" title="Redis 是单线程吗？"></a>Redis 是单线程吗？</h3><p>如果仅仅聊Redis的核心业务部分（命令处理），答案是单线程</p><p>如果是聊整个Redis，那么答案就是多线程</p><p><strong>Redis 单线程指的是「接收客户端请求-&gt;解析请求 -&gt;进行数据读写等操作-&gt;发送数据给客户端」这个过程是由一个线程（主线程）来完成的</strong>，这也是我们常说 Redis 是单线程的原因。</p><p>但是，<strong>Redis 程序并不是单线程的</strong>，Redis 在启动的时候，是会<strong>启动后台线程</strong>（BIO）的：</p><ul><li><strong>Redis 在 2.6 版本</strong>，会启动 2 个后台线程，分别处理<mark>关闭文件、AOF 刷盘</mark>这两个任务；</li><li><strong>Redis 在 4.0 版本之后</strong>，新增了一个新的后台线程，用来<mark>异步释放 Redis 内存</mark>，也就是 lazyfree 线程。例如执行 unlink key &#x2F; flushdb async &#x2F; flushall async 等命令，会把这些删除操作交给后台线程来执行，好处是不会导致 Redis 主线程卡顿。因此，当我们要删除一个大 key 的时候，不要使用 del 命令删除，因为 del 是在主线程处理的，这样会导致 Redis 主线程卡顿，因此我们应该使用 unlink 命令来异步删除大key。</li></ul><p>之所以 Redis 为「关闭文件、AOF 刷盘、释放内存」这些任务创建单独的线程来处理，是因为这些任务的操作都是很<mark>耗时</mark>的，如果把这些任务都放在主线程来处理，那么 Redis 主线程就很容易发生阻塞，这样就无法处理后续的请求了。</p><p>后台线程相当于一个消费者，生产者把耗时任务丢到任务队列中，消费者（BIO）不停轮询这个队列，拿出任务就去执行对应的方法即可。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%90%8E%E5%8F%B0%E7%BA%BF%E7%A8%8B.jpg" alt="img"></p><h3 id="Redis-单线程模式是怎样的？"><a href="#Redis-单线程模式是怎样的？" class="headerlink" title="Redis 单线程模式是怎样的？"></a>Redis 单线程模式是怎样的？</h3><p>IO多路复用+事件派发</p><p>Redis 6.0 版本之前的单线模式如下图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.drawio.png" alt="img"></p><p>图中的蓝色部分是一个事件循环，是由主线程负责的，可以看到网络 I&#x2F;O 和命令处理都是单线程。 Redis <mark>初始化</mark>的时候，会做下面这几件事情：</p><ul><li>首先，调用 epoll_create() <mark>创建一个 epoll 对象</mark>和调用 socket() <mark>创建一个服务端 socket</mark></li><li>然后，调用 bind() <mark>绑定端口</mark>和调用 listen() <mark>监听该 socket</mark>；</li><li>然后，将<mark>调用 epoll_ctl()</mark> 将 listen socket 加入到 epoll，<mark>同时注册「连接事件」处理函数</mark>。</li></ul><p>初始化完后，主线程就进入到一个<strong>事件循环函数</strong>，主要会做以下事情：</p><ul><li>首先，先调用<strong>处理发送队列函数</strong>，看是发送队列里是否有任务，如果有发送任务，则通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。</li><li>接着，调用 epoll_wait 函数等待事件的到来：<ul><li>如果是<strong>连接事件</strong>到来，则会调用<strong>连接事件处理函数</strong>，该函数会做这些事情：调用 accpet 获取已连接的 socket -&gt; 调用 epoll_ctl 将已连接的 socket 加入到 epoll -&gt; 注册「读事件」处理函数；</li><li>如果是<strong>读事件</strong>到来，则会调用<strong>读事件处理函数</strong>，该函数会做这些事情：调用 read 获取客户端发送的数据 -&gt; 解析命令 -&gt; 处理命令 -&gt; 将客户端对象添加到发送队列 -&gt; 将执行结果写到发送缓存区等待发送；</li><li>如果是<strong>写事件</strong>到来，则会调用<strong>写事件处理函数</strong>，该函数会做这些事情：通过 write 函数将客户端发送缓存区里的数据发送出去，如果这一轮数据没有发送完，就会继续注册写事件处理函数，等待 epoll_wait 发现可写后再处理 。</li></ul></li></ul><h3 id="Redis-采用单线程为什么还这么快？"><a href="#Redis-采用单线程为什么还这么快？" class="headerlink" title="Redis 采用单线程为什么还这么快？"></a>Redis 采用单线程为什么还这么快？</h3><ul><li><p>大部分操作<strong>都在内存中完成</strong>，并且采用了高效的数据结构（例如epoll中的红黑树）</p></li><li><p><strong>避免了多线程之间的竞争</strong>，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。</p></li><li><p>采用了 <strong>I&#x2F;O 多路复用机制</strong>处理大量的客户端 Socket 请求：简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理</p></li></ul><h3 id="Redis-6-0-之前为什么使用单线程？"><a href="#Redis-6-0-之前为什么使用单线程？" class="headerlink" title="Redis 6.0 之前为什么使用单线程？"></a>Redis 6.0 之前为什么使用单线程？</h3><p><strong>CPU 并不是制约 Redis 性能表现的瓶颈所在</strong>，更多情况下是受到<mark>内存大小和网络I&#x2F;O的限制</mark>。</p><p>使用多线程可能带来的后果：<strong>增加了系统复杂度、同时可能存在线程切换、甚至加锁解锁、死锁造成的性能损耗</strong>。</p><h3 id="Redis-6-0-之后为什么引入了多线程？"><a href="#Redis-6-0-之后为什么引入了多线程？" class="headerlink" title="Redis 6.0 之后为什么引入了多线程？"></a>Redis 6.0 之后为什么引入了多线程？</h3><p>虽然 Redis 的主要工作（网络 I&#x2F;O 和执行命令）一直是单线程模型，但是<strong>在 Redis 6.0 版本之后，也采用了多个 I&#x2F;O 线程来处理网络请求</strong>，<strong>这是因为随着网络硬件的性能提升，Redis 的<mark>性能瓶颈有时会出现在网络 I&#x2F;O 的处理上</strong></mark>。</p><p>所以为了提高网络 I&#x2F;O 的并行度，Redis 6.0 对于网络 I&#x2F;O 采用多线程来处理。但是对于命令的执行，Redis 仍然使用单线程来处理，所以<mark>不要误解Redis 有多线程同时执行命令</mark>。</p><hr><p>因此， Redis 6.0 版本之后，Redis 在启动的时候，默认情况下会<strong>额外创建 6 个线程</strong>（<em>这里的线程数不包括主线程</em>）：</p><ul><li>Redis-server ： Redis的<strong>主线程，主要负责执行命令</strong>；</li><li>bio_close_file、bio_aof_fsync、bio_lazy_free：三个后台线程，分别<mark>异步处理**</mark>关闭文件任务、AOF刷盘任务、释放内存任务**；</li><li>io_thd_1、io_thd_2、io_thd_3：三个 I&#x2F;O 线程，io-threads 默认是 4 ，所以会启动 3（4-1）个 I&#x2F;O 多线程，用来<strong>分担 Redis 网络 I&#x2F;O 的压力</strong>。</li></ul><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%94%E7%A7%8D%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%9B%BE.png" alt="五种数据类型图"></p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>String 的数据结构为<code>int</code>和<mark>简单动态字符串 (Simple Dynamic String, 缩写 SDS)</mark>，是<strong>可以修改的字符串</strong>，内部结构实现上<strong>类似于 Java 的 ArrayList</strong>，采用预分配冗余空间的方式来减少内存的频繁分配。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231023212252966.png" alt="image-20231023212252966"></p><p>如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p><h3 id="编码类型"><a href="#编码类型" class="headerlink" title="编码类型"></a>编码类型</h3><ol><li><p>其基本编码方式是<mark>RAW</mark>，基于简单动态字符串(SDS)实现，存储上限为512mb.</p></li><li><p>如果存储的SDS长度小于44字节，则会采用<mark>EMBSTR</mark>编码，此时object head与SDS是一段<strong>连续空间</strong>。申请内存时只需要调用一次内存分配函数，效率更高。</p></li></ol><blockquote><p>不超过44的原因是，加上Redisobject的头信息刚好不会超过64，而Redis中的申请内存又是以2的几次方来申请的，这样能刚好避免内存碎片的问题。</p></blockquote><ol start="3"><li>如果存储的字符串是整数值，并且大小在LONG MAX范围内，则会采用<mark>INT</mark>编码:直接将数据保存在RedisObiect的ptr指针位置(刚好8字节)，不再需要SDS了。</li></ol><p>三种编码类型的<strong>图示</strong>：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105115851754.png" alt="三种编码类型的图示"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>SET key value<br>设置指定key的值</li><li>GET key<br>获取指定key的值</li><li>SETEX key seconds value<br>设置指定key的值，并将key的过期时间设为seconds秒</li><li>SETNX key value<br>只有在key不存在时设置key的值</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>缓存对象<ul><li>直接缓存整个对象的 JSON，命令例子： <code>SET user:1 &#39;&#123;&quot;name&quot;:&quot;xiaolin&quot;, &quot;age&quot;:18&#125;&#39;</code>。</li><li>采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子： <code>MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20</code>。</li></ul></li><li>常规计数：计算访问次数、点赞、转发、库存数量等等</li><li>分布式锁</li><li>共享session信息：将session保存在redis来保存用户的会话(登录)状态</li></ol><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="数据结构-编码类型"><a href="#数据结构-编码类型" class="headerlink" title="数据结构&amp;&amp;编码类型"></a>数据结构&amp;&amp;编码类型</h3><p>List 类型的底层数据结构是由<strong>双向链表<mark>或</mark>压缩列表</strong>实现的：</p><ul><li>如果列表的元素个数小于 <code>512</code> 个（默认值，可由 <code>list-max-ziplist-entries</code> 配置），列表每个元素的值都小于 <code>64</code> 字节（默认值，可由 <code>list-max-ziplist-value</code> 配置），Redis 会使用<strong>压缩列表</strong>作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用<strong>双向链表</strong>作为 List 类型的底层数据结构；</li></ul><p><strong>在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表</strong>。</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序，常用命令:</p><ul><li>LPUSH key value1 [value2]<br>将一个或多个值插入到列表头部</li><li>LRANGE key start stop<br>获取列表指定范围内的元素</li><li>RPOP key<br>移除并获取列表最后一个元素</li><li>LLEN key<br>获取列表长度</li><li>BRPOP key1 [key2 ] timeout<br>移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>消息队列</p><p>消息队列在存取消息时，必须要满足三个需求，分别是<strong>消息保序、处理重复的消息和保证消息可靠性</strong>。</p><p>Redis 的 List 和 Stream 两种数据类型，就可以满足消息队列的这三个需求。我们先来了解下基于 List 的消息队列实现方法，后面在介绍 Stream 数据类型时候，在详细说说 Stream。</p><ol><li>如何满足消息保序需求？</li></ol><p>List 本身就是按先进先出的顺序对数据进行存取的，所以，如果使用 List 作为消息队列保存消息的话，就已经能满足消息保序的需求了。</p><p>List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/list%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png" alt="img"></p><ul><li>生产者使用 <code>LPUSH key value[value...]</code> 将消息插入到队列的头部，如果 key 不存在则会创建一个空的队列再插入消息。</li><li>消费者使用 <code>RPOP key</code> 依次读取队列的消息，先进先出。</li></ul><p>不过，在消费者读取数据时，有一个潜在的性能风险点。</p><p>在生产者往 List 中写入数据时，List 并不会主动地通知消费者有新消息写入，如果消费者想要及时处理消息，就需要在程序中不停地调用 <code>RPOP</code> 命令（比如使用一个while(1)循环）。如果有新消息写入，RPOP命令就会返回结果，否则，RPOP命令返回空值，再继续循环。</p><p>所以，即使没有新消息写入List，消费者也要不停地调用 RPOP 命令，这就会导致消费者程序的 CPU 一直消耗在执行 RPOP 命令上，带来不必要的性能损失。</p><p>为了解决这个问题，Redis提供了 BRPOP 命令。<strong>BRPOP命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据</strong>。和消费者程序自己不停地调用RPOP命令相比，这种方式能节省CPU开销。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png" alt="img"></p><ol start="2"><li>如何处理重复的消息？</li></ol><p>消费者要实现重复消息的判断，需要 2 个方面的要求：</p><ul><li>每个消息都有一个全局的 ID。</li><li>消费者要记录已经处理过的消息的 ID。当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理。如果已经处理过，那么，消费者程序就不再进行处理了。</li></ul><p>但是 <strong>List 并不会为每个消息生成 ID 号，所以我们需要自行为每个消息生成一个全局唯一ID</strong>，生成之后，我们在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID。</p><p>例如，我们执行以下命令，就把一条全局 ID 为 111000102、库存量为 99 的消息插入了消息队列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">LPUSH mq <span class="string">&quot;111000102:stock:99&quot;</span></span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><ol start="3"><li>如何保证消息可靠性？</li></ol><p>当消费者程序从 List 中读取一条消息后，List 就不会再留存这条消息了。所以，如果消费者程序在处理消息的过程出现了故障或宕机，就会导致消息没有处理完成，那么，消费者程序再次启动后，就没法再次从 List 中读取消息了。</p><p>为了留存消息，List 类型提供了 <code>BRPOPLPUSH</code> 命令，这个命令的<strong>作用是让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存</strong>。</p><p>这样一来，如果消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息并进行处理了。</p><p>好了，到这里可以知道基于 List 类型的消息队列，满足消息队列的三大需求（消息保序、处理重复的消息和保证消息可靠性）。</p><ul><li>消息保序：使用 LPUSH + RPOP；</li><li>阻塞读取：使用 BRPOP；</li><li>重复消息处理：生产者自行实现全局唯一 ID；</li><li>消息的可靠性：使用 BRPOPLPUSH</li></ul><blockquote><p>List 作为消息队列有什么缺陷？</p></blockquote><p><strong>List 不支持多个消费者消费同一条消息</strong>，因为一旦消费者拉取一条消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费。</p><p>要实现一条消息可以被多个消费者消费，那么就要将多个消费者组成一个消费组，使得多个消费者可以消费同一条消息，但是 <strong>List 类型并不支持消费组的实现</strong>。</p><p>这就要说起 Redis 从 5.0 版本开始提供的 Stream 数据类型了，Stream 同样能够满足消息队列的三大需求，而且它还支持「消费组」形式的消息读取。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="数据结构-编码类型-1"><a href="#数据结构-编码类型-1" class="headerlink" title="数据结构&amp;&amp;编码类型"></a>数据结构&amp;&amp;编码类型</h3><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的：</p><ul><li>如果集合中的元素都是整数且元素个数小于 <code>512</code> （默认值，<code>set-maxintset-entries</code>配置）个，Redis 会使用<strong>整数集合</strong>作为 Set 类型的底层数据结构；</li><li>如果集合中的元素不满足上面条件，则 Redis 使用<strong>哈希表</strong>作为 Set 类型的底层数据结构。</li></ul><blockquote><p>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p></blockquote><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><p>Redis set是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令:</p><ul><li><p>SADD key member1 [member2]</p><p>向集合添加一个或多个成员</p></li><li><p>SMEMBERS key<br>返回集合中的所有成员</p></li><li><p>SCARD key<br>获取集合的成员数</p></li><li><p>SINTER key1 [key2]<br>返回给定所有集合的交集</p></li><li><p>SUNION key1 [key2]<br>返回所有给定集合的并集</p></li><li><p>SDIFF key1 [key2]<br>返回给定所有集合的差集</p></li><li><p>SREM key member1 [member2]</p><p>移除集合中一个或多个成员</p></li></ul><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>点赞：Set 类型可以保证一个用户只能点一个赞</li><li>共同关注：Set 类型支持交集运算，所以可以用来计算共同关注的好友、公众号等</li><li>抽奖：存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次</li></ol><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h3 id="数据结构-编码类型-2"><a href="#数据结构-编码类型-2" class="headerlink" title="数据结构&amp;&amp;编码类型"></a>数据结构&amp;&amp;编码类型</h3><p>Hash 类型对应的数据结构是两种：<mark>ziplist（压缩列表），hashtable（哈希表）</mark>。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p><blockquote><p>与zset很类似，就是少了一个跳表做排序功能，因为Hash也用不到排序。</p><p>具体<mark>为什么ziplist本身不满足键值唯一性判定等条件还能拿来做Hash的底层数据结构的原因</mark>在下面zset处已经说明，往下面看就看到了。</p></blockquote><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><p>Redis hash是一个string类型的field和value的映射表,hash特别适合用于存储对象，常用命令:</p><ul><li>HSET key field value<br>将哈希表key中的字段field的值设为value</li><li>HGET key field<br>获取存储在哈希表中指定字段的值</li><li>HDEL key field<br>删除存储在哈希表中的指定字段</li><li>HKEYS key<br>获取哈希表中所有字段</li><li>HVALS key<br>获取哈希表中所有值</li><li>HGETALL key<br>获取在哈希表中指定key的所有字段和值</li></ul><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>缓存对象</li><li>购物车：以用户 id 为 key，商品 id 为 field，商品数量为 value，恰好构成了购物车的3个要素</li></ol><h2 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h2><h3 id="数据结构-编码类型-3"><a href="#数据结构-编码类型-3" class="headerlink" title="数据结构&amp;&amp;编码类型"></a>数据结构&amp;&amp;编码类型</h3><p>Zset 类型的底层数据结构是由<strong>压缩列表<mark>或</mark>跳表（还有hash）</strong>实现的：</p><ul><li>如果有序集合的元素个数小于 <code>128</code> 个，并且每个元素的值小于 <code>64</code> 字节时，Redis 会使用<strong>压缩列表</strong>作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用<strong>跳表</strong>作为 Zset 类型的底层数据结构；</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</strong></p><p>🌈补充1：</p><blockquote><p>这里说的跳表其实不准确，其实跳表还结合了hash来一起进行操作。</p><p>因为跳表可以根据score进行排序地查找score（可范围查询），但是还要结合hash来进行快速地键值的唯一性判断和根据key（member）来找value（score）。但是hash之占了其中的一小部分，且在RedisObject数据结构中的type类型上也只能填一个，故选择了跳表。但是其实<mark>hash也是缺一不可</mark>的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zset结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">    <span class="comment">// Dict指针</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    <span class="comment">// SkipList指针</span></span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105163630045.png" alt="dict+skiplist"></p><p>🌈补充2：ziplist没有上面那些特性，<strong>为什么还能拿来存zset数据？</strong></p><p>ziplist本身没有排序功能，而且没有键值对的概念，因此需要有zset通过编码实现</p><ul><li>ZipList是连续内存，因此score和element是紧挨在一起的两个entry，element在前，score在后</li><li>score越小越接近队首，score越大越接近队尾，按照score值升序排列</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105165009210.png" alt="ziplist"></p><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><p>Redis sorted set有序集合是string类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。常用命令:</p><ul><li>ZADD key score1 member1 [score2 member2]<br>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li><li>ZRANGE key start stop [WITHSCORES]<br>通过索引区间返回有序集合中指定区间内的成员</li><li>ZINCRBY key increment member<br>有序集合中对指定成员的分数加上增量increment</li><li>ZREM key member [member …]<br>移除有序集合中的一个或多个成员</li></ul><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>排行榜：有序集合比较典型的使用场景就是排行榜</li></ol><blockquote><p>🌈黑马点评中的点赞排行榜：</p></blockquote><p>采用zset类型的数据结构原因：</p><ol><li>可排序</li><li>唯一</li><li>列表</li></ol><p>但是SQL语句查询出来的结果并不是按照我们期望的方式进行排，即不按时间排序，因为使用了in来进行查询，最后根据id升序排，但其实应该按时间升序排序，所以可以采用<code>order by field(id, ids[0], ids[1] ...)</code>的方式进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryBlogLikes</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;blog:like:&quot;</span> + id;</span><br><span class="line">        <span class="comment">//zrange key 0 4  查询zset中前5个元素</span></span><br><span class="line">        Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//如果是空的(可能没人点赞)，直接返回一个空集合</span></span><br><span class="line">        <span class="keyword">if</span> (top5 == <span class="literal">null</span> || top5.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(Collections.emptyList());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//将ids使用`,`拼接，SQL语句查询出来的结果并不是按照我们期望的方式进行排</span></span><br><span class="line">        <span class="comment">//所以我们需要用order by field来指定排序方式，期望的排序方式就是按照查询出来的id进行排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">idsStr</span> <span class="operator">=</span> StrUtil.join(<span class="string">&quot;,&quot;</span>, ids);</span><br><span class="line">        <span class="comment">//select * from tb_user where id in (ids[0], ids[1] ...) order by field(id, ids[0], ids[1] ...)</span></span><br><span class="line">        List&lt;UserDTO&gt; userDTOS = userService.query().in(<span class="string">&quot;id&quot;</span>, ids)</span><br><span class="line">                .last(<span class="string">&quot;order by field(id,&quot;</span> + idsStr + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">                .list().stream()</span><br><span class="line">                .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(userDTOS);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="keyword">in</span> (ids[<span class="number">0</span>], ids[<span class="number">1</span>] ...) <span class="keyword">order</span> <span class="keyword">by</span> field(id, ids[<span class="number">0</span>], ids[<span class="number">1</span>] ...)</span><br></pre></td></tr></table></figure><h2 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>Bitmap 本身是用 String 类型作为底层数据结构实现的一种统计二值状态的数据类型。</p><p>String 类型是会保存为二进制的字节数组，所以，Redis 就把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态，你可以把 Bitmap 看作是一个 bit 数组。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231024110252548.png" alt="image-20231024110252548"></p><h3 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>签到统计</li><li>判断用户登录态</li><li>连续签到用户总数</li></ol><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h3 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h3><p>UV统计</p><h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><p>GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。</p><p>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是「对二维地图做区间划分」和「对区间进行编码」。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。</p><p>这样一来，我们就可以把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。</p><h3 id="应用场景-7"><a href="#应用场景-7" class="headerlink" title="应用场景"></a>应用场景</h3><p>附近的人</p><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p>Redis Stream 是 Redis 5.0 版本新增加的数据类型，Redis 专门为消息队列设计的数据类型。</p><p>在 Redis 5.0 Stream 没出来之前，消息队列的实现方式都有着各自的缺陷，例如：</p><ul><li>发布订阅模式，不能持久化也就无法可靠的保存消息，并且对于离线重连的客户端不能读取历史消息的缺陷；</li><li>List 实现消息队列的方式不能重复消费，一个消息消费完就会被删除，而且生产者需要自行实现全局唯一 ID。</li></ul><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><ul><li>KEYS pattern<br>查找所有符合给定模式( pattern)的 key</li><li>EXISTS key<br>检查给定key是否存在</li><li>TYPE key<br>返回key所储存的值的类型</li><li>TTL key<br>返回给定 key的剩余生存时间(TTL, time to live)，以秒为单位</li><li>DEL key<br>该命令用于在key存在是删除key</li></ul><h1 id="Redis底层数据结构"><a href="#Redis底层数据结构" class="headerlink" title="Redis底层数据结构"></a>Redis底层数据结构</h1><p> Redis 数据类型（也叫 Redis 对象）和底层数据结构的对应关系图</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105171016673.png" alt="对应关系图"></p><h2 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h2><h3 id="C字符串的缺点"><a href="#C字符串的缺点" class="headerlink" title="C字符串的缺点"></a>C字符串的缺点</h3><p>Redis是用C语言编写的，但是不直接使用C语言的字符串，是因为其本身有几处缺点</p><p>C 语言的字符串不足之处以及可以改进的地方：</p><ul><li>获取字符串长度的时间复杂度为 O（N）；</li><li>字符串的结尾是以 “\0” 字符标识，字符串里面不能包含有 “\0” 字符，因此不能保存二进制数据；</li><li>字符串操作函数不高效且不安全，比如有缓冲区溢出的风险，有可能会造成程序运行终止；</li></ul><h3 id="SDS数据结构"><a href="#SDS数据结构" class="headerlink" title="SDS数据结构"></a>SDS数据结构</h3><p>SDS数据结构图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031113454318.png" alt="SDS数据结构"></p><p>结构中的每个成员变量分别介绍下：</p><ul><li><strong>len，记录了字符串长度</strong>。这样获取字符串长度的时候，只需要返回这个成员变量值就行，时间复杂度只需要 O（1）。</li><li><strong>alloc，分配给字符数组的空间长度</strong>。这样在修改字符串的时候，可以通过 <code>alloc - len</code> 计算出剩余的空间大小，可以用来判断空间是否满足修改需求，如果不满足的话，就会自动将 SDS 的<mark>空间扩展</mark>至执行修改所需的大小，然后才执行实际的修改操作，所以使用 SDS 既不需要手动修改 SDS 的空间大小，也不会出现前面所说的缓冲区溢出的问题。</li><li><strong>flags，用来表示不同类型的 SDS</strong>。一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64，后面在说明区别之处。</li><li><strong>buf[]，字符数组，用来保存实际数据</strong>。不仅可以保存字符串，也可以保存二进制数据。</li></ul><h3 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h3><p>当判断出缓冲区大小不够用时，Redis 会自动将扩大 SDS 的空间大小</p><ul><li>如果所需的 sds 长度<strong>小于 1 MB</strong>，那么最后的扩容是按照<strong>翻倍扩容</strong>来执行的，即 2 倍的newlen</li><li>如果所需的 sds 长度<strong>超过 1 MB</strong>，那么最后的扩容长度应该是 newlen <strong>+ 1MB</strong>。</li></ul><p>在扩容 SDS 空间之前，SDS API 会优先检查未使用空间是否足够，如果不够的话，API 不仅会为 SDS 分配修改所必须要的空间，还会给 SDS 分配额外的「未使用空间」。</p><p>这样的好处是，下次在操作 SDS 时，如果 SDS 空间够的话，API 就会直接使用「未使用空间」，而无须执行内存分配，<mark><strong>有效的减少内存分配次数</strong></mark>。</p><h3 id="节省内存空间"><a href="#节省内存空间" class="headerlink" title="节省内存空间"></a>节省内存空间</h3><p>SDS 结构中有个 flags 成员变量，表示的是 SDS 类型。</p><p>Redis 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。</p><p>这 5 种类型的主要<strong>区别就在于，它们数据结构中的 len 和 alloc 成员变量的数据类型不同</strong>。</p><p>比如 sdshdr16 和 sdshdr32 这两个类型，它们的定义分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> len;</span><br><span class="line">    <span class="type">uint16_t</span> alloc; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; </span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> len;</span><br><span class="line">    <span class="type">uint32_t</span> alloc; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags;</span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>sdshdr16 类型的 len 和 alloc 的数据类型都是 uint16_t，表示字符数组长度和分配空间大小不能超过 2 的 16 次方。</li><li>sdshdr32 则都是 uint32_t，表示表示字符数组长度和分配空间大小不能超过 2 的 32 次方。</li></ul><p><mark><strong>之所以 SDS 设计不同类型的结构体，是为了能灵活保存不同大小的字符串，从而有效节省内存空间</strong></mark>。比如，在保存小字符串时，结构头占用空间也比较少。</p><p>除了设计不同类型的结构体，Redis 在编程上还<strong>使用了专门的编译优化来节省内存空间</strong>，即在 struct 声明了 <code>__attribute__ ((packed))</code> ，它的作用是：<mark><strong>告诉编译器取消结构体在编译过程中的优化对齐，按照实际占用字节数进行对齐</strong></mark>。</p><p>比如，sdshdr16 类型的 SDS，默认情况下，编译器会按照 2 字节对齐的方式给变量分配内存，这意味着，即使一个变量的大小不到 2 个字节，编译器也会给它分配 2 个字节。</p><p>举个例子，假设下面这个结构体，它有两个成员变量，类型分别是 char 和 int，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test1</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"> &#125; test1;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(test1));</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家猜猜这个结构体大小是多少？我先直接说答案，这个结构体大小计算出来是 8。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/35820959e8cf4376391c427ed7f81495.png" alt="img"></p><p>这是因为默认情况下，编译器是使用「字节对齐」的方式分配内存，虽然 char 类型只占一个字节，但是由于成员变量里有 int 类型，它占用了 4 个字节，所以在成员变量为 char 类型分配内存时，会分配 4 个字节，其中这多余的 3 个字节是为了字节对齐而分配的，相当于有 3 个字节被浪费掉了。</p><p>如果不想编译器使用字节对齐的方式进行分配内存，可以采用了 <code>__attribute__ ((packed))</code> 属性定义结构体，这样一来，结构体实际占用多少内存空间，编译器就分配多少空间。</p><p>比如，我用 <code>__attribute__ ((packed))</code> 属性定义下面的结构体 ，同样包含 char 和 int 两个类型的成员变量，代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((<span class="title">packed</span>)) <span class="title">test2</span>  &#123;</span></span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"> &#125; test2;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%lu\n&quot;</span>, <span class="keyword">sizeof</span>(test2));</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时打印的结果是 5（1 个字节 char + 4 字节 int）。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/47e6c8fbc17fd6c89bdfcb5eedaaacff.png" alt="img"></p><p>可以看得出，这是<mark>按照实际占用字节数进行分配内存</mark>的，这样可以节省内存空间。</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031131040258.png" alt="双向链表"></p><h3 id="链表的优势与缺陷"><a href="#链表的优势与缺陷" class="headerlink" title="链表的优势与缺陷"></a>链表的优势与缺陷</h3><p>Redis 的链表实现优点如下：</p><ul><li>listNode 链表节点的结构里带有 prev 和 next 指针，<strong>获取某个节点的前置节点或后置节点的时间复杂度只需O(1)，而且这两个指针都可以指向 NULL，所以链表是无环链表</strong>；</li><li>list 结构因为提供了表头指针 head 和表尾节点 tail，所以**获取链表的表头节点和表尾节点的时间复杂度只需O(1)**；</li><li>list 结构因为提供了链表节点数量 len，所以**获取链表中的节点数量的时间复杂度只需O(1)**；</li><li>listNode 链表节使用 void* 指针保存节点值，并且可以通过 list 结构的 dup、free、match 函数指针为节点设置该节点类型特定的函数，因此<strong>链表节点可以保存各种不同类型的值</strong>；</li></ul><p>链表的缺陷也是有的：</p><ul><li>链表每个节点之间的内存都是不连续的，意味着<strong>无法很好利用 CPU 缓存</strong>。能很好利用 CPU 缓存的数据结构就是数组，因为数组的内存是连续的，这样就可以充分利用 CPU 缓存来加速访问。</li><li>还有一点，保存一个链表节点的值都需要一个链表节点结构头的分配，<strong>内存开销较大</strong>。</li></ul><h3 id="对比数组和链表"><a href="#对比数组和链表" class="headerlink" title="对比数组和链表"></a>对比数组和链表</h3><p>对于数组和链表来说，其内存访问模式对CPU缓存的利用有很大影响：</p><ol><li>数组在内存中是一段连续的存储空间，这使得它具有很好的局部性原则。当CPU访问数组中的元素时，往往会预先加载相邻的数据到缓存中，以满足可能的后续访问需求。这种连续的存储模式有利于CPU缓存的预取和缓存行填充，从而提高访问速度。因为数组元素在内存中是连续排列的，一旦加载了数组的一个元素，接下来的元素也很可能已经在缓存中。</li><li>相比之下，链表的节点在内存中是分散存储的，每个节点通常存储在不同的内存位置。这会导致访问非常间断，使得缓存预取和填充效率降低。即使访问链表的一个节点，其后续节点并不一定存储在相邻的内存位置，这就增加了缓存未命中的概率，降低了CPU缓存的利用效率。</li></ol><h2 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h2><p>压缩列表的最大特点，就是它被设计成一种<strong>内存紧凑型</strong>的数据结构，占用一块连续的内存空间，不仅可以利用 CPU 缓存，而且会针对不同长度的数据，进行相应编码，这种方法可以有效地<mark>节省内存开销</mark>。</p><h3 id="结构设计"><a href="#结构设计" class="headerlink" title="结构设计"></a>结构设计</h3><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231103200343073.png" alt="压缩列表结构图"></p><p>各个字段的含义：</p><ul><li><p><em><strong>zlbytes</strong></em>，记录整个压缩列表占用对内存字节数；</p></li><li><p><em><strong>zltail</strong></em>，记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量；</p></li><li><p><em><strong>zllen</strong></em>，记录压缩列表包含的节点数量；</p></li><li><p><em><strong>zlend</strong></em>，标记压缩列表的结束点，固定值 0xFF（十进制255）。</p></li><li><p><em><strong>prevlen</strong></em>，记录了「前一个节点」的长度，目的是为了实现从后向前遍历；</p></li><li><p><em><strong>encoding</strong></em>，记录了当前节点实际数据的「类型和长度」，类型主要有两种：字符串和整数。</p></li><li><p><em><strong>data</strong></em>，记录了当前节点的实际数据，类型和长度都由 <code>encoding</code> 决定；</p></li></ul><p>🔴🟡🟢总结：</p><p>这里既不像数组那样有连续的相同的内存大小进行寻址，也不像链表那样有指针进行寻址，</p><p>但是压缩列表在<mark><strong>正序时</strong></mark>下一个元素就是该元素的首地址加上自身长度，自身长度包括【1. prelen代表前一个结点的长度，2. encoding记录类型，3. data真实数据】，由这三部分组成，这三个部分的长度都是可以经过计算得出的，故可以通过将地址加上自身长度得到下一个元素。</p><p><mark>逆序时</mark>：可以通过本身地址减去prelen，得到前一个元素的地址</p><p>所以也可以说这个压缩列表是<strong>双向的</strong>。</p><h3 id="连锁更新"><a href="#连锁更新" class="headerlink" title="连锁更新"></a>连锁更新</h3><blockquote><p>概率极低的事情</p></blockquote><p>ZipList的每个Entry都包含previous entry length来记录上一个节点的大小，长度是1个或5个字节:</p><ul><li>如果前一节点的长度小于254字节，则采用1个字节来保存这个长度值</li><li>如果前一节点的长度大于等于254字节，则采用5个字节来保存这个长度值，第一个字节为0xfe，后四个字节才是真实长度数据</li></ul><p>现在，假设我们有<mark>N个连续的、长度为250~253字节之间的entry</mark>（条件），因此entry的previous entry length属性用1个字节即可表示，如图所示:</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231103201052893.png" alt="连锁更新"></p><p>ZipList这种特殊情况下产生的连续多次空间扩展操作称之为<mark>连锁更新</mark>(Cascade Update)。新增、删除都可能导致连锁更新的发生。</p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol><li><p>连锁更新一旦发生，就会导致压缩列表占用的内存空间要<mark>多次重新分配</mark>，这就会直接影响到压缩列表的访问性能。</p></li><li><p>不能保存过多的元素，否则查询效率就会降低。</p></li></ol><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>三个结构：</p><p>哈希表结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    <span class="comment">//哈希表数组</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="comment">//哈希表大小</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> size;  </span><br><span class="line">    <span class="comment">//哈希表大小掩码，用于计算索引值</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizemask;</span><br><span class="line">    <span class="comment">//该哈希表已有的节点数量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><p>哈希表节点的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="comment">//键值对中的键</span></span><br><span class="line">    <span class="type">void</span> *key;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//键值对中的值</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">        <span class="type">double</span> d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="comment">//指向下一个哈希表节点，形成链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>字典的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span>&#123;</span></span><br><span class="line">    dictType *type;  <span class="comment">// dict类型，内置不同的hash函数</span></span><br><span class="line">    <span class="type">void</span> *privdata;  <span class="comment">// 私有数据，在做特殊hash运算时用</span></span><br><span class="line">    dicht ht[<span class="number">2</span>];  <span class="comment">// 一个Dict包含两个哈希表，其中一个时当前数据，另一个一般是空，rehash时使用</span></span><br><span class="line">    <span class="type">long</span> rehashidx;  <span class="comment">// rehash的进度，-1表示未进行</span></span><br><span class="line">    <span class="type">int16_t</span> pauserehash;  <span class="comment">// rehash是否暂停，1则暂停，0则继续</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><p>三种结构组成关系图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231102203414049.png" alt="三种结构组成关系图"></p><p>Dict的结构</p><ul><li>类似java的HashTable，底层是数组加<mark>单向</mark>链表来解决哈希冲突</li><li>Dict包含两个哈希表，ht[0]平常用，ht[1]用来rehash</li></ul><blockquote><p>跟Java中的HashMap原理很像，但又有一点点差别</p></blockquote><h3 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h3><p>当出现哈希冲突的时候采用的是<strong>头插法</strong>，原因是方便，不用遍历到链表的末尾进行插入。</p><p>Redis是单线程，所以<strong>不会出现</strong>采用头插法时造成<strong>循环链表</strong>的可能。</p><blockquote><p>补充：当高并发时，<strong>多个线程并发</strong>地尝试在链表头部插入元素，在<strong>发生扩容</strong>且是<strong>头插法</strong>的情况下会导致循环链表，具体导致循环原因可参考本站：<a href="https://planbbbbb.github.io/2023/09/05/Java%E9%9B%86%E5%90%88/">https://planbbbbb.github.io/2023/09/05/Java%E9%9B%86%E5%90%88/</a></p></blockquote><h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p>Dict的rehash并不是一次性完成的。试想一下，如果Dict中包含数百万的entry，要在一次rehash完成，极有可能导致主线程阳寒。因此Dict的rehash是分多次、渐进式的完成，因此称为渐进式rehash。</p><p><strong>流程如下：</strong></p><ol><li><p>计算新hash表的size，值取决于当前要做的是扩容还是收缩:</p><ul><li>如果是扩容，则新size为第一个大于等于dict.ht[0].used +1的2的n次方，<mark>即当前元素个数+1后的第一个2^n的数</mark></li><li>如果是收缩，则新size为第一个大于等于dict.htlol.used的2^n (不得小于4)，与上面同理，<mark>找到比它大的第一个2的n次方的数</mark></li></ul></li><li><p>按照新的size申请内存空间，创建dictht，并赋值给dict.ht[1]</p></li><li><p>设置dict.rehashidx&#x3D;0，标示开始rehash（<strong>未进行rehash时值为-1</strong>）</p></li><li><p><del>将dict.ht[0]中的每一个dictEntry都rehash到dict.ht[1]</del>（不能一次性全部转移，这样在数据量很大的时候可能会导致主进程的阻塞）</p></li><li><p>每次执行新增、查询、修改、删除操作时，都检查一下dict.rehashidx是否大于-1，如果是则将dict.ht[0].table[rehashidx]的entry链表rehash到dict.ht[1]，并且将rehashidx++。直至dict.ht[0]的所有数据都rehash到dict.ht[1]</p></li><li><p>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</p></li><li><p>将rehashidx赋值为-1，代表rehash结束</p></li><li><p>在rehash过程中，<strong>新增操作</strong>，则直接写入ht[1]，<strong>查询、修改和删除</strong>则会在dict.ht[0]和dict.ht[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空</p></li></ol><blockquote><p>🌈负载因子 &#x3D; 哈希表已保存节点数量 &#x2F;哈希表大小</p></blockquote><p>触发 rehash 操作的条件，主要有两个：</p><ul><li>当负载因子大于等于 1 ，并且 Redis 没有在执行 bgsave 命令或者 bgrewiteaof 命令，也就是没有执行 RDB 快照或没有进行 AOF 重写的时候，就会进行 rehash 操作。</li><li>当负载因子大于等于 5 时，此时说明哈希冲突非常严重了，不管有没有有在执行 RDB 快照或 AOF 重写，都会强制进行 rehash 操作。</li></ul><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><ol><li>实现原理</li></ol><p>跳跃表实质上是对一个有序的链表进行<strong>类似于二分查找</strong>的数据结构，其性能与红黑树，AVL树不相上下。</p><p>原本要依次遍历从1开始找17，现在从三级索引找到10，再从二级索引找到15，在一级索引就能找到17了。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231023222430354.png" alt="跳跃表"></p><ol start="2"><li>具体结构</li></ol><p>跳表节点结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    <span class="comment">//Zset 对象的元素值</span></span><br><span class="line">    sds ele;</span><br><span class="line">    <span class="comment">//元素权重值</span></span><br><span class="line">    <span class="type">double</span> score;</span><br><span class="line">    <span class="comment">//后向指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//节点的level数组，保存每层上的前向指针和跨度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> span;</span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><p>跳表结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> length;</span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><hr><p>配合上结构体的跳表结构图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105102654240.png" alt="配合上结构体的跳表结构图"></p><h3 id="为什么用跳表而不是平衡树"><a href="#为什么用跳表而不是平衡树" class="headerlink" title="为什么用跳表而不是平衡树"></a>为什么用跳表而不是平衡树</h3><ul><li><strong>从内存占用上来比较，跳表比平衡树更灵活一些</strong>。平衡树每个节点包含 2 个指针（分别指向左右子树），而跳表每个节点包含的指针数目平均为 1&#x2F;(1-p)，具体取决于参数 p 的大小。如果像 Redis里的实现一样，取 p&#x3D;1&#x2F;4，那么平均每个节点包含 1.33 个指针，比平衡树更有优势。</li><li><strong>在做范围查找的时候，跳表比平衡树操作要简单</strong>。在平衡树上，我们找到指定范围的小值之后，还需要以中序遍历的顺序继续寻找其它不超过大值的节点。如果不对平衡树进行一定的改造，这里的中序遍历并不容易实现。而在跳表上进行范围查找就非常简单，只需要在找到小值之后，对第 1 层链表进行若干步的遍历就可以实现。</li><li><strong>从算法实现难度上来比较，跳表比平衡树要简单得多</strong>。平衡树的插入和删除操作可能引发子树的调整，逻辑复杂，而跳表的插入和删除只需要修改相邻节点的指针，操作简单又快速。</li></ul><h2 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h2><p>整数集合是 Set 对象的底层实现之一。当一个 Set 对象只包含整数值元素，并且元素数量不大时，就会使用整数集这个数据结构作为底层实现。</p><h3 id="整数集合结构设计"><a href="#整数集合结构设计" class="headerlink" title="整数集合结构设计"></a>整数集合结构设计</h3><p>整数集合本质上是一块连续内存空间，它的结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    <span class="comment">//编码方式</span></span><br><span class="line">    <span class="type">uint32_t</span> encoding;</span><br><span class="line">    <span class="comment">//集合包含的元素数量</span></span><br><span class="line">    <span class="type">uint32_t</span> length;</span><br><span class="line">    <span class="comment">//保存元素的数组</span></span><br><span class="line">    <span class="type">int8_t</span> contents[];</span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><p>contents 数组的真正类型取决于 intset 结构体里的 encoding 属性的值，对应的有16，32，64。</p><blockquote><p>其实就是对应着Java里的short，int，long类型。</p></blockquote><h3 id="升级机制"><a href="#升级机制" class="headerlink" title="升级机制"></a>升级机制</h3><p><em>目的是<mark>节省内存空间</mark></em></p><p>当我们将一个新元素加入到整数集合里面，如果新元素的类型（int32_t）比整数集合现有所有元素的类型（int16_t）都要长时，整数集合需要先进行<mark>升级</mark>，升级要<strong>先将原有的内存空间<mark>扩容到刚好能放的下</mark>加上新元素后，且所有元素都是新的数据类型的内存大小</strong>，再将原有的元素<mark>倒叙排入</mark>对应的位置，最后在将新的元素放在<mark>头或者尾</mark>。</p><p>🌈解释：</p><blockquote><p>其实就是原本的元素类型不够大，存不下新的数，就比如short类型的数据类型存不下新进来的50000，所以要进行元素类型上的升级。</p></blockquote><blockquote><p>这里倒叙的原因是防止覆盖原有的元素，倒叙不会覆盖到原有的元素。</p></blockquote><blockquote><p>新元素放在头或者尾的原因是只有当这个元素比所有元素都大或者比所有元素都小才有可能引发升级，才会使得原有的数据类型放不了该元素。</p></blockquote><p>扩容图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231102150034860.png" alt="扩容"></p><p>倒叙插入流程图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231102150003744.png" alt="倒叙插入流程"></p><p>整数集合<mark><strong>不支持降级操作</strong></mark>，一旦对数组进行了升级，就会一直保持升级后的状态。比如前面的升级操作的例子，如果删除了 65535 元素，整数集合的数组还是 int32_t 类型的，并不会因此降级为 int16_t 类型。</p><p>🍕整数集合升级的<strong>好处</strong>：</p><p>当元素全都是int32_t时，那么数组就会采用int32_t的元素类型，不会浪费空间，只有当有元素超过int32_t时才会去升级为int64_t，目的就是节省内存。</p><blockquote><p>个人思考：说到节省空间，这一点整数集合其实做的没有<strong>SDS或者压缩列表</strong>做的好，SDS废除了字节对齐，让不同类型长度的元素都能放在一起，但是整数集合其实不能这么做，因为他底层是个数组，他是连续的内存空间，要靠第一个值的地址，通过固定的运算去快速得到后面的值。</p></blockquote><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>底层采用<mark>二分查找</mark>进行查询，所以当数据量很大的时候其实也不建议使用整数集合来进行存储了。</p><h2 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h2><p>在 Redis 3.0 之前，List 对象的底层数据结构是双向链表或者压缩列表。然后在 Redis 3.2 的时候，List 对象的底层改由 quicklist 数据结构实现。</p><p>其实 quicklist 就是<mark>「双向链表 + 压缩列表」组合</mark>，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表。</p><p>quicklist 解决办法，<strong>通过控制每个链表节点中的压缩列表的大小或者元素个数，来规避连锁更新的问题。因为压缩列表元素越少或越小，连锁更新带来的影响就越小，从而提供了更好的访问性能。</strong></p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。<br>当数据量比较多的时候才会改成 quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231104102445783.png" alt="结构图"></p><p>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><p>在向 quicklist 添加一个元素的时候，不会像普通的链表那样，直接新建一个链表节点。而是会检查插入位置的压缩列表是否能容纳该元素，如果能容纳就直接保存到 quicklistNode 结构里的压缩列表，如果不能容纳，才会新建一个新的 quicklistNode 结构。</p><p>quicklist 会控制 quicklistNode 结构里的压缩列表的大小或者元素个数，来规避潜在的连锁更新的风险，但是这并<mark>没有完全解决连锁更新</mark>的问题。</p><h2 id="listpack"><a href="#listpack" class="headerlink" title="listpack"></a>listpack</h2><blockquote><p>本质上还是压缩列表，只是在版本更迭的时候进行了优化</p></blockquote><p><mark>最大特点</mark>是 listpack 中每个节点不再包含前一个节点的长度了，压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患。</p><h3 id="listpack-结构设计"><a href="#listpack-结构设计" class="headerlink" title="listpack 结构设计"></a>listpack 结构设计</h3><p>listpack 采用了压缩列表的很多优秀的设计，比如还是用一块连续的内存空间来紧凑地保存数据，并且为了节省内存的开销，listpack 节点会采用不同的编码方式保存不同大小的数据。</p><p>我们先看看 listpack 结构：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/4d2dc376b5fd68dae70d9284ae82b73a.png" alt="img"></p><p>listpack 头包含两个属性，分别记录了 listpack 总字节数和元素数量，然后 listpack 末尾也有个结尾标识。图中的 listpack entry 就是 listpack 的节点了。</p><p>每个 listpack 节点结构如下：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/c5fb0a602d4caaca37ff0357f05b0abf.png" alt="img"></p><p>主要包含三个方面内容：</p><ul><li>encoding，定义该元素的编码类型，会对不同长度的整数和字符串进行编码；</li><li>data，实际存放的数据；</li><li>len，encoding+data的总长度；</li></ul><p>可以看到，<strong>listpack 没有压缩列表中记录前一个节点长度的字段了，listpack 只记录当前节点的长度，当我们向 listpack 加入一个新元素的时候，不会影响其他节点的长度字段的变化，从而避免了压缩列表的连锁更新问题</strong>。</p><h3 id="修改后不会影响遍历吗"><a href="#修改后不会影响遍历吗" class="headerlink" title="修改后不会影响遍历吗"></a>修改后不会影响遍历吗</h3><p>在listpack中将原来的prelen替换为了len，原有的prelen是为了能从后向前去遍历元素的，现在改为了len，记录的是当前结点的长度。</p><p>解决办法是：</p><p><strong>lpDecodeBacklen 函数就可以从当前列表项起始位置的指针开始，向左逐个字节解析，得到前一项的 entry-len 值。</strong></p><p>这样依然能进行从后往前遍历。</p><h2 id="RedisObject"><a href="#RedisObject" class="headerlink" title="RedisObject"></a>RedisObject</h2><ol><li>每一个Redis对象最终都会封装为一个RedisObject对象，结构图如下：</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105105905430.png" alt="image-20231105105905430"></p><p>字段解释：</p><ul><li>type，标识该对象是什么类型的对象（String 对象、 List 对象、Hash 对象、Set 对象和 Zset 对象）；</li><li>encoding，标识该对象使用了哪种底层的数据结构；</li><li>lru，用于判断空闲时间太久的key，做内存淘汰处理</li><li>refcount，类似于jvm中的引用计数法，无人引用时可被回收</li><li>ptr，指向<mark>底层数据结构</mark>的指针。</li></ul><ol start="2"><li>encoding的11种类型：</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105105930395.png" alt="image-20231105105930395"></p><ol start="3"><li>五种基本数据类型的底层编码方式：</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231105105954746.png" alt="image-20231105105954746"></p><blockquote><p>补充：类似于bitmap，hyperloglog底层其实都是String类型，GEO底层其实就是ZSet类型</p></blockquote><h1 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213519682.png" alt="image-20230803213519682"></p><h3 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>缓存空对象</li></ol><ul><li><p>优点：方便简单</p></li><li><p>缺点：可能造成额外的内存消耗，可能造成短期的不一致</p></li></ul><blockquote><p>若有用户恶意使用多个不同id进行查询，则redis会不断缓存很多没有用的null值造成浪费，但可以通过为key添加过期时间解决。</p><p>短期不一致是因为数据库已经更新数据而redis中仍为null值，其实可以通过插入数据的同时手动更改redis的值来解决。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803213834986.png" alt="image-20230803213834986"></p><ol start="2"><li>布隆过滤器过滤</li></ol><p>在查询redis前先经过布隆过滤器，若redis中存在才放行。</p><p>布隆过滤器由于是基于哈希函数实现查找的，高效查找的同时<mark><strong>存在哈希冲突的可能性</strong></mark>。</p><ul><li>优点：内存占用少，没有多余的key</li><li>缺点：可能误判，查询布隆过滤器说数据存在，并不一定证明数据库中存在这个数据，但是查询到数据不存在，数据库中一定就不存在这个数据。</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230803214619650.png" alt="image-20230803214619650"></p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</strong></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804102636911.png" alt="image-20230804102636911"></p><h3 id="常见解决方案-1"><a href="#常见解决方案-1" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li><p>给不同的Key的TTL添加随机值</p></li><li><p>后台更新缓存</p></li></ol><blockquote><p>将更新缓存的工作交由后台线程定时更新</p></blockquote><p>解决方式有两种：</p><p>第一种方式，后台线程不仅负责定时更新缓存，而且也负责<mark><strong>频繁地检测缓存是否有效</strong></mark>，检测到缓存失效了，原因可能是系统紧张而被淘汰的，于是就要马上从数据库读取数据，并更新到缓存。</p><p>这种方式的检测时间间隔不能太长，太长也导致用户获取的数据是一个空值而不是真正的数据，所以检测的间隔最好是毫秒级的，但是总归是有个间隔时间，用户体验一般。</p><p>第二种方式，在业务线程发现缓存数据失效后（缓存数据被淘汰），<mark><strong>通过消息队列发送一条消息通知后台线程更新缓存</strong></mark>，后台线程收到消息后，在更新缓存前可以判断缓存是否存在，存在就不执行更新缓存操作；不存在就读取数据库数据，并将数据加载到缓存。这种方式相比第一种方式缓存的更新会更及时，用户体验也比较好。</p><p>在业务刚上线的时候，我们最好提前把数据缓起来，而不是等待用户访问才来触发缓存构建，这就是所谓的<mark><strong>缓存预热</strong></mark>，后台更新缓存的机制刚好也适合干这个事情。</p><ol start="3"><li>利用Redis集群提高服务的可用性</li></ol><p>通过<strong>主从节点的方式构建 Redis 缓存高可靠集群</strong>。</p><p>如果 Redis 缓存的主节点故障宕机，<mark>从节点可以切换成为主节点</mark>，继续提供缓存服务，避免了由于 Redis 故障宕机而导致的缓存雪崩问题。</p><ol start="4"><li>服务熔断或请求限流机制</li></ol><p>因为 Redis 故障宕机而导致缓存雪崩问题时，我们可以启动<mark><strong>服务熔断</strong></mark>机制，<strong>暂停业务应用对缓存服务的访问，直接返回错误</strong>，不用再继续访问数据库，从而降低对数据库的访问压力，保证数据库系统的正常运行，然后等到 Redis 恢复正常后，再允许业务应用访问缓存服务。</p><p>服务熔断机制是保护数据库的正常允许，但是暂停了业务应用访问缓存服系统，全部业务都无法正常工作</p><p>为了减少对业务的影响，我们可以启用<mark><strong>请求限流</strong></mark>机制，<strong>只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务</strong>，等到 Redis 恢复正常并把缓存预热完后，再解除请求限流的机制。</p><ol start="5"><li>给业务添加多级缓存</li></ol><blockquote><p>同一时段大量的缓存key同时失效采用方案1和2和互斥锁方案。</p><p>redis宕机采用方案3，4，5，redis集群中主库挂了还要从库数据，用sentinel可以降级限流，多级缓存可用nginx，jvm等进行缓存。</p></blockquote><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p><strong>缓存击穿问题也叫<code>热点Key问题</code>，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</strong></p><h3 id="常见解决方案-2"><a href="#常见解决方案-2" class="headerlink" title="常见解决方案"></a>常见解决方案</h3><ol><li>互斥锁</li></ol><blockquote><p>1000个进程来同时访问，一个进程拿到锁，其余999个进程都要等到线程1查询数据库重新写入缓存，释放锁之后才能访问，性能差，但是有强一致性</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804105357783.png" alt="image-20230804105357783"></p><ol start="2"><li>逻辑过期</li></ol><blockquote><p>就是在redis保存数据的时候多保存一个过期时间字段，通常是在活动开始到结束那一个时间段内都不会过期，也就不会突然失效了。若<strong>失效（这里说的失效指的是逻辑时间过期了）</strong>了也是要通过锁的形式去重新查数据库，存缓存，释放锁。</p><p>不过相对于互斥锁而言，这里的锁不一样了。这里线程1获得锁之后交给另外的线程去执行查数据库等操作，而线程1自身则返回旧的数据。其他进程在释放锁之前来访问都是返回的旧数据，只有当释放锁，即完成了查数据库，存入缓存，更新逻辑过期时间后才能返回新数据。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230804110145305.png" alt="image-20230804110145305"></p><h3 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h3><table><thead><tr><th>解决方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td>没有额外的内存消耗，保证一致性，实现简单</td><td>线程需要等待，性能受影响，可能有死锁</td></tr><tr><td>逻辑过期</td><td>线程无需等待，性能较好</td><td>不保证一致性，有额外内存消耗，实现复杂</td></tr></tbody></table><h2 id="缓存与数据库保持一致问题"><a href="#缓存与数据库保持一致问题" class="headerlink" title="缓存与数据库保持一致问题"></a>缓存与数据库保持一致问题</h2><h3 id="先更新数据库，还是先更新缓存？"><a href="#先更新数据库，还是先更新缓存？" class="headerlink" title="先更新数据库，还是先更新缓存？"></a>先更新数据库，还是先更新缓存？</h3><ol><li>先更新数据库再更新缓存</li></ol><p><mark>会出现并发问题</mark></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031150644998.png" alt="先更新数据库再更新缓存"></p><ol start="2"><li>先更新缓存再更新数据库</li></ol><p><mark>也会出现并发问题</mark></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031150609307.png" alt="先更新缓存再更新数据库"></p><p>所以，<strong>无论是「先更新数据库，再更新缓存」，还是「先更新缓存，再更新数据库」，这两个方案<mark>都存在并发问题</mark>，当两个请求并发更新同一条数据的时候，可能会出现缓存和数据库中的数据不一致的现象</strong>。</p><p>增加一些手段来解决这个问题，这里提供两种做法：</p><ul><li>在更新缓存前先加个<strong>分布式锁</strong>，保证同一时间只运行一个请求更新缓存，就会不会产生并发问题了，当然引入了锁后，对于写入的性能就会带来影响。</li><li>在更新完缓存时，给缓存加上较短的<strong>过期时间</strong>，这样即时出现缓存不一致的情况，缓存的数据也会很快过期，对业务还是能接受的。</li></ul><h3 id="先更新数据库，还是先删除缓存？"><a href="#先更新数据库，还是先删除缓存？" class="headerlink" title="先更新数据库，还是先删除缓存？"></a>先更新数据库，还是先删除缓存？</h3><p><strong>Cache Aside 策略</strong>：在更新数据时，不更新缓存，而是删除缓存中的数据。然后，到读取数据时，发现缓存中没了数据之后，再从数据库中读取数据，更新到缓存中。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031151154103.png" alt="Cache Aside 策略"></p><p><strong>写策略的步骤：</strong></p><ul><li>更新数据库中的数据；</li><li>删除缓存中的数据。</li></ul><p><strong>读策略的步骤：</strong></p><ul><li>如果读取的数据命中了缓存，则直接返回数据；</li><li>如果读取的数据没有命中缓存，则从数据库中读取数据，然后将数据写入到缓存，并且返回给用户。</li></ul><ol><li>先删除缓存，再更新数据库</li></ol><p>假设某个用户的年龄是 20，请求 A 要更新用户年龄为 21，所以它会删除缓存中的内容。这时，另一个请求 B 要读取这个用户的年龄，它查询缓存发现未命中后，会从数据库中读取到年龄为 20，并且写入到缓存中，然后请求 A 继续更改数据库，将用户的年龄更新为 21。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/cc208c2931b4e889d1a58cb655537767.png" alt="先删除缓存再更新数据库"></p><p>最终，该用户年龄在缓存中是 20（旧值），在数据库中是 21（新值），缓存和数据库的数据不一致。</p><p>可以看到，<strong>先删除缓存，再更新数据库，在「读 + 写」并发的时候，还是会出现缓存和数据库的数据不一致的问题</strong>。</p><p>针对<strong>「先删除缓存，再更新数据库」</strong>方案在「读 + 写」并发请求而造成缓存不一致的解决办法是「<strong>延迟双删</strong>」。（对于上面那张图而言，延迟删除的时机就在<mark>请求B结束为止即可进行延迟删除</mark>）</p><p>延迟双删实现的伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#删除缓存</span><br><span class="line">redis.delKey(X)</span><br><span class="line">#更新数据库</span><br><span class="line">db.update(X)</span><br><span class="line">#睡眠</span><br><span class="line">Thread.sleep(N)</span><br><span class="line">#再删除缓存</span><br><span class="line">redis.delKey(X)</span><br></pre></td></tr></table></figure><p>加了个睡眠时间，主要是为了确保请求 A 在睡眠的时候，请求 B 能够在这这一段时间完成「从数据库读取数据，再把缺失的缓存写入缓存」的操作，然后请求 A 睡眠完，再删除缓存。</p><p>所以，请求 A 的睡眠时间就需要大于请求 B 「从数据库读取数据 + 写入缓存」的时间。</p><p>但是具体睡眠多久其实是个<strong>玄学</strong>，很难评估出来，所以这个方案也只是<strong>尽可能</strong>保证一致性而已，极端情况下，依然也会出现缓存不一致的现象。</p><p>因此，还是比较建议用<strong>「先更新数据库，再删除缓存」</strong>的方案。</p><ol start="2"><li>先更新数据库，再删除缓存</li></ol><p>假如某个用户数据在缓存中不存在，请求 A 读取数据时从数据库中查询到年龄为 20，在未写入缓存中时另一个请求 B 更新数据。它更新数据库中的年龄为 21，并且清空缓存。这时请求 A 把从数据库中读到的年龄为 20 的数据写入到缓存中。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031152630816.png" alt="先更新数据库，再删除缓存"></p><p>理论上来讲这样先更新数据库再删除缓存也是会导致数据库缓存的不一致的，但是<mark>实际上发生这样的情况的几率很小</mark>，因为将写缓存的操作是要远远快于更新数据库的。</p><p>这个方案的基础上再加上对key做过期处理，就是一个可行的方案了，即使有一段时间的数据不一致，也会有过期策略来保底。</p><hr><p>但是上面的情况的前提是<strong>更新数据库</strong>和<strong>删除缓存</strong>这两件事是同时发生且都成功的情况下的，要做到同时发生，可以使用<code>lua</code>脚本进行原子性的操作，要做到都成功有以下两种方法：</p><ul><li>重试机制。</li><li>订阅 MySQL binlog，再操作缓存。</li></ul><ol><li>重试机制</li></ol><p>我们可以引入<strong>消息队列</strong>，将第二个操作（删除缓存）要操作的数据加入到消息队列，由消费者来操作数据。</p><ul><li>如果应用<strong>删除缓存失败</strong>，可以从消息队列中重新读取数据，然后再次删除缓存，这个就是<strong>重试机制</strong>。当然，如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。</li><li>如果<strong>删除缓存成功</strong>，就要把数据从消息队列中移除，避免重复操作，否则就继续重试。</li></ul><p>举个例子，来说明重试机制的过程。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031162859822.png" alt="消息队列重试机制"></p><ol start="2"><li>订阅 MySQL binlog，再操作缓存</li></ol><p>「<strong>先更新数据库，再删缓存</strong>」的策略的第一步是更新数据库，那么更新数据库成功，就会产生一条变更日志，记录在 binlog 里。</p><p>于是我们就可以通过订阅 binlog 日志，拿到具体要操作的数据，然后再执行缓存删除，阿里巴巴开源的 Canal 中间件就是基于这个实现的。</p><p>Canal 模拟 MySQL 主从复制的交互协议，把自己伪装成一个 MySQL 的从节点，向 MySQL 主节点发送 dump 请求，MySQL 收到请求后，就会开始推送 Binlog 给 Canal，Canal 解析 Binlog 字节流之后，转换为便于读取的结构化数据，供下游程序订阅使用。</p><p>下图是 Canal 的工作原理：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/2ee2280e9f59b6b4879ebdec6eb0cf52.png" alt="图片"></p><p>所以，<strong>如果要想保证「先更新数据库，再删缓存」策略第二个操作能执行成功，我们可以使用「消息队列来重试缓存的删除」，或者「订阅 MySQL binlog 再操作缓存」，这两种方法有一个共同的特点，<mark>都是采用异步操作缓存</mark>。</strong></p><blockquote><p>为什么是删除缓存，而不是更新缓存呢？</p></blockquote><p>删除一个数据，相比更新一个数据更加轻量级，出问题的概率更小。</p><p>比如商品详情信息，在底层可能会关联商品表、价格表、库存表等，如果更新了一个价格字段，那么就要更新整个数据库，还要关联的去查询和汇总各个周边业务系统的数据，这个操作会非常耗时。 从另外一个角度，不是所有的缓存数据都是频繁访问的，更新后的缓存可能会长时间不被访问，所以说，从计算资源和整体性能的考虑，更新的时候删除缓存，等到下次查询命中再填充缓存，是一个更好的方案。</p><h3 id="🔴🟡🟢总结"><a href="#🔴🟡🟢总结" class="headerlink" title="🔴🟡🟢总结"></a>🔴🟡🟢总结</h3><p>先更新数据库，再删除缓存，搭配上消息队列和过期策略就是最好的方案。</p><blockquote><p>数据要求一致性不强的时候就延迟双删，要求强一致就读写锁，性能差。</p></blockquote><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>分布式锁的核心思想就是让大家共用同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819135201384.png" alt="image-20230819135201384"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li>分布式锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">//锁的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="comment">//利用UUID增加复杂度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="comment">//具体业务名称，将前缀和业务名拼接之后当做Key</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//这里不需要@Autowired，因为该对象是我们使用构造函数手动new出来的</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁，使用SETNX方法进行加锁，同时设置过期时间，防止死锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//自动拆箱可能会出现null，这样写更稳妥</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">                Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>lua脚本</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的KEYS[1]就是传入锁的key</span></span><br><span class="line"><span class="comment">-- 这里的ARGV[1]就是线程标识</span></span><br><span class="line"><span class="comment">-- 比较锁中的线程标识与线程标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用锁</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">//获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">        <span class="comment">//加锁失败</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取代理对象(事务)</span></span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h3><blockquote><p>上面实现的分布式锁存在不可重入，不可重试的问题，将使用redisson提供的框架来实现</p></blockquote><p>解释：</p><p>上面实现的分布式锁是采用key-value形式的锁，在判断key相同之后则会直接认为这把锁已经被占用了，所以获取锁失败，但是redisson使用的是hash类型的数据结构，在看到锁已经存在后，不是直接认定获取锁失败，而是判断锁的标识是否是自己，如果是则value加一，代表重入次数加一，最后要删除锁也是要等到value为0，即程序运行到最外层的时候才能释放。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819144801293.png" alt="Redisson可重入锁原理"></p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230819160739146.png" alt="image-20230819160739146"></p><p><strong>重点：</strong></p><blockquote><p>使用lua脚本，等待重试，看门狗机制（用来续期锁）</p></blockquote><h2 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h2><p>使用推模式</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230821152151166.png" alt="image-20230821152151166"></p><p>滚动分页查询</p><p>zset</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h2><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p><h2 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h2><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231024153825141.png" alt="image-20231024153825141"></p><h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><ol><li>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231024154026128.png" alt="image-20231024154026128"></p><ol start="2"><li>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231024154101032.png" alt="image-20231024154101032"></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>使用<code>WATCH</code>命令是一种<strong>手动实现乐观锁</strong>的方式，可以在多个事务之间防止竞态条件和数据不一致。如果不去使用<code>WATCH</code>，Redis<strong>默认不会自动</strong>阻止多个事务之间的冲突。</p><h2 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h2><ol><li><p>单独的隔离操作 </p><ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li></ul></li><li><p>没有隔离级别的概念 </p><ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行，因为Redis的事务是单机的，没有并发读写的问题</li></ul></li><li><p>不保证原子性 </p><ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ol><h1 id="持久化篇"><a href="#持久化篇" class="headerlink" title="持久化篇"></a>持久化篇</h1><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="AOF日志"><a href="#AOF日志" class="headerlink" title="AOF日志"></a>AOF日志</h3><p>Redis 每执行一条写操作命令，就<strong>把该命令以追加的方式写入到一个文件里</strong>，然后重启 Redis 的时候，先去读取这个文件里的命令，并且执行它，这就相当于恢复了缓存数据。</p><blockquote><p>注意只会记录写操作命令，读操作命令是不会被记录的，因为没意义</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030203646649.png" alt="image-20231030203646649"></p><p>Redis 是<mark>先执行写操作命令后，才将该命令记录到 AOF 日志</mark>里的，这么做其实有两个好处。</p><ol><li>避免额外的检查开销</li></ol><p>因为如果先将写操作命令记录到 AOF 日志里，再执行该命令的话，如果当前的命令语法有问题，那么如果不进行命令语法检查，该错误的命令记录到 AOF 日志里后，Redis 在使用日志恢复数据时，就可能会出错。</p><p>而如果先执行写操作命令再记录日志的话，只有在该命令执行成功后，才将命令记录到 AOF 日志里，这样就不用额外的检查开销，保证记录在 AOF 日志里的命令都是可执行并且正确的。</p><ol start="2"><li>不会阻塞当前写操作命令的执行</li></ol><p>因为当写操作命令执行成功后，才会将命令记录到 AOF 日志。</p><p>AOF的两种潜在风险</p><ol><li><p>执行写操作命令和记录日志是两个过程，那当 Redis 在还没来得及将命令写入到硬盘时，服务器发生宕机了，这个数据就会有<mark>丢失的风险</mark>。</p></li><li><p>由于写操作命令执行成功后才记录到 AOF 日志，所以不会阻塞当前写操作命令的执行，但是<mark>可能会给「下一个」命令带来阻塞风险</mark>。</p></li></ol><p>因为将命令写入到日志的这个操作也是在主进程完成的（执行命令也是在主进程），也就是说这两个操作是同步的。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030205624444.png" alt="image-20231030205624444"></p><p>认真分析一下，其实这两个风险都有一个共性，都跟「 AOF 日志写回硬盘的时机」有关。</p><h3 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h3><p>Redis 写入 AOF 日志的过程，如下图：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030211449584.png" alt="image-20231030211449584"></p><p>具体流程：</p><ol><li>Redis 执行完写操作命令后，会将命令追加到 <code>server.aof_buf</code> 缓冲区；</li><li>然后通过 write() 系统调用，将 aof_buf 缓冲区的数据写入到 AOF 文件，此时数据并没有写入到硬盘，而是拷贝到了内核缓冲区 page cache，等待内核将数据写入硬盘；</li><li>具体内核缓冲区的数据什么时候写入到硬盘，由内核决定。</li></ol><p>Redis 提供了 3 种写回硬盘的策略，控制的就是上面说的第三步的过程。</p><ul><li><strong>Always</strong>，这个单词的意思是「总是」，所以它的意思是每次写操作命令执行完后，<mark>同步</mark>将 AOF 日志数据写回硬盘；</li><li><strong>Everysec</strong>，这个单词的意思是「每秒」，所以它的意思是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后<mark>每隔一秒将缓冲区里的内容写回到硬盘</mark>；</li><li><strong>No</strong>，意味着不由 Redis 控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，再由<mark>操作系统决定</mark>何时将缓冲区内容写回硬盘。</li></ul><p>这 3 种写回策略都无法能完美解决「主进程阻塞」和「减少数据丢失」的问题，因为两个问题是<mark>对立</mark>的，偏向于一边的话，就会要牺牲另外一边，原因如下：</p><ul><li>Always 策略的话，可以最大程度保证数据不丢失，但是由于它每执行一条写操作命令就同步将 AOF 内容写回硬盘，所以是不可避免会影响主进程的性能；</li><li>No 策略的话，是交由操作系统来决定何时将 AOF 日志内容写回硬盘，相比于 Always 策略性能较好，但是操作系统写回硬盘的时机是不可预知的，如果 AOF 日志内容没有写回硬盘，一旦服务器宕机，就会丢失不定数量的数据。</li><li>Everysec 策略的话，是折中的一种方式，避免了 Always 策略的性能开销，也比 No 策略更能避免数据丢失，当然如果上一秒的写操作命令日志没有写回到硬盘，发生了宕机，这一秒内的数据自然也会丢失。</li></ul><p>大家根据自己的业务场景进行选择：</p><ul><li>如果要高性能，就选择 No 策略；</li><li>如果要高可靠，就选择 Always 策略；</li><li>如果允许数据丢失一点，但又想性能高，就选择 Everysec 策略。</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030211756839.png" alt="image-20231030211756839"></p><p>深入到源码后，就会发现这三种策略只是在控制 <code>fsync()</code> 函数的调用时机。</p><p>当应用程序向文件写入数据时，内核通常先将数据复制到内核缓冲区中，然后排入队列，然后由内核决定何时写入硬盘。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030211900137.png" alt="image-20231030211900137"></p><p>如果想要应用程序向文件写入数据后，能立马将数据同步到硬盘，就可以调用 <code>fsync()</code> 函数，这样内核就会将内核缓冲区的数据直接写入到硬盘，等到硬盘写操作完成后，该函数才会返回。</p><ul><li>Always 策略就是每次写入 AOF 文件数据后，就执行 fsync() 函数；</li><li>Everysec 策略就会创建一个异步任务来执行 fsync() 函数；</li><li>No 策略就是永不执行 fsync() 函数；</li></ul><h3 id="AOF重写机制"><a href="#AOF重写机制" class="headerlink" title="AOF重写机制"></a>AOF重写机制</h3><p>当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。</p><p>AOF 重写机制是在重写时，读取当前数据库中的所有键值对，然后将每一个键值对用一条命令记录到「新的 AOF 文件」，等到全部记录完后，就将新的 AOF 文件替换掉现有的 AOF 文件。</p><p>重写机制的<mark>妙处</mark>在于，尽管某个键值对被多条写命令反复修改，<strong>最终也只需要根据这个「键值对」当前的最新状态，然后用一条命令去记录键值对</strong>，代替之前记录这个键值对的多条命令，这样就减少了 AOF 文件中的命令数量。最后在重写工作完成后，将新的 AOF 文件覆盖现有的 AOF 文件。</p><blockquote><p>为什么重写 AOF 的时候，不直接复用现有的 AOF 文件？</p></blockquote><p>因为<strong>如果 AOF 重写过程中失败了，现有的 AOF 文件就会造成污染</strong>，可能无法用于恢复使用。</p><p>所以 AOF 重写过程，先重写到新的 AOF 文件，重写失败的话，就直接删除这个文件就好，不会对现有的 AOF 文件造成影响。</p><h3 id="⭐⭐⭐AOF后台重写"><a href="#⭐⭐⭐AOF后台重写" class="headerlink" title="⭐⭐⭐AOF后台重写"></a>⭐⭐⭐AOF后台重写</h3><p>AOF重写过程其实是很耗时的，所以重写的操作不能放在主进程里。</p><p>所以，Redis 的<strong>重写 AOF 过程是由后台子进程 bgrewriteaof来完成的</strong>，这么做可以达到两个好处：</p><ul><li>子进程进行 AOF 重写期间，主进程可以继续处理命令请求，从而避免阻塞主进程；</li><li>子进程带有主进程的数据副本，这里使用子进程而不是线程，因为如果是使用线程，多线程之间会共享内存，那么在修改共享内存数据的时候，需要通过加锁来保证数据的安全，而这样就会降低性能。而使用子进程，创建子进程时，父子进程是共享内存数据的，不过这个共享的内存只能以只读的方式，而当父子进程任意一方修改了该共享内存，就会发生「写时复制」，于是父子进程就有了独立的数据副本，就不用加锁来保证数据安全。</li></ul><p>子进程是怎么拥有主进程一样的数据副本的呢？</p><p>Redis主进程在通过 <code>fork</code> 系统调用生成 bgrewriteaof 子进程时，操作系统会把主进程的「<strong>页表</strong>」复制一份给子进程，这个<strong>页表记录着<mark>虚拟地址和物理地址映射关系</mark>，而不会复制物理内存，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个</strong>。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/5a1f2a90b5f3821c19bea3b7a5f27fa1.png" alt="img"></p><p>这样一来，子进程就共享了父进程的物理内存数据了，这样能够<strong>节约物理内存资源</strong>，页表对应的页表项的属性会标记该物理内存的权限为<strong>只读</strong>。</p><p>不过，当父进程或者子进程在向这个内存发起写操作时，CPU 就会触发<strong>写保护中断</strong>，这个写保护中断是由于违反权限导致的，然后操作系统会在「写保护中断处理函数」里进行<strong>物理内存的复制</strong>，并重新设置其内存映射关系，将父子进程的内存读写权限设置为<strong>可读写</strong>，最后才会对内存进行写操作，这个过程被称为「**写时复制(Copy On Write)**」。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/d4cfac545377b54dd035c775603b4936.png" alt="img"></p><p>写时复制顾名思义，<strong>在发生写操作的时候，操作系统才会去复制物理内存</strong>，这样是为了防止 fork 创建子进程时，由于物理内存数据的复制时间过长而导致父进程长时间阻塞的问题。</p><p>AOF后台重写阻塞情况：</p><ol><li>写时复制</li><li>信号处理函数</li><li>复制父进程的页表：创建子进程的途中，由于要复制父进程的页表等数据结构，阻塞的时间跟页表的大小有关，页表越大，阻塞的时间也越长，<strong>不过页表的大小相比实际的物理内存小很多，所以通常复制页表的过程是比较快的。</strong></li></ol><p>🔴🟡🟢<strong>重写期间，如果主进程修改了数据</strong>：</p><p>当在 Redis 中启用了写时复制技术，特别是在 AOF（Append Only File）重写期间，如果主进程修改了数据，整体流程如下：</p><ol><li><p><strong>主进程执行写操作</strong>：</p><ul><li>主进程收到客户端的写命令请求。</li><li>主进程执行命令并将命令追加到 AOF 缓冲区和 AOF 重写缓冲区。</li></ul></li><li><p><strong>执行 AOF 后台重写</strong>：</p><ul><li>在重写 AOF 期间，后台子进程（bgrewriteaof）负责扫描数据库并将数据库中的键值对转换为一条命令，然后将命令记录到新的 AOF 文件中。</li></ul></li><li><p><strong>主进程修改已存在的数据</strong>：</p><ul><li>如果主进程在 AOF 重写期间修改了已存在的数据，根据写时复制机制，<mark>只会复制发生了修改的物理内存数据，未修改的部分仍然与子进程共享</mark>。</li><li>修改的数据在主进程的物理内存中，但在子进程的内存数据中是不一致的。</li></ul></li><li><p><strong>AOF 重写子进程与主进程数据不一致问题</strong>：</p><ul><li>为了解决数据不一致的问题，Redis <mark>设置了 AOF 重写缓冲区</mark>，在创建 bgrewriteaof 子进程之后开始使用。</li><li>主进程执行的写命令会被同时追加到 AOF 缓冲区和 AOF 重写缓冲区。</li></ul></li><li><p><strong>子进程完成 AOF 重写</strong>：</p><ul><li>子进程完成 AOF 重写后，向主进程发送信号。</li><li>主进程接收信号后，调用信号处理函数，<mark>将 AOF 重写缓冲区的内容追加到新 AOF 文件中</mark>，使得新旧 AOF 文件保存的数据库状态一致。</li></ul></li></ol><p>在这整个流程中，写时复制技术确保了只有在主进程发生修改时才会对物理内存数据进行复制，减少不必要的复制，同时 AOF 重写缓冲区帮助解决了主进程与子进程数据不一致的问题，保障了 AOF 文件的一致性。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB 快照就是记录某一个瞬间的内存数据，记录的是实际数据，而 AOF 文件记录的是命令操作的日志，而不是实际的数据。</p><p>因此在 Redis 恢复数据时， RDB 恢复数据的效率会比 AOF 高些，因为直接将 RDB 文件读入内存就可以，不需要像 AOF 那样还需要额外执行操作命令的步骤才能恢复数据。</p><h3 id="快照怎么用？"><a href="#快照怎么用？" class="headerlink" title="快照怎么用？"></a>快照怎么用？</h3><p>Redis 提供了两个命令来生成 RDB 文件，分别是 <code>save</code> 和 <code>bgsave</code>，他们的区别就在于是否在「主线程」里执行：</p><ul><li>执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，<strong>会阻塞主线程</strong>；</li><li>执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以<strong>避免主线程的阻塞</strong>；</li></ul><p>Redis 的快照是<strong>全量快照</strong>，也就是说每次执行快照，都是把内存中的「所有数据」都记录到磁盘中。</p><p>所以可以认为，执行快照是一个比较重的操作，如果频率太频繁，可能会对 Redis 性能产生影响。如果频率太低，服务器故障时，丢失的数据会更多。</p><p>通常可能设置至少 5 分钟才保存一次快照，这时如果 Redis 出现宕机等情况，则意味着最多可能丢失 5 分钟数据。</p><p>这就是 RDB 快照的缺点，在服务器发生故障时，丢失的数据会比 AOF 持久化的方式更多，因为 RDB 快照是全量快照的方式，因此执行的频率不能太频繁，否则会影响 Redis 性能，而 AOF 日志可以以秒级的方式记录操作命令，所以丢失的数据就相对更少。</p><h3 id="⭐⭐⭐执行快照时，数据能被修改吗？"><a href="#⭐⭐⭐执行快照时，数据能被修改吗？" class="headerlink" title="⭐⭐⭐执行快照时，数据能被修改吗？"></a>⭐⭐⭐执行快照时，数据能被修改吗？</h3><p>执行 bgsave 过程中，Redis 依然<strong>可以继续处理操作命令</strong>的，也就是数据是能被修改的。</p><p>技术依然是使用的写时复制技术，但是并不会像AOF那样还建立一个重写缓冲区，最后再通过信号函数重新追加命令到新的AOF文件中。</p><p>因为通过写时复制技术后，主进程和子进程所对应的那一块数据的内存区域就不一样了，所以子进程所记录的RDB文件中是<mark>不包含记录过程中新加入或修改的新数据的</mark>。</p><h3 id="RDB-和-AOF-合体"><a href="#RDB-和-AOF-合体" class="headerlink" title="RDB 和 AOF 合体"></a>RDB 和 AOF 合体</h3><p>尽管 RDB 比 AOF 的数据恢复速度快，但是快照的频率不好把握：</p><ul><li>如果频率太低，两次快照间一旦服务器发生宕机，就可能会比较多的数据丢失；</li><li>如果频率太高，频繁写入磁盘和创建子进程会带来额外的性能开销。</li></ul><p>那有没有什么方法不仅有 RDB 恢复速度快的优点和，又有 AOF 丢失数据少的优点呢？</p><p>当然有，那就是将 RDB 和 AOF 合体使用，这个方法是在 Redis 4.0 提出的，该方法叫<strong>混合使用 AOF 日志和内存快照</strong>，也叫混合持久化。</p><p>当开启了混合持久化时，在 <mark>AOF 重写日志时</mark>，<code>fork</code> 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在<mark>重写缓冲区</mark>里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</p><p>也就是说，使用了混合持久化，AOF 文件的<strong>前半部分是 RDB 格式的全量数据，后半部分是 AOF 格式的增量数据</strong>。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231030213846575.png" alt="image-20231030213846575"></p><p>这样的好处在于，重启 Redis 加载数据的时候，由于前半部分是 RDB 内容，这样<strong>加载的时候速度会很快</strong>。</p><p>加载完 RDB 的内容后，才会加载后半部分的 AOF 内容，这里的内容是 Redis 后台子进程重写 AOF 期间，主线程处理的操作命令，可以使得<strong>数据更少的丢失</strong>。</p><h2 id="Redis-大-Key-对持久化有什么影响？"><a href="#Redis-大-Key-对持久化有什么影响？" class="headerlink" title="Redis 大 Key 对持久化有什么影响？"></a>Redis 大 Key 对持久化有什么影响？</h2><h3 id="大-Key-对-AOF-日志的影响"><a href="#大-Key-对-AOF-日志的影响" class="headerlink" title="大 Key 对 AOF 日志的影响"></a>大 Key 对 AOF 日志的影响</h3><p>当使用 <strong>Always</strong> 策略的时候，如果写入是一个大 Key，主线程在执行 fsync() 函数的时候，<mark>阻塞的时间会比较久</mark>，因为当写入的数据量很大的时候，数据同步到硬盘这个过程是很耗时的。</p><p>当使用 <strong>Everysec</strong> 策略的时候，由于是异步执行 fsync() 函数，所以大 Key 持久化的过程（数据同步磁盘）<mark>不会影响主线程</mark>。</p><p>当使用 <strong>No</strong> 策略的时候，由于永不执行 fsync() 函数，所以大 Key 持久化的过程不会影响主线程。</p><h3 id="大-Key-对-AOF-重写和-RDB-的影响"><a href="#大-Key-对-AOF-重写和-RDB-的影响" class="headerlink" title="大 Key 对 AOF 重写和 RDB 的影响"></a>大 Key 对 AOF 重写和 RDB 的影响</h3><ol><li>复制页表期间：</li></ol><p>随着 Redis 存在越来越多的大 Key，那么 Redis 就会占用很多内存，对应的页表就会越大。</p><p>Redis主进程在通过 <code>fork()</code> 函数创建子进程的时候，虽然不会复制父进程的物理内存，但是<strong>内核会把父进程的页表复制一份给子进程，如果页表很大，那么这个复制过程是会很耗时的，那么在执行 fork 函数的时候就会发生阻塞现象</strong>。</p><ol start="2"><li>写时复制期间：</li></ol><p>如果创建完子进程后，<strong>父进程对共享内存中的大 Key 进行了修改，那么内核就会发生写时复制，会把物理内存复制一份，由于大 Key 占用的物理内存是比较大的，那么在复制物理内存这一过程中，也是比较耗时的，于是父进程（主线程）就会发生阻塞</strong>。</p><h1 id="高可用篇✏️"><a href="#高可用篇✏️" class="headerlink" title="高可用篇✏️"></a>高可用篇✏️</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>主服务器写，从服务器读，在从机上写数据会报错</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031212316265.png" alt="主从复制图"></p><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ol><li>当从服务器连接上主服务器之后，从服务器向主服务发送进行数据同步消息</li><li>主服务器接到从服务器发送过来同步消息，把主服务器数据进行持久化<code>rdb</code>文件，把<code>rdb</code>文件发送从服务器，从服务器拿到<code>rdb</code>文件进行读取</li></ol><blockquote><p>🌈补充：</p><p><strong>主服务器在下面这三个时间间隙中将收到的写操作命令，写入到 replication buffer 缓冲区里</strong>：</p><ul><li>主服务器生成 RDB 文件期间；</li><li>主服务器发送 RDB 文件给从服务器期间；</li><li>「从服务器」加载 RDB 文件期间；</li></ul><p>当完成 RDB 的载入后，主服务器将 replication buffer 缓冲区里所记录的写操作命令发送给从服务器，从服务器执行来自主服务器 replication buffer 缓冲区里发来的命令，这时主从服务器的数据就一致了。</p><p>至此，主从服务器的<mark>第一次同步</mark>的工作就完成了。</p></blockquote><ol start="3"><li>每次主服务器进行写操作之后，和从服务器进行数据同步，<mark><strong>基于长连接的命令传播</strong></mark></li></ol><blockquote><p>🌈补充：</p><p>主从服务器完成第一次数据同步后，TCP网络连接会一直维持着，后续主服务器可以通过这个连接继续将写操作命令传播给从服务器，然后从服务器执行该命令，使得与主服务器的数据库状态相同。</p></blockquote><ol start="4"><li>当发生网络波动问题导致基于长连接的命令传播断开时：</li></ol><p>在 Redis 2.8 之前，如果主从服务器在命令同步时出现了网络断开又恢复的情况，从服务器就会和主服务器重新进行一次全量复制，很明显这样的开销太大了，必须要改进一波。</p><p>所以，从 Redis 2.8 开始，网络断开又恢复后，从主从服务器会采用<mark><strong>增量复制</strong></mark>的方式继续同步，也就是只会把网络断开期间主服务器接收到的写操作命令，同步给从服务器。</p><p><strong>主服务器怎么知道要将哪些增量数据发送给从服务器呢？</strong></p><p>答案藏在这两个东西里：</p><ul><li><strong>repl_backlog_buffer</strong>，是一个「<strong>环形</strong>」缓冲区，用于主从服务器断连后，从中找到差异的数据；</li><li><strong>replication offset</strong>，标记上面那个缓冲区的同步进度，主从服务器都有各自的<mark>偏移量</mark>，主服务器使用 master_repl_offset 来记录自己「<em>写</em>」到的位置，从服务器使用 slave_repl_offset 来记录自己「<em>读</em>」到的位置。</li></ul><p>那 repl_backlog_buffer 缓冲区是什么时候写入的呢？</p><p>在主服务器进行命令传播时，不仅会将写命令发送给从服务器，还会将写命令写入到 repl_backlog_buffer 缓冲区里，因此 这个缓冲区里会保存着最近传播的写命令。</p><p>网络断开后，当从服务器重新连上主服务器时，从服务器会通过 psync 命令将自己的复制偏移量 slave_repl_offset 发送给主服务器，主服务器根据自己的 master_repl_offset 和 slave_repl_offset 之间的差距，然后来决定对从服务器执行哪种同步操作：</p><ul><li>如果判断出从服务器要读取的数据还在 repl_backlog_buffer 缓冲区里，那么主服务器将采用<strong>增量同步</strong>的方式；</li><li>相反，如果判断出从服务器要读取的数据已经不存在 repl_backlog_buffer 缓冲区里，那么主服务器将采用<strong>全量同步</strong>的方式。</li></ul><p>当主服务器在 repl_backlog_buffer 中找到主从服务器差异（增量）的数据后，就会将增量的数据写入到 replication buffer 缓冲区，这个缓冲区我们前面也提到过，它是缓存将要传播给从服务器的命令。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/2db4831516b9a8b79f833cf0593c1f12.png" alt="图片"></p><p>repl_backlog_buffer 缓行缓冲区的默认大小是 1M，并且由于它是一个<mark>环形缓冲区</mark>，所以当缓冲区写满后，主服务器继续写入的话，就会覆盖之前的数据。因此，<strong>当主服务器的写入速度远超于从服务器的读取速度，缓冲区的数据一下就会被覆盖。</strong></p><p>那么在网络恢复时，如果从服务器想读的数据已经被覆盖了，主服务器就会采用全量同步，这个方式比增量同步的性能损耗要大很多。</p><p>因此，<strong>为了避免在网络恢复时，主服务器频繁地使用全量同步的方式，我们应该调整下 repl_backlog_buffer 缓冲区大小，<mark>尽可能的大一些</strong></mark>。</p><h3 id="复制延迟"><a href="#复制延迟" class="headerlink" title="复制延迟"></a>复制延迟</h3><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><p>当一台从服务器挂了之后，此时在这个期间主服务器写入数据，此时再将该挂掉了的从服务器重新启动，此时这台服务器已经不再是从服务器了，即与原来的主服务器失去了主从关系，它现在变成了一个独立的主服务器，再让该服务器去与原来的主服务器去建立联系，那么就会将主服务器的当前的所有内容（<mark>即包括在其挂掉的那期间的数据</mark>）全部复制到从服务器上。</p><p>当主服务器挂掉之后，剩下的从服务器不会发生改变，依然认为原来的主服务器是主服务器，并不会自己成为新的主服务器，等到原来的主服务器重启后，一切恢复正常。</p><h3 id="级联复制"><a href="#级联复制" class="headerlink" title="级联复制"></a>级联复制</h3><p>其实就是像个链表一样，将数据同步的方式由一台主服务器给多台服务器传达，转变为A-&gt;B-&gt;C这样的模式。</p><ul><li><p>优点：通过这种方式，<strong>主服务器生成 RDB 和传输 RDB 的<mark>压力</mark>可以<mark>分摊</mark>到充当经理角色的从服务器</strong>。</p></li><li><p><del>缺点：B作为C的主服务器，那么B服务器就可以进行写操作了，但B服务器却是A服务器的从服务器，B服务器如果写了数据那么A服务器是无法进行同步的，这就出现了数据的不同步问题。</del></p></li><li><p>一般不会出现B服务器主动写的操作，B服务器的写操作只是继承自A服务器的数据而去写到C服务器。</p></li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231031222351693.png" alt="薪火相传"></p><h3 id="小林coding面试题-1"><a href="#小林coding面试题-1" class="headerlink" title="小林coding面试题"></a>小林coding面试题</h3><ol><li>Redis主从节点时长连接还是短连接？</li></ol><blockquote><p>长连接</p></blockquote><ol start="2"><li>怎么判断 Redis 某个节点是否正常工作？</li></ol><blockquote><p>Redis 判断节点是否正常工作，基本都是通过互相的 ping-pong <mark>心态检测机制</mark>，如果<mark>有一半以上的节点去 ping 一个节点的时候没有 pong 回应</mark>，集群就会认为这个节点挂掉了，会断开与这个节点的连接。</p></blockquote><ol start="3"><li>主从复制架构中，过期key如何处理？</li></ol><blockquote><p>主节点处理了一个key或者通过淘汰算法淘汰了一个key，这个时间<mark>主节点模拟一条del命令发送给从节点</mark>，从节点收到该命令后，就进行删除key的操作。</p></blockquote><ol start="4"><li>Redis 是同步复制还是异步复制？</li></ol><blockquote><p>Redis 主节点每次收到写命令之后，先写到内部的缓冲区，然后异步发送给从节点。</p></blockquote><ol start="5"><li>主从复制中两个 Buffer(replication buffer 、repl backlog buffer)有什么区别？</li></ol><blockquote><p>replication buffer 、repl backlog buffer 区别如下：</p><ul><li>出现的阶段不一样：</li><li>repl backlog buffer 是在增量复制阶段出现，<strong>一个主节点只分配一个 repl backlog buffer</strong>；</li><li>replication buffer 是在全量复制阶段和增量复制阶段都会出现，<strong>主节点会给每个新连接的从节点，分配一个 replication buffer</strong>；</li><li>这两个 Buffer 都有大小限制的，当缓冲区满了之后，发生的事情不一样：</li><li>当 repl backlog buffer 满了，因为是环形结构，会直接<strong>覆盖起始位置数据</strong>;</li><li>当 replication buffer 满了，会导致连接断开，删除缓存，从节点重新连接，<strong>重新开始全量复制</strong>。</li></ul></blockquote><ol start="6"><li>如何应对主从数据不一致？</li></ol><blockquote><p><strong>主从节点间的命令复制是异步进行的</strong>，所以无法实现强一致性保证（主从数据时时刻刻保持一致）。</p><p>第一种方法，尽量保证主从节点间的网络连接状况良好，避免主从节点在不同的机房。</p><p>第二种方法，可以开发一个外部程序来监控主从节点间的复制进度。如果监控到某个从节点总是很大程度上的，很长时间段的不一致，可以让客户端不再和这个从节点连接进行数据读取，这样就可以减少读到不一致数据的情况。</p></blockquote><ol start="7"><li>主从切换如何减少数据丢失？</li></ol><blockquote><p>主从切换过程中，产生数据丢失的情况有两种：</p><ul><li>异步复制同步丢失</li><li>集群产生脑裂数据丢失</li></ul><p>我们不可能保证数据完全不丢失，只能做到使得尽量少的数据丢失。</p><p>待补充。。。。。</p></blockquote><ol start="8"><li>主从如何做到故障自动切换？</li></ol><blockquote><p>Redis 哨兵机制可以实现：哨兵在发现主节点出现故障时，由哨兵自动完成故障发现和故障转移，并通知给应用方，从而实现高可用性。</p></blockquote><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>🔴🟡🟢一句话总结：</p><blockquote><p>能够自动后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。当从服务器切换为新的主服务器后，原来的主服务器就变成了其的从服务器。</p></blockquote><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231101101453322.png" alt="哨兵模式"></p><p>哨兵节点主要负责三件事情：<strong>监控、选主、通知</strong>。</p><h3 id="如何判断主节点真的故障了？"><a href="#如何判断主节点真的故障了？" class="headerlink" title="如何判断主节点真的故障了？"></a>如何判断主节点真的故障了？</h3><p>哨兵会每隔 1 秒给所有主从节点发送 PING 命令，当主从节点收到 PING 命令后，会发送一个响应命令给哨兵，这样就可以判断它们是否在正常运行。</p><p>如果主节点或者从节点没有在规定的时间内响应哨兵的 PING 命令，哨兵就会将它们标记为「<strong>主观下线</strong>」。</p><p><mark>客观下线只适用于主节点。</mark></p><p>之所以针对「主节点」设计「主观下线」和「客观下线」两个状态，是因为有可能「主节点」其实并没有故障，可能只是因为主节点的系统压力比较大或者网络发送了拥塞，导致主节点没有在规定时间内响应哨兵的 PING 命令。</p><p>所以，为了减少误判的情况，哨兵在部署的时候不会只部署一个节点，而是用多个节点部署成<strong>哨兵集群</strong>（<em>最少需要三台机器来部署哨兵集群</em>），<strong>通过多个哨兵节点一起判断，就可以就可以<mark>避免单个哨兵因为自身网络状况不好，而误判</mark>主节点下线的情况</strong>。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。</p><p>具体是怎么判定主节点为「客观下线」的呢？</p><p>当一个哨兵判断主节点为「主观下线」后，就会向其他哨兵发起命令，其他哨兵收到这个命令后，就会根据自身和主节点的网络状况，做出赞成投票或者拒绝投票的响应。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/13e4361407ba46979e802eaa654dcf67.png" alt="img"></p><p>当这个哨兵的赞同票数达到哨兵配置文件中的 quorum 配置项设定的值后，这时主节点就会被该哨兵标记为「客观下线」。</p><p>例如，现在有 3 个哨兵，quorum 配置的是 2，那么一个哨兵需要 2 张赞成票，就可以标记主节点为“客观下线”了。这 2 张赞成票包括哨兵自己的一张赞成票和另外两个哨兵的赞成票。</p><p>PS：quorum 的值一般设置为哨兵个数的二分之一加 1，例如 3 个哨兵就设置 2。</p><p>哨兵判断完主节点客观下线后，哨兵就要开始在多个「从节点」中，选出一个从节点来做新主节点。</p><p>🔴🟡🟢<strong>总结</strong>：</p><blockquote><p>其实就是通过哨兵集群，超过半数的哨兵节点认为主服务器故障，那么就认为其真的故障了。</p></blockquote><h3 id="由哪个哨兵进行主从故障转移？"><a href="#由哪个哨兵进行主从故障转移？" class="headerlink" title="由哪个哨兵进行主从故障转移？"></a>由哪个哨兵进行主从故障转移？</h3><p>哨兵是以哨兵集群的方式存在的，需要在哨兵集群中选出一个 leader，让 leader 来执行主从切换。</p><p>哪个哨兵节点判断主节点为「客观下线」，这个哨兵节点就是候选者，所谓的候选者就是想当 Leader 的哨兵。</p><p>那么在投票过程中，任何一个「候选者」，要<mark>满足两个条件</mark>：</p><ul><li>第一，拿到半数以上的赞成票；</li><li>第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。</li></ul><p>哨兵节点至少要有 3 个，而且是奇数，且quorum 的值建议设置为哨兵个数的二分之一加 1。</p><h3 id="主从故障转移的过程是怎样的？"><a href="#主从故障转移的过程是怎样的？" class="headerlink" title="主从故障转移的过程是怎样的？"></a>主从故障转移的过程是怎样的？</h3><ol><li>选出新主节点</li></ol><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231101101607619.png" alt="执行流程图"></p><ul><li>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</li><li>偏移量是指获得原主机数据最全的</li><li>每个redis实例启动后都会随机生成一个40位的runid</li></ul><ol start="2"><li>从节点指向新主节点</li></ol><p>当新主节点出现之后，哨兵 leader 下一步要做的就是，让已下线主节点属下的所有「从节点」指向「新主节点」</p><ol start="3"><li>通知客户的主节点已更换</li></ol><p>通过 Redis 的发布者&#x2F;订阅者机制来实现</p><ol start="4"><li>将旧主节点变为从节点</li></ol><p>故障转移操作最后要做的是，继续监视旧主节点，当旧主节点重新上线时，哨兵集群就会向它发送 <code>SLAVEOF</code> 命令，让它成为新主节点的从节点。</p><h3 id="哨兵集群是如何组成的？"><a href="#哨兵集群是如何组成的？" class="headerlink" title="哨兵集群是如何组成的？"></a>哨兵集群是如何组成的？</h3><p>在主从集群中，主节点上有一个名为<code>__sentinel__:hello</code>的频道，不同哨兵就是通过它来相互发现，实现互相通信的。</p><p>在下图中，哨兵 A 把自己的 IP 地址和端口的信息发布到<code>__sentinel__:hello</code> 频道上，哨兵 B 和 C 订阅了该频道。那么此时，哨兵 B 和 C 就可以从这个频道直接获取哨兵 A 的 IP 地址和端口号。然后，哨兵 B、C 可以和哨兵 A 建立网络连接。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/a6286053c6884cf58bf397d01674fe80.png" alt="img"></p><p>通过这个方式，哨兵 B 和 C 也可以建立网络连接，这样一来，哨兵集群就形成了。</p><blockquote><p>哨兵集群会对「从节点」的运行状态进行监控，那哨兵集群如何知道「从节点」的信息？</p></blockquote><p>主节点知道所有「从节点」的信息，<strong>所以哨兵会每 10 秒一次的频率向主节点发送 INFO 命令来获取所有「从节点」的信息。</strong></p><p>如下图所示，哨兵 B 给主节点发送 INFO 命令，主节点接受到这个命令后，就会把从节点列表返回给哨兵。接着，哨兵就可以根据从节点列表中的连接信息，和每个从节点建立连接，并在这个连接上持续地对从节点进行监控。哨兵 A 和 C 可以通过相同的方法和从节点建立连接。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/fdd5f695bb3643258662886f9fba0aab.png" alt="img"></p><p>正是通过 <mark>Redis 的发布者&#x2F;订阅者机制</mark>，哨兵之间可以相互感知，然后组成集群，同时，哨兵又通过 INFO 命令，在主节点里获得了所有从节点连接信息，于是就能和从节点建立连接，并进行监控了。</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>待补充。。。。。。</p><h3 id="集群脑裂导致数据丢失怎么办？"><a href="#集群脑裂导致数据丢失怎么办？" class="headerlink" title="集群脑裂导致数据丢失怎么办？"></a>集群脑裂导致数据丢失怎么办？</h3><blockquote><p>什么是脑裂？</p></blockquote><p>先来理解集群的脑裂现象，这就好比一个人有两个大脑，那么到底受谁控制呢？</p><p>那么在 Redis 中，集群脑裂产生数据丢失的现象是怎样的呢？</p><p>在 Redis 主从架构中，部署方式一般是「一主多从」，主节点提供写操作，从节点提供读操作。 如果主节点的网络突然发生了问题，它与所有的从节点都失联了，但是此时的主节点和客户端的网络是正常的，这个客户端并不知道 Redis 内部已经出现了问题，还在照样的向这个失联的主节点写数据（过程A），此时这些数据被旧主节点缓存到了缓冲区里，因为主从节点之间的网络问题，这些数据都是无法同步给从节点的。</p><p>这时，哨兵也发现主节点失联了，它就认为主节点挂了（但实际上主节点正常运行，只是网络出问题了），于是哨兵就会在「从节点」中选举出一个 leader 作为主节点，这时集群就有两个主节点了 —— <strong>脑裂出现了</strong>。</p><p>然后，网络突然好了，哨兵因为之前已经选举出一个新主节点了，它就会把旧主节点降级为从节点（A），然后从节点（A）会向新主节点请求数据同步，<strong>因为第一次同步是全量同步的方式，此时的从节点（A）会清空掉自己本地的数据，然后再做全量同步。所以，之前客户端在过程 A 写入的数据就会丢失了，也就是集群产生脑裂数据丢失的问题</strong>。</p><blockquote><p>🔴🟢🟡总结一句话就是：由于网络问题，集群节点之间失去联系。主从数据不同步；重新平衡选举，产生两个主服务。等网络恢复，旧主节点会降级为从节点，再与新主节点进行同步复制的时候，由于会从节点会清空自己的缓冲区，所以导致之前客户端写入的数据丢失了。</p></blockquote><p>**解决方案:**其实都是<mark>限制</mark>主库不再接收客户端的写请求</p><h1 id="功能篇"><a href="#功能篇" class="headerlink" title="功能篇"></a>功能篇</h1><h2 id="过期删除策略"><a href="#过期删除策略" class="headerlink" title="过期删除策略"></a>过期删除策略</h2><h3 id="如何判定-key-已过期了？"><a href="#如何判定-key-已过期了？" class="headerlink" title="如何判定 key 已过期了？"></a>如何判定 key 已过期了？</h3><blockquote><p>🔴🟢🟡一句话总结：设置过期时间会将该key带上过期时间存入过期字典（哈希表），在里面根据key找不到就是没设置过期时间，找到了就与系统当前时间进行比较。</p></blockquote><p>每当我们对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个<mark><strong>过期字典</strong></mark>（expires dict）中，也就是说「过期字典」保存了数据库中所有 key 的过期时间。</p><p>过期字典存储在 redisDb 结构中，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    dict *dict;    <span class="comment">/* 数据库键空间，存放着所有的键值对 */</span></span><br><span class="line">    dict *expires; <span class="comment">/* 键的过期时间 */</span></span><br><span class="line">    ....</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><p>过期字典数据结构结构如下：</p><ul><li>过期字典的 <strong>key</strong> 是一个指针，指向某个键对象；</li><li>过期字典的 <strong>value</strong> 是一个 long long 类型的整数，这个整数保存了 key 的过期时间；</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231107084229499.png" alt="image-20231107084229499"></p><hr><p>字典实际上是<mark>哈希表</mark>，哈希表的最大好处就是让我们可以用 O(1) 的时间复杂度来快速查找。当我们查询一个 key 时，Redis 首先检查该 key 是否存在于过期字典中：</p><ul><li>如果不在，则正常读取键值；</li><li>如果存在，则会获取该 key 的过期时间，然后与当前系统时间进行比对，如果比系统时间大，那就没有过期，否则判定该 key 已过期。</li></ul><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231106220549674.png" alt="流程图"></p><h3 id="过期删除策略有哪些？"><a href="#过期删除策略有哪些？" class="headerlink" title="过期删除策略有哪些？"></a>过期删除策略有哪些？</h3><ol><li>定时删除</li></ol><p>定时删除策略的做法是，<strong>在设置 key 的过期时间时，同时创建一个定时事件，当时间到达时，由事件处理器自动执行 key 的删除操作。</strong></p><p>定时删除策略的<strong>优点</strong>：</p><ul><li>可以保证过期 key 会被尽快删除，也就是内存可以被尽快地释放。因此，定时删除对内存是最友好的。</li></ul><p>定时删除策略的<strong>缺点</strong>：</p><ul><li>在过期 key 比较多的情况下，删除过期 key 可能会占用相当一部分 CPU 时间，在内存不紧张但 CPU 时间紧张的情况下，将 CPU 时间用于删除和当前任务无关的过期键上，无疑会对服务器的响应时间和吞吐量造成影响。所以，定时删除策略对 CPU 不友好。</li></ul><ol start="2"><li>惰性删除</li></ol><p>惰性删除策略的做法是，<strong>不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。</strong></p><ul><li>惰性删除策略的<strong>优点</strong>：</li></ul><p>因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对 CPU 时间最友好。</p><ul><li>惰性删除策略的<strong>缺点</strong>：</li></ul><p>如果一个 key 已经过期，而这个 key 又仍然保留在数据库中，那么只要这个过期 key 一直没有被访问，它所占用的内存就不会释放，造成了一定的内存空间浪费。所以，惰性删除策略对内存不友好。</p><ol start="3"><li>定期删除</li></ol><p>定期删除策略的做法是，<strong>每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。</strong></p><blockquote><p>特别强调下，每次检查数据库并<mark>不是遍历过期字典</mark>中的所有 key，而是从<mark>数据库中随机抽取</mark>一定数量的 key 进行过期检查。</p></blockquote><p>定期删除策略的<strong>优点</strong>：</p><ul><li>通过限制删除操作执行的时长和频率，来减少删除操作对 CPU 的影响，同时也能删除一部分过期的数据减少了过期键对空间的无效占用。</li></ul><p>定期删除策略的<strong>缺点</strong>：</p><ul><li>内存清理方面没有定时删除效果好，同时没有惰性删除使用的系统资源少。</li><li>难以确定删除操作执行的时长和频率。如果执行的太频繁，定期删除策略变得和定时删除策略一样，对CPU不友好；如果执行的太少，那又和惰性删除一样了，过期 key 占用的内存不会及时得到释放。</li></ul><p>🌈补充：</p><p>Redis会设置一个定时任务serverCron()，按照server.hz的频率来执行过期key清理，模式为SLOW</p><p>Redis的每个事件循环前会调用beforesleep()函数，执行过期key清理，模式为FAST</p><p>SLow模式规则:</p><ol><li>执行频率受server.hz影响，默认为10，即每秒执行10次，每个执行周期100ms。</li><li>执行清理耗时不超过一次执行周期的25%</li><li>逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>如果没达到时间上限 (25ms)并且过期key比例大于10%，再进行一次抽样，否则结束</li></ol><p>FAST模式规则(过期key比例小于10%不执行):</p><ol><li>执行频率受beforesleep()调用频率影响，但两次FAST模式间隔不低于2ms</li><li>执行清理耗时不超过1ms</li><li>逐个遍历db，逐个遍历db中的bucket，抽取20个key判断是否过期</li><li>如果没达到时间上限(1ms)并且过期key比例大于10%，再进行一次抽样，否则结束</li></ol><h3 id="Redis-过期删除策略是什么？"><a href="#Redis-过期删除策略是什么？" class="headerlink" title="Redis 过期删除策略是什么？"></a>Redis 过期删除策略是什么？</h3><p><strong>Redis 选择<mark>「惰性删除+定期删除」</mark>这两种策略配和使用</strong>，以求在合理使用 CPU 时间和避免内存浪费之间取得平衡。</p><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><p>当 Redis 的运行内存已经超过 Redis 设置的最大内存之后，则会使用内存淘汰策略删除符合条件的 key</p><h3 id="Redis-内存淘汰策略有哪些？"><a href="#Redis-内存淘汰策略有哪些？" class="headerlink" title="Redis 内存淘汰策略有哪些？"></a>Redis 内存淘汰策略有哪些？</h3><p>Redis支持8种不同策略来选择要删除的key：</p><ol><li><p>noeviction： 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略。</p></li><li><p>volatile-ttl： 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</p></li></ol><blockquote><p>第2点补充：当运行内存超过最大设置内存时，不淘汰任何数据，但新增操作会报错。</p></blockquote><ol start="3"><li><p>allkeys-random：对全体key ，随机进行淘汰。也就是直接从db-&gt;dict中随机挑选</p></li><li><p>volatile-random：对设置了TTL的key ，随机进行淘汰。也就是从db-&gt;expires中随机挑选。</p></li><li><p>allkeys-lru： 对全体key，基于LRU算法进行淘汰</p></li><li><p>volatile-lru： 对设置了TTL的key，基于LRU算法进行淘汰</p></li><li><p>allkeys-lfu： 对全体key，基于LFU算法进行淘汰</p></li><li><p>volatile-lfu： 对设置了TTL的key，基于LFU算法进行淘汰</p></li></ol><p>淘汰策略流程：</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20231107112532443.png" alt="淘汰策略流程"></p><h3 id="LRU-算法和-LFU-算法有什么区别？"><a href="#LRU-算法和-LFU-算法有什么区别？" class="headerlink" title="LRU 算法和 LFU 算法有什么区别？"></a>LRU 算法和 LFU 算法有什么区别？</h3><p>🔴🟢🟡一句话总结：</p><p>LRU：最后一次访问时间隔得越久，这个淘汰优先级越高</p><p>LFU：最少频率使用，频率越低，淘汰优先级越高</p><hr><p>Redis 对象头中的 lru 字段，在 LRU 算法下和 LFU 算法下使用方式并不相同。</p><p><strong>在 LRU 算法中</strong>，Redis 对象头的 24 bits 的 lru 字段是用来记录 key 的访问时间戳，因此在 LRU 模式下，Redis可以根据对象头中的 lru 字段记录的值，来比较最后一次 key 的访问时间长，从而淘汰最久未被使用的 key。</p><p><strong>在 LFU 算法中</strong>，Redis对象头的 24 bits 的 lru 字段被分成两段来存储，高 16bit 存储 ldt(Last Decrement Time)，低 8bit 存储 logc(Logistic Counter)。</p><p><img src="/../assets/Redis%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/lru%E5%AD%97%E6%AE%B5.png" alt="img"></p><ul><li>ldt 是用来记录 key 的访问时间戳；</li><li>logc 是用来记录 key 的访问频次，它的值越小表示使用频率越低，越容易淘汰，每个新加入的 key 的logc 初始值为 5。</li></ul><p>注意，logc 并不是单纯的访问次数，而是访问频次（访问频率），因为 <strong>logc 会随时间推移而衰减的</strong>。</p><p>在每次 key 被访问时，会先对 logc 做一个衰减操作，衰减的值跟前后访问时间的差距有关系，如果上一次访问的时间与这一次访问的时间差距很大，那么衰减的值就越大，这样实现的 LFU 算法是根据<strong>访问频率</strong>来淘汰数据的，而不只是访问次数。访问频率需要考虑 key 的访问是多长时间段内发生的。key 的先前访问距离当前时间越长，那么这个 key 的访问频率相应地也就会降低，这样被淘汰的概率也会更大。</p><p>对 logc 做完衰减操作后，就开始对 logc 进行增加操作，增加操作并不是单纯的 + 1，而是根据概率增加，如果 logc 越大的 key，它的 logc 就越难再增加。</p><p>所以，Redis 在访问 key 时，对于 logc 是这样变化的：</p><ol><li>先按照上次访问距离当前的时长，来对 logc 进行衰减；</li><li>然后，再按照一定概率增加 logc 的值</li></ol>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习并部署项目</title>
      <link href="/2023/07/28/Study-Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/07/28/Study-Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>pwd</td><td>查看当前所在目录</td><td></td></tr><tr><td>touch</td><td>如果文件不存在则新建一个文件</td><td></td></tr><tr><td>ls</td><td>显示指定目录下的内容</td><td><code>-a</code>：显示所有文件及目录（以<code>.</code>开头的隐藏文件也会列出） <code>-l</code>：除文件名外，还会讲文件的形态、权限、拥有者、文件大小等详细信息列出，可简化为ll（常用）</td></tr><tr><td>cat</td><td>用于显示文件内容</td><td><code>-n</code>：由1开始对所有输出的行数编号</td></tr><tr><td>more</td><td>以分页的形式显示文件内容</td><td></td></tr><tr><td>tail</td><td>查看文件末尾的内容</td><td><code>-f</code>：动态读取文件末尾内容并显示，通常用于日志文件的内容输出</td></tr><tr><td>mkdir</td><td>创建目录</td><td><code>-p</code>：确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</td></tr><tr><td>rmdir</td><td>删除空目录</td><td><code>-p</code>：当子目录被删除后使父目录为空目录的话，则一并删除</td></tr><tr><td>rm</td><td>删除文件或者目录</td><td><code>-r</code>：将目录及目录中所有文件（目录）逐一删除，即递归删除 <code>-f</code>：无需确认，直接删除</td></tr></tbody></table><h2 id="拷贝移动命令"><a href="#拷贝移动命令" class="headerlink" title="拷贝移动命令"></a>拷贝移动命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>cp</td><td>用于复制文件或目录</td><td><code>-r</code>：如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</td></tr><tr><td>mv</td><td>为文件或目录改名、或将文件或目录移动到其它位置</td><td></td></tr></tbody></table><h2 id="打包压缩命令"><a href="#打包压缩命令" class="headerlink" title="打包压缩命令"></a>打包压缩命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>tar</td><td>对文件进行打包、解包、压缩、解压</td><td><code>-z</code>： 代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压 <code>-c</code>： 代表的是create，即创建新的包文件 <code>-x</code>： 代表的是extract，实现从包文件中还原文件 <code>-v</code>： 代表的是verbose，显示命令的执行过程 <code>-f</code>： 代表的是file，用于指定包文件的名称     <code>c</code>和<code>x</code>是互斥的，解压和压缩不能同时进行</td></tr></tbody></table><h2 id="文本编辑命令"><a href="#文本编辑命令" class="headerlink" title="文本编辑命令"></a>文本编辑命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>vi、vim</td><td>对文件内容进行编辑</td><td></td></tr></tbody></table><ul><li>说明：</li></ul><ol><li>在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</li><li>vim在进行文本编辑时共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>插入模式</code>（Insert mode）和<code>底行模式</code>（Last line mode）。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</li></ol><ul><li>针对vim中的三种模式说明如下：</li></ul><ol><li>命令模式<br>命令模式下可以查看文件内容、移动光标（上下左右箭头、<code>gg</code>(开头)、<code>G</code>（末尾））<br>通过vim命令打开文件后，默认进入命令模式<br>另外两种模式需要首先进入命令模式，才能进入彼此</li><li>插入模式<br>插入模式下可以对文件内容进行编辑<br>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现<code>INSERT</code>字样<br>在插入模式下按下ESC键，回到命令模式</li><li>底行模式<br>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作<br>在命令模式下按下[:,&#x2F;]任意一个，可以进入底行模式<br>通过 <code>/</code> 方式进入底行模式后，可以对文件内容进行查找<br>通过 <code>:</code> 方式进入底行模式后，可以输入<code>wq</code>（保存并退出）、<code>q！</code>（不保存退出）、<code>set nu</code>（显示行号）</li></ol><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>参数</th></tr></thead><tbody><tr><td>find</td><td>在指定目录下查找文件</td><td><code>find dirName -option fileName</code></td></tr><tr><td>grep</td><td>从指定文件中查找指定的文本内容</td><td><code>grep word fileName</code></td></tr></tbody></table><p><code>grep</code>通常搭配管道符使用例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure><h2 id="权限命令"><a href="#权限命令" class="headerlink" title="权限命令"></a>权限命令</h2><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135026495.png" alt="image-20230728135026495"></p><hr><p><img src="/../assets/Linux%E5%AD%A6%E4%B9%A0%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20230728135100975.png" alt="image-20230728135100975"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>echo命令在命令行内输出指定内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>可以通过将命令用反引号（通常也称之为飘号）&#96;将其包围，被包围的内容，会被作为命令执行，而非普通字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>`</span><br></pre></td></tr></table></figure><p>两个特殊符号，重定向符：&gt;和&gt;&gt;</p><p><code>&gt;</code>将左侧命令的结果，覆盖写入到符号右侧指定的文件中</p><p><code>&gt;&gt;</code>将左侧命令的结果，追加写入到符号右侧指定的文件中</p><h1 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h1><h2 id="手工部署"><a href="#手工部署" class="headerlink" title="手工部署"></a>手工部署</h2><ol><li>idea上进行clean和package操作，打包好的包存放在target目录下</li><li>将该jar包通过finalshell上传到linux上</li><li>执行命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar xxx.jar &amp;&gt;xxx.log &amp;</span><br></pre></td></tr></table></figure><blockquote><p><code>nohup</code>命令用于不挂断的运行程序，&amp;&gt;后面是将日志输出到指定文件，最后一个&amp;的作用是让程序在后台运行</p></blockquote><ol start="4"><li>结束程序运行就结束进程即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java <span class="comment">#找到相关进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号  <span class="comment">#结束对应进程</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security知识学习</title>
      <link href="/2023/07/23/%E9%9D%A2%E8%AF%95-SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/07/23/%E9%9D%A2%E8%AF%95-SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring-Security原理相关知识"><a href="#Spring-Security原理相关知识" class="headerlink" title="Spring Security原理相关知识"></a>Spring Security原理相关知识</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Spring Security是一个基于Spring框架的安全框架，主要用于对用户的认证授权等功能。</p><p><strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p><strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><ul><li>流程图：</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723214953358.png" alt="image-20230723214953358"></p><p><strong>Spring Security的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。</strong></p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的拦截器。</p><ul><li>详细流程图</li></ul><p><img src="/../assets/SpringSecurity%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/image-20230723215418090.png" alt="image-20230723215418090"></p><p> ⭐⭐</p><p>所谓认证授权的详细流程，就是用户在登录时提交用户名和密码，UsernamePasswordAuthenticationFilter过滤器把用户名和密码封装为Authentication对象进行认证，通过一系列过滤器，在loadUserByUsername方法中从数据库中查询对应的用户信息，并将用户信息和该用户的权限信息（授权）一并通过实现了UserDetails接口的实现类返回，并在返回中的过滤器中设置SecurityContextHolder存放用户的权限信息。</p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ol><li>如何对密码进行加密</li></ol><blockquote><p>在 Spring Security 中对密码进行加密通常使用的是密码编码器（PasswordEncoder）。PasswordEncoder 的作用是将明文密码加密成密文密码，以便于存储和校验。Spring Security 提供了多种常见的密码编码器，例如 BCryptPasswordEncoder。</p></blockquote><ol start="2"><li>SecurityContextHolder作用</li></ol><blockquote><p>SecurityContextHolder用于存储安全上下文（security context）的信息。当前操作的用户是谁，该用户是否已经被认证，他拥有哪些角色权限…这些都被保存在SecurityContextHolder中。</p><p>SecurityContextHolder默认使用ThreadLocal策略来存储认证信息。看到ThreadLocal 也就意味着，这是一种与线程绑定的策略。Spring Security在用户登录时自动绑定认证信息到当前线程，在用户退出时，自动清除当前线程的认证信息。</p></blockquote><ol start="3"><li>Spring Security是如何完成身份认证的？</li></ol><blockquote><ol><li><p>用户名和密码被过滤器获取到，封装成Authentication,通常情况下是UsernamePasswordAuthenticationToken这个实现类。</p></li><li><p>AuthenticationManager 身份管理器负责验证这个Authentication</p></li><li><p>认证成功后，AuthenticationManager身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）Authentication实例。</p></li><li><p>SecurityContextHolder安全上下文容器将第3步填充了信息的Authentication，通过SecurityContextHolder.getContext().setAuthentication(…)方法，设置到其中。</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀商城（spikemall）</title>
      <link href="/2023/05/27/Project-%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/"/>
      <url>/2023/05/27/Project-%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="秒杀商城（spikemall）"><a href="#秒杀商城（spikemall）" class="headerlink" title="秒杀商城（spikemall）"></a>秒杀商城（spikemall）</h1><h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>本项目名为下单秒杀项目，主要实现了用户进行下单秒杀的服务，用户对商品进行下单，会有一系列的关于订单，库存，账户等的操作，用户进行支付也会有对应订单，库存，账户等的操作，其次作为一个完善的商城，该项目同样也包含了用户的注册，登录，登出，以及对商品进行查看等的功能。</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527103920081.png" alt="image-20230527103920081"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/PlanBBBBB/spikemall">PlanBBBBB&#x2F;spikemall: 分布式秒杀商城 (github.com)</a></p><h2 id="相关技术栈"><a href="#相关技术栈" class="headerlink" title="相关技术栈"></a>相关技术栈</h2><p>该项目主要使用了<code>springboot</code>，<code>mybatis-plus</code>，<code>springcloud</code>，<code>nacos</code>，<code>feign</code>，<code>rocketmq</code>，<code>redis</code>，<code>gateway</code>，<code>springsecurity</code>，<code>Sentinel</code>，<code>Seata</code>等技术。</p><h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol><li>启动nacos</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> 即可</p><ol start="2"><li>启动redis</li></ol><p>先启动redis-server.exe，再启动redis-cli.exe</p><ol start="3"><li>启动rocketmq</li></ol><p>先启动mqnamesrv.cmd，再启动mqbroker.cmd</p><ol start="4"><li>启动sentinel</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>随后浏览器访问<a href="http://localhost:8090/">http://localhost:8090</a> 即可</p><ol start="5"><li>启动seata</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seata-server.bat</span><br></pre></td></tr></table></figure><ol start="6"><li>启动所有服务</li></ol><h2 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h2><h3 id="spikemall-users（用户数据库）"><a href="#spikemall-users（用户数据库）" class="headerlink" title="spikemall_users（用户数据库）"></a>spikemall_users（用户数据库）</h3><h4 id="users（用户表）"><a href="#users（用户表）" class="headerlink" title="users（用户表）"></a>users（用户表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>昵称</td></tr><tr><td>phone</td><td>手机号</td></tr><tr><td>avatar</td><td>头像</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>money</td><td>余额</td></tr><tr><td>power</td><td>权限</td></tr></tbody></table><hr><h4 id="oauth-client-details（spring-security用户客户端表）"><a href="#oauth-client-details（spring-security用户客户端表）" class="headerlink" title="oauth_client_details（spring security用户客户端表）"></a>oauth_client_details（spring security用户客户端表）</h4><table><thead><tr><th>名称</th></tr></thead><tbody><tr><td>client_id</td></tr><tr><td>resource_ids</td></tr><tr><td>client_secret</td></tr><tr><td>scope</td></tr><tr><td>authorized_grant_types</td></tr><tr><td>web_server_redirect_uri</td></tr><tr><td>authorities</td></tr><tr><td>access_token_validity</td></tr><tr><td>refresh_token_validity</td></tr><tr><td>additional_information</td></tr><tr><td>autoapprove</td></tr></tbody></table><p>该<code>oauth_client_details</code>表主要用于spring security整合oauth2.0时，作为认证授权服务器时的保存在数据库的客户端使用。</p><h3 id="spikemall-goods（商品数据库）"><a href="#spikemall-goods（商品数据库）" class="headerlink" title="spikemall_goods（商品数据库）"></a>spikemall_goods（商品数据库）</h3><h4 id="goods（商品表）"><a href="#goods（商品表）" class="headerlink" title="goods（商品表）"></a>goods（商品表）</h4><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>name</td><td>商品名</td></tr><tr><td>price</td><td>商品价格</td></tr><tr><td>image</td><td>商品图片</td></tr><tr><td>description</td><td>商品描述</td></tr></tbody></table><h3 id="spike-mall-orders（订单数据库）"><a href="#spike-mall-orders（订单数据库）" class="headerlink" title="spike mall_orders（订单数据库）"></a>spike mall_orders（订单数据库）</h3><h4 id="orders（订单表）"><a href="#orders（订单表）" class="headerlink" title="orders（订单表）"></a>orders（订单表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>user_id</td><td>下单用户id</td></tr><tr><td>good_id</td><td>商品id</td></tr><tr><td>status</td><td>订单状态（0未支付，1已支付）</td></tr><tr><td>order_time</td><td>下单时间</td></tr><tr><td>check_time</td><td>结账时间</td></tr><tr><td>amount</td><td>实收金额</td></tr></tbody></table><h3 id="spikemall-repertory（库存数据库）"><a href="#spikemall-repertory（库存数据库）" class="headerlink" title="spikemall_repertory（库存数据库）"></a>spikemall_repertory（库存数据库）</h3><h4 id="repertory（库存表）"><a href="#repertory（库存表）" class="headerlink" title="repertory（库存表）"></a>repertory（库存表）</h4><table><thead><tr><th>名称</th><th>注释</th></tr></thead><tbody><tr><td>goods_id</td><td>商品id</td></tr><tr><td>stock</td><td>库存</td></tr><tr><td>begin_time</td><td>开始时间</td></tr><tr><td>end_time</td><td>结束时间</td></tr></tbody></table><h2 id="账户服务"><a href="#账户服务" class="headerlink" title="账户服务"></a>账户服务</h2><h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><ul><li>使用场景</li></ul><p>本项目使用了springsecurity整合的oauth2.0，故所有调用的资源都需要在请求头中携带jwt令牌，登录功能实现的是获取令牌，而注册功能是本系统唯一一个不需要携带令牌就能访问的资源。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> Users user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usersService.register(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">register</span><span class="params">(Users user)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> user.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> user.getAvatar();</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//手机号格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;Users&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Users::getPhone, phone);</span><br><span class="line">        List&lt;Users&gt; list = list(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPasswordInvalid(password)) &#123;</span><br><span class="line">            <span class="comment">//密码格式错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;密码格式不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        newUser.setPhone(user.getPhone());</span><br><span class="line">        <span class="comment">//密码设置为加密形式</span></span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(password);</span><br><span class="line">        newUser.setPassword(encode);</span><br><span class="line">        newUser.setMoney(<span class="number">200L</span>);<span class="comment">//新用户送200</span></span><br><span class="line">        newUser.setPower(<span class="string">&quot;consumer&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user.getName() == <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setName(<span class="string">&quot;user_&quot;</span> + UUID.randomUUID(<span class="literal">true</span>).toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newUser.setName(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (avatar != <span class="literal">null</span>) &#123;</span><br><span class="line">            newUser.setAvatar(avatar);</span><br><span class="line">        &#125;</span><br><span class="line">        save(newUser);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="springsecurity登录功能⭐⭐⭐"><a href="#springsecurity登录功能⭐⭐⭐" class="headerlink" title="springsecurity登录功能⭐⭐⭐"></a>springsecurity登录功能⭐⭐⭐</h3><h4 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h4><p>本项目使用的是授权码模式，故是将账户服务作为一个认证授权的服务器，而其他的服务都是资源服务器，用户需要在认证授权服务器中获取到jwt令牌，并在访问其他服务时，在请求头携带jwt令牌才能访问其他服务的资源。</p><h4 id="获取授权码步骤"><a href="#获取授权码步骤" class="headerlink" title="获取授权码步骤"></a>获取授权码步骤</h4><ol><li>在浏览器输入<a href="http://localhost:8085/">http://localhost:8085</a>会自动跳转到<a href="http://localhost:8085/login">http://localhost:8085/login</a>，在表单中填写手机号和密码进行登录。</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101204919.png" alt="image-20230527101204919"></p><p>进入如下界面代表登录成功</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101318752.png" alt="image-20230527101318752"></p><ol start="2"><li>在浏览器中输入该网址<a href="http://localhost:8085/oauth/authorize?client_id=client&response_type=code&redirect_uri=http://www.baidu.com">http://localhost:8085/oauth/authorize?client_id&#x3D;client&amp;response_type&#x3D;code&amp;redirect_uri&#x3D;http://www.baidu.com</a>，跳转到百度首页之后，在上面url处找到授权码</li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101354324.png" alt="image-20230527101354324"></p><p>点击Authorize进行授权</p><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101451035.png" alt="image-20230527101451035"></p><p>得到授权码</p><ol start="3"><li>将得到的授权码代入到以下url地址中，此处用postman进行操作：<a href="http://client:secret@localhost:8085/oauth/token?grant_type=authorization_code&code=prgYij&redirect_uri=http://www.baidu.com">http://client:secret@localhost:8085&#x2F;oauth&#x2F;token?grant_type&#x3D;authorization_code&amp;code&#x3D;prgYij&amp;redirect_uri&#x3D;http://www.baidu.com</a></li></ol><p><img src="/../assets/%E7%A7%92%E6%9D%80%E5%95%86%E5%9F%8E%EF%BC%88spikemall%EF%BC%89/image-20230527101535264.png" alt="image-20230527101535264"></p><p>携带授权码，得到<code>access_token</code>，该<code>access_token</code>在前面拼接上<code>Bearer </code>即为jwt令牌。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>因为本身使用的就是springsecurity整合好的安全框架，故只是对认证授权服务器和资源服务器做了一系列的配置而已。</p><h3 id="获取用户余额功能"><a href="#获取用户余额功能" class="headerlink" title="获取用户余额功能"></a>获取用户余额功能</h3><ul><li>使用场景</li></ul><p>在支付功能进行中，会通过远程调用该方法，判断用户的余额是否充足，以进行后续的支付功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/money&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> usersService.getMoney(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Long <span class="title function_">getMoney</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> getById(userId);</span><br><span class="line">        <span class="keyword">return</span> user.getMoney();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="扣减用户余额功能"><a href="#扣减用户余额功能" class="headerlink" title="扣减用户余额功能"></a>扣减用户余额功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付功能时，满足一切支付条件后会对用户余额进行扣减。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减用户余额（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastMoney</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/reduce/&#123;lastMoney&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(<span class="meta">@PathVariable(&quot;lastMoney&quot;)</span> Long lastMoney, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        usersService.reduceMoney(userId, lastMoney);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(Long userId, Long lastMoney)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Users&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Users::getId, userId)</span><br><span class="line">                .set(Users::getMoney, lastMoney);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><h3 id="通过商品id查询价格功能"><a href="#通过商品id查询价格功能" class="headerlink" title="通过商品id查询价格功能"></a>通过商品id查询价格功能</h3><ul><li>使用场景</li></ul><p>在创建订单时，需要知道商品的价格，故这是一个远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过商品id查询价格(对外不开放)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPrice</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.getById(goodsId).getPrice();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看商品列表功能"><a href="#查看商品列表功能" class="headerlink" title="查看商品列表功能"></a>查看商品列表功能</h3><ul><li>使用场景</li></ul><p>用户可以查看商品，属于完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看商品列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsService.listByRedis();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先从缓存中查</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKey</span> <span class="operator">=</span> <span class="string">&quot;cache:goods&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">goodsKeyJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(goodsKey);</span><br><span class="line">        <span class="comment">//查到了就返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (goodsKeyJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(JSONUtil.toList(goodsKeyJson, Goods.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到再从数据库查</span></span><br><span class="line">        List&lt;Goods&gt; goodsList = query().orderByAsc(<span class="string">&quot;id&quot;</span>).list();</span><br><span class="line">        <span class="keyword">if</span> (goodsList == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺类型发生错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将从数据库查询结果存入缓存</span></span><br><span class="line">        stringRedisTemplate.opsForValue().setIfAbsent(goodsKey, JSONUtil.toJsonStr(goodsList), <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(goodsList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="下单服务"><a href="#下单服务" class="headerlink" title="下单服务"></a>下单服务</h2><h3 id="下单功能"><a href="#下单功能" class="headerlink" title="下单功能"></a>下单功能</h3><ul><li>使用场景</li></ul><p>用户查看商品，选择好商品之后即可下单，下单功能会局限于商品是否在秒杀时间段内以及库存是否充足等条件，此处利用分布式锁来实现一人一单。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品功能，请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/spike/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> repertoryService.spikeGoods(jwt, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">spikeGoods</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;解析jwt失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否满足时间、库存条件</span></span><br><span class="line">        <span class="type">Repertory</span> <span class="variable">spikeGood</span> <span class="operator">=</span> getById(goodsId);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">beginTime</span> <span class="operator">=</span> spikeGood.getBeginTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> spikeGood.getEndTime();</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (now.isBefore(beginTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (now.isAfter(endTime)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span> (spikeGood.getStock() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据userId 创建锁对象</span></span><br><span class="line">        <span class="type">SimpleRedisLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">// 获取锁对象</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock(<span class="number">120</span>);</span><br><span class="line">        <span class="comment">// 加锁失败，说明当前用户开了多个线程抢商品，但是由于key是SETNX的，所以不能创建key，得等key的TTL到期或释放锁（删除key）</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许抢多次商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象</span></span><br><span class="line">            <span class="type">RepertoryService</span> <span class="variable">proxy</span> <span class="operator">=</span> (RepertoryService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(jwt, goodsId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            redisLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(String jwt, Long goodsId)</span> &#123;</span><br><span class="line">        <span class="comment">//一人一单要求</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> orderClient.findCount(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该用户以抢购此商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> stockClient.reduceStock(goodsId, jwt);</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;该商品已抢购完&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成orderId（使用redisIdWorker）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送普通消息给MQ</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Order&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> jwt + <span class="string">&quot;_&quot;</span> + goodsId + <span class="string">&quot;_&quot;</span> + orderId;</span><br><span class="line">        rocketMQTemplate.convertAndSend(topic, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h2><h3 id="创建订单功能"><a href="#创建订单功能" class="headerlink" title="创建订单功能"></a>创建订单功能</h3><ul><li>使用场景</li></ul><p>在用户进行下单操作时进行远程调用的方法。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><p>由于是在下单时进行的调用方法，故没有独立的接口。</p><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrder</span><span class="params">(String jwt, Long goodsId, Long orderId)</span> &#123;</span><br><span class="line">        Long userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> goodClient.getPrice(goodsId, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建订单</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        order.setId(orderId);</span><br><span class="line">        order.setGoodId(goodsId);</span><br><span class="line">        order.setOrderTime(LocalDateTime.now());</span><br><span class="line">        order.setStatus(<span class="number">0</span>);<span class="comment">//  0表示未支付</span></span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setAmount(price);</span><br><span class="line">        save(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送延迟消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> JSONUtil.toJsonStr(order);</span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;Pay&quot;</span>;</span><br><span class="line">        Message&lt;String&gt; message = MessageBuilder.withPayload(orderJson)</span><br><span class="line">                .setHeader(MessageConst.PROPERTY_DELAY_TIME_LEVEL, <span class="string">&quot;3&quot;</span>) <span class="comment">// 设置延迟等级为3，即10秒</span></span><br><span class="line">                .build();</span><br><span class="line">        rocketMQTemplate.send(topic, message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看该用户是否购买过该商品功能（一人一单）"><a href="#查看该用户是否购买过该商品功能（一人一单）" class="headerlink" title="查看该用户是否购买过该商品功能（一人一单）"></a>查看该用户是否购买过该商品功能（一人一单）</h3><ul><li>使用场景</li></ul><p>用户在进行下单时，查看该用户是否已经购买过该商品，若已经购买过该商品，则不允许用户重复购买。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过查询订单查看该用户是否购买过该商品，实现一人一单（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/find/&#123;goodsId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;goodsId&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.findCount(userId, goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCount</span><span class="params">(Long userId, Long goodsId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getGoodId, goodsId).eq(Orders::getUserId, userId);</span><br><span class="line">        <span class="keyword">return</span> count(queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="查看当前用户的所有订单功能"><a href="#查看当前用户的所有订单功能" class="headerlink" title="查看当前用户的所有订单功能"></a>查看当前用户的所有订单功能</h3><ul><li>使用场景</li></ul><p>用户可查看自己的所有订单，算是完善系统的一个功能。</p><ul><li>代码实现</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看当前用户的所有订单,请求头必须携带jwt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = UserToken.getUserIdFromToken(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ordersService.listByUser(userId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">listByUser</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Orders::getUserId, userId);</span><br><span class="line">        List&lt;Orders&gt; ordersList = list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(ordersList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="支付服务"><a href="#支付服务" class="headerlink" title="支付服务"></a>支付服务</h2><h3 id="支付功能"><a href="#支付功能" class="headerlink" title="支付功能"></a>支付功能</h3><ul><li>使用场景</li></ul><p>用户在下单功能成功之后，再进行支付功能，在支付过程种会出现未在规定时间段内支付以及余额不足无法支付的情况，该情况下会对库存进行回滚，同时对创建好的订单进行删除，若满足支付条件，将对订单进行修改，同时对用户余额进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付功能,没登录不能支付，即请求头必须携带token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ordersService.pay(jwt, orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">pay</span><span class="params">(String jwt, Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;order:&quot;</span> + orderId;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(orderJson)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;订单号有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得order对象</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> JSONUtil.toBean(orderJson, Orders.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下单时间超时</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">deadlineTime</span> <span class="operator">=</span> order.getOrderTime().plusMinutes(<span class="number">30</span>);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">nowTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="keyword">if</span> (nowTime.isAfter(deadlineTime)) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;下单时间超时&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//余额不足</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">money</span> <span class="operator">=</span> userClient.getMoney(jwt);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">price</span> <span class="operator">=</span> order.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (money &lt; price) &#123;</span><br><span class="line">            <span class="comment">//回滚库存</span></span><br><span class="line">            repertoryClient.rollbackStock(order.getGoodId(), jwt);</span><br><span class="line">            <span class="comment">//删除订单</span></span><br><span class="line">            removeById(order.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;余额不足，无法购买&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件成功，进行支付</span></span><br><span class="line">        <span class="comment">//1.更改订单状态</span></span><br><span class="line">        LambdaUpdateWrapper&lt;Orders&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(Orders::getId, order.getId())</span><br><span class="line">                .set(Orders::getCheckTime, nowTime)</span><br><span class="line">                .set(Orders::getStatus, <span class="number">1</span>);</span><br><span class="line">        update(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.扣减用户余额</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">lastMoney</span> <span class="operator">=</span> money - price;</span><br><span class="line">        userClient.reduceMoney(lastMoney, jwt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(order.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="库存服务"><a href="#库存服务" class="headerlink" title="库存服务"></a>库存服务</h2><h3 id="扣减库存功能"><a href="#扣减库存功能" class="headerlink" title="扣减库存功能"></a>扣减库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行下单的时候，就直接对库存进行扣减。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> repertoryService.reduceStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">reduceStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .gt(Repertory::getStock, <span class="number">0</span>)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="回滚库存功能"><a href="#回滚库存功能" class="headerlink" title="回滚库存功能"></a>回滚库存功能</h3><ul><li>使用场景</li></ul><p>用户在进行支付的时候，若未在商品的秒杀时间段内，或自身余额不足的情况下会进行库存的回滚。</p><ul><li>实现代码</li></ul><ol><li>controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚库存功能（对外不开放）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> goodsId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long goodsId)</span> &#123;</span><br><span class="line">        repertoryService.rollbackStock(goodsId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>service</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollbackStock</span><span class="params">(Long goodsId)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Repertory&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(Repertory::getGoodsId, goodsId)</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock + 1&quot;</span>);</span><br><span class="line">        update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="网关服务"><a href="#网关服务" class="headerlink" title="网关服务"></a>网关服务</h2><p>由于项目是微服务项目，故使用gateway网关进行端口等统一配置处理很有必要，本项目除用户登录进行获取授权码及获取jwt令牌的所有请求资源的端口号均为10010。</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级部分学习</title>
      <link href="/2023/01/05/Study-MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/05/Study-MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="零碎知识"><a href="#零碎知识" class="headerlink" title="零碎知识"></a>零碎知识</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>指定字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>全部字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>批量添加数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><hr><h3 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h3><p>修改数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ... [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [ <span class="keyword">WHERE</span> 条件 ];</span><br></pre></td></tr></table></figure><hr><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名字段</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><blockquote><p>分页查询：起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</p></blockquote><blockquote><p>UNION ALL 会有重复结果，UNION 不会</p><p>联合查询比使用or效率高，不会使索引失效</p></blockquote><h2 id="SQL语句的执行顺序"><a href="#SQL语句的执行顺序" class="headerlink" title="SQL语句的执行顺序"></a>SQL语句的执行顺序</h2><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230720221305377.png" alt="image-20230720221305377"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721105303089.png" alt="image-20230721105303089"></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110407627.png" alt="image-20230721110407627"></p><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721110713301.png" alt="image-20230721110713301"></p><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113246951.png" alt="image-20230721113246951"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721113220684.png" alt="image-20230721113220684"></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165346891.png" alt="image-20230721165346891"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165901787.png" alt="image-20230721165901787"></p><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721165718405.png" alt="image-20230721165718405"></p><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230721172914954.png" alt="image-20230721172914954"></p><h1 id="事务相关知识"><a href="#事务相关知识" class="headerlink" title="事务相关知识"></a>事务相关知识</h1><h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ol><li>A 原子性（Atomicity） 一个事务的所有操作，要么全部完成，要么都没完成，不能结束在中间环节。如果事务在执⾏过程中发生错误，会被回滚到事务开始之前的状态 </li><li>C 一致性（Consistency） 在事务开始之前以及事务结束之后，数据库的完整性不能被破坏 </li><li>I 隔离性（Isolation） 允许多个并发事务同时对数据进⾏修改和读写的能⼒，它可以防止由于多个事务并发执⾏时由于交叉执行而导致的数据不一致 </li><li>D 持久性（Durability） 事务处理结束了以后，对数据的修改是永久的，即使是发生了系统故障，数据也不会丢失</li></ol><p>举个例子：</p><p>A向B转账500，转账成功，A扣除500元，B增加500元，原子操作体现在要么都成功，要么都失败</p><p>在转账的过程中，数据要一致，A扣除了500，B必须增加500</p><p>在转账的过程中，隔离性体现在A像B转账，不能受其他事务干扰</p><p>在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）</p><hr><h2 id="四大隔离级别"><a href="#四大隔离级别" class="headerlink" title="四大隔离级别"></a>四大隔离级别</h2><ol start="0"><li><p>术语说明： （这三个可以称作并发事务所带来的问题）</p><ul><li>脏读： 一个事务读取另一个事务还没有提交的数据 </li><li>不可重复读： 同一个事务内，两个相同的查询返回了不同的结果 </li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”。</li></ul></li><li><p>RU 读不提交（Read Uncommited） 在该隔离级别下，事务之间完全不隔离，会产生脏读，一般情况不会使用 </p></li><li><p>RC 读提交（Read Commited） 本事务读取到的是其它事务提交的最新数据，但有一个问题在同一个事务中，前后两相同的select可能会读到不同的结果 </p></li><li><p>RR 可重复读（Repeatable Read） 在同一个事务中，select的结果是事务开始时时间点的状态，因此，同一个事务同样的select操作可以读到一致的结果 </p></li><li><p>serializable串行化读操作会隐式获取共享锁，保证不同事务之间的互斥 </p></li><li><p>⭐⭐问题：RR 可重复读为什么可以解决不可重复读，却不能解决幻读⭐⭐</p><blockquote><p>答：对于”可重复读（Repeatable Read）”隔离级别，它确实可以解决”不可重复读（Non-repeatable Read）”问题，因为在这个隔离级别下，事务在执行期间看到的数据保持一致，即使其他事务在这段时间内进行了更改，也不会影响当前事务。</p><p>解决”不可重复读”问题的关键是<strong>行级锁定</strong>。在”可重复读”隔离级别下，读取的数据行会被锁定，确保其他事务不能修改或删除这些数据，从而保持了数据的一致性，防止了其他事务的干扰。</p><p>然而，”可重复读”隔离级别并不能完全解决”幻读”问题。”幻读”问题是由于其他事务在当前事务执行期间插入或删除了符合当前事务查询条件的新数据，导致查询结果发生变化。<strong>在”可重复读”隔离级别下，行级锁只能保护已有数据的读取，但对于新数据的插入和删除并不会进行锁定。</strong>因此，其他事务仍然可以插入或删除新数据，从而导致当前事务的查询结果发生变化，产生了”幻读”问题。</p><p>要解决”幻读”问题，需要进一步升级到更高的隔离级别，如”串行化（Serializable）”。在”串行化”隔离级别下，事务会锁定整个范围，包括已有数据和符合查询条件的新数据，确保其他事务不能插入或删除这些数据，从而完全消除了”幻读”问题。但是，”串行化”隔离级别的性能较低，因为它限制了并发性，所以在实际应用中需要权衡隔离级别和性能的需求。</p></blockquote></li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230722210501764.png" alt="image-20230722210501764"></p><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><p>示例图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164107248.png" alt="MySQL体系结构图"></p><p>包括四个层：</p><ol><li><strong>连接层</strong> 最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端&#x2F;服务端工具实现的类似于 TCP&#x2F;IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程 池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务 器也会为安全接入的每个客户端验证它所具有的操作权限。 </li><li><strong>服务层</strong> 第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部 分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解 析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大， 这样在解决大量读操作的环境中能够很好的提升系统的性能。 </li><li><strong>引擎层</strong> 存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通 信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。数据库 中的索引是在存储引擎层实现的。 </li><li><strong>存储层</strong> 数据存储层， 主要是将数据(如: redolog、undolog、数据、索引、二进制日志、错误日志、查询 日志、慢查询日志等)存储在文件系统之上，并完成与存储引擎的交互。</li></ol><p><strong>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式 。存储引擎是基于表的，而不是 基于库的，所以存储引擎也可被称为表类型。</strong></p><h2 id="存储引擎类型"><a href="#存储引擎类型" class="headerlink" title="存储引擎类型"></a>存储引擎类型</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ol><li>特点</li></ol><ul><li><p>DML操作遵循ACID模型，支持事务；</p></li><li><p>行级锁，提高并发访问性能； </p></li><li><p>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</p></li></ul><ol start="2"><li>文件</li></ol><p>xxx.ibd：xxx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结 构（frm-早期的 、sdi-新版的）、数据和索引。</p><ol start="3"><li>逻辑存储结构</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724164013431.png" alt="逻辑存储结构图"></p><ul><li>表空间 : InnoDB存储引擎逻辑结构的最高层，ibd文件其实就是表空间文件，在表空间中可以 包含多个Segment段。 </li><li>段 : 表空间是由各个段组成的， 常见的段有数据段、索引段、回滚段等。InnoDB中对于段的管 理，都是引擎自身完成，不需要人为对其控制，一个段中包含多个区。 </li><li>区 : 区是表空间的单元结构，每个区的大小为1M。 默认情况下， InnoDB存储引擎页大小为 16K， 即一个区中一共有64个连续的页。 </li><li>页 : 页是组成区的最小单元，页也是InnoDB 存储引擎磁盘管理的最小单元，每个页的大小默 认为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。 </li><li>行 : InnoDB 存储引擎是面向行的，也就是说数据是按行进行存放的，在每一行中除了定义表时 所指定的字段以外，还包含两个隐藏字段(后面会详细介绍)。</li></ul><hr><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ol><li>特点</li></ol><ul><li><p>不支持事务，不支持外键</p></li><li><p>支持表锁，不支持行锁</p></li><li><p>访问速度快</p></li></ul><ol start="2"><li>文件</li></ol><ul><li><p>xxx.sdi：存储表结构信息 </p></li><li><p>xxx.MYD: 存储数据 </p></li><li><p>xxx.MYI: 存储索引</p></li></ul><hr><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为 临时表或缓存使用。</p><ol><li>特点</li></ol><ul><li><p>内存存放</p></li><li><p>hash索引（默认）</p></li></ul><ol start="2"><li>文件</li></ol><ul><li>xxx.sdi：存储表结构信息</li></ul><h3 id="三种常见存储引擎区别与对比"><a href="#三种常见存储引擎区别与对比" class="headerlink" title="三种常见存储引擎区别与对比"></a>三种常见存储引擎区别与对比</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230724202707479.png" alt="三种常见存储引擎区别与对比"></p><p>重点对比InnoDB和MyISAM，分别是<strong>事务，外键和锁机制的区别</strong>。</p><h1 id="索引⭐⭐"><a href="#索引⭐⭐" class="headerlink" title="索引⭐⭐"></a>索引⭐⭐</h1><h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构 上实现高级查找算法，这种数据结构就是索引。</p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库 的IO成本</td><td>索引列也是要占用空间的。</td></tr><tr><td>通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消 耗。</td><td>索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行INSERT、UPDATE、DELETE时，效率降低。</td></tr></tbody></table><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><blockquote><p>MySQL默认是B+Tree结构</p></blockquote><h3 id="B-Tree-B-Tree"><a href="#B-Tree-B-Tree" class="headerlink" title="B-Tree&amp;B+Tree"></a>B-Tree&amp;B+Tree</h3><p>B-Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174758649.png" alt="B-Tree图"></p><hr><p>B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730174633933.png" alt="B+Tree图"></p><p>B+Tree 与 B-Tree相比，主要有以下三点区别： </p><ul><li>所有的数据都会出现在叶子节点。 </li><li>叶子节点形成一个双向链表。 </li><li>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。</li></ul><p><strong>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点 的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</strong></p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730175227025.png" alt="hash索引图"></p><p>特点：</p><ol><li><p>Hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询（between，&gt;，&lt; ，…） </p></li><li><p>无法利用索引完成排序操作 </p></li><li><p>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索 引</p></li></ol><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><blockquote><p>为什么InnoDB存储引擎选择使用B+tree索引结构?</p></blockquote><ol><li>相对于二叉树，层级更少，搜索效率高； （B+树三层就能存放2200w的数据）</li><li>对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低； </li><li>相对Hash索引，B+tree支持范围匹配及排序操作；</li></ol><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建, 只能有一个</td><td><code>PRIMARY</code></td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td><code>UNIQUE</code></td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td><code>FULLTEXT</code></td></tr></tbody></table><hr><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</td><td>必须有,而且只有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p><strong>聚集索引选取规则:</strong> </p><ul><li>如果存在主键，主键索引就是聚集索引。 </li><li>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。 </li><li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引。</li></ul><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>执行SQL语句的具体流程如图：</p><ol><li>先在二级索引处查到name&#x3D;Arm</li><li>再把在二级索引处查到的对应的id通过回标查询来到聚集索引处</li><li>得到id在通过聚集索引查到行数据</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230730195655768.png" alt="回表查询图"></p><blockquote><p>回表查询： 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询。</p></blockquote><h3 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h3><p>以下两条SQL语句，那个执行效率高? 为什么? </p><p>A. select * from user where id &#x3D; 10 ; </p><p>B. select * from user where name &#x3D; ‘Arm’ ; </p><p>备注: id为主键，name字段创建的有索引；</p><blockquote><p>解答： A 语句的执行性能要高于B 语句。 因为A语句直接走聚集索引，直接返回数据。 而B语句需要先查询name字段的二级索引，然 后再查询聚集索引，也就是需要进行回表查询。</p></blockquote><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><ol><li>创建索引</li></ol><p>创建的索引名一般命名为<code>idx_表名_字段名</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT ] INDEX index_name <span class="keyword">ON</span> table_name (index_col_name,... ) ;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name ;</span><br></pre></td></tr></table></figure><ol start="3"><li>删除索引</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name ;</span><br></pre></td></tr></table></figure><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><p>可通过查看SQL执行频率，慢查询日志，profile详情和explain方法来分析哪个SQL语句的执行速度慢。</p><h3 id="explain（重点掌握）"><a href="#explain（重点掌握）" class="headerlink" title="explain（重点掌握）"></a>explain（重点掌握）</h3><p>Explain 执行计划中各个字段的含义:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，<strong>值越大，越先执行</strong>)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长 度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr><tr><td>extra</td><td>额外信息，例如Using index等</td></tr></tbody></table><h2 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h2><h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><blockquote><p><strong>针对联合索引</strong>而言，联合索引字段中的第一个字段必须存在（不需要指定位置），若不存在第一个字段则整个索引失效，若后续其他字段中跳过了某个字段，则后续的部分索引失效</p></blockquote><p>举例：</p><p>创建下列三个字段的联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_sku_price_num_weight <span class="keyword">ON</span> tb_sku(price,num,weight);</span><br></pre></td></tr></table></figure><p>正常查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>跳过中间的字段后，后续字段索引会失效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span>  <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>具体可通过<code>EXPLAIN</code>来查看是否使用了索引，看索引的长度来判断哪个字段索引被使用了</p></blockquote><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>上述的最左前缀法则针对的是<code>where</code>后的条件，在<code>where</code>后的条件中，只要出现了最左边的字段即可认为满足了最左前缀法则。而当在<code>order by</code>之后的条件中，若是最左边的字段没有放在排序的第一位，即不按照顺序，这是不满足最左前缀法则的。综上，<code>where</code>后条件不需要按顺序，<code>order by</code>之后的条件需要按顺序。</p><blockquote><p>具体示例看下文的order by优化的特殊情况</p></blockquote><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><blockquote><p>此处举例大多都是会导致索引失效的例子</p></blockquote><h4 id="范围查询特殊情况"><a href="#范围查询特殊情况" class="headerlink" title="范围查询特殊情况"></a>范围查询特殊情况</h4><p>如果出现范围查询，则&gt;或&lt;之后的索引会失效</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述SQL中num&gt;10000，导致后面的weight的索引失效，只有price和num的索引生效</p><p>可以把&gt;,&lt;修改为&gt;&#x3D;,&lt;&#x3D;，修改之后就能避免这种情况发生，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_sku <span class="keyword">WHERE</span> price<span class="operator">=</span><span class="number">40625</span> <span class="keyword">AND</span> num<span class="operator">&gt;=</span><span class="number">10000</span> <span class="keyword">AND</span> weight <span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h4><p>不要在索引列上进行运算操作， 索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> <span class="built_in">substring</span>(phone,<span class="number">10</span>,<span class="number">2</span>) <span class="operator">=</span> <span class="string">&#x27;15&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h4><p>字符串类型字段使用时，不加引号，索引将失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> phone <span class="operator">=</span> <span class="number">17799990015</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：其实可以理解为phone本身是varchar类型，这里做了隐式类型转换，也算的上是计算</p></blockquote><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="keyword">like</span> <span class="string">&#x27;%工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="or连接条件"><a href="#or连接条件" class="headerlink" title="or连接条件"></a>or连接条件</h4><p>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。只有当or前后都有索引才能生效。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">23</span>; #其中age字段无索引</span><br></pre></td></tr></table></figure><h4 id="数据分布影响⭐"><a href="#数据分布影响⭐" class="headerlink" title="数据分布影响⭐"></a>数据分布影响⭐</h4><p>如果MySQL评估使用索引比全表更慢，则不使用索引。MySQL自己评判。</p><blockquote><p>走不走索引取决于查询的数据占全表的多少，若查询的数据占了全表的大部分，则全表搜索更快，故选择全表搜索，反之则相反。</p></blockquote><h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><blockquote><p>此处的SQL提示，指的是我们去提示SQL，而不是SQL提示我们。</p></blockquote><ul><li>使用条件：</li></ul><p>当一个字段既有单列索引又有联合索引时，MySQL默认使用联合索引，此时我们可以使用三种方式去提示SQL使用何种索引。</p><ol><li>建议（建议仅仅只是建议，具体用不用还要MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>忽略（<strong>建议</strong>MySQL忽略某个索引，但是要不要忽略也是MySQL自己来评估）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>强迫（MySQL必须采用所选的索引）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引指的是查询的字段全部都能一次查出，无需回表查询。</p><p>举例说明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status, name <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #需要回表查询</span><br></pre></td></tr></table></figure><p>在这个SQL语句中，<code>profession</code> ,<code>age</code> ,<code> status</code>这三个字段组成联合索引，而<code>name</code>字段没有索引，所以在<strong>二级索引</strong>中<code>profession</code> ,<code>age</code> ,<code> status</code>以及他们的叶子节点中存放的<code>id</code>字段都是可以直接找到的，若这条语句不需要额外查询<code>name</code>字段的话（如下SQL），那么这条语句就是覆盖索引，因为他不需要回表查询，但因为有了<code>name</code>字段，所以不光要在二级索引中查，还要带着<code>id</code>去聚集索引中查，这就是回表查询。回表查询自然就会慢了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> id, profession ,age, status <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">and</span> age <span class="operator">=</span> <span class="number">31</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> ; #覆盖索引，不需要回表查询</span><br></pre></td></tr></table></figure><blockquote><p>尽量不要使用<code>select *</code> 的原因就是查询全部字段很大可能会因为有些字段没有索引，而导致需要回表查询。</p></blockquote><h4 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h4><p>一张表, 有四个字段(id, username, password, status), 由于数据量大, 需要对以下SQL语句进行优化, 该如何进行才是最优方案: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> tb_user <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;itcast&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>答案: 针对于 username, password建立联合索引, sql为: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_name_pass <span class="keyword">on</span> tb_user(username,password); </span><br></pre></td></tr></table></figure><p>这样可以避免上述的SQL语句，在查询的过程中，出现回表查询。</p></blockquote><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>当字段类型为字符串（varchar，text，longtext等）时，有时候需要索引很长的字符串，这会让 索引变得很大，查询时，浪费大量的磁盘IO， 影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。<strong>降低索引体积，提高查询效率</strong></p><p>语法：其中的<code>n</code>是从头开始截取的位数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_xxxx <span class="keyword">on</span> table_name(<span class="keyword">column</span>(n)) ;</span><br></pre></td></tr></table></figure><p>具体<code>n</code>取多少，下列sql中选择性越接近1且截取长度越少的越好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email,<span class="number">1</span>,n)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user ;</span><br></pre></td></tr></table></figure><blockquote><p>例如n取10时选择性为1，取9，8，7，6，5时选择性都为0.985，n取4时选择性为0.913，此时的n就应该n&#x3D;5</p></blockquote><ul><li>执行流程：</li></ul><p>如 index1 (即email整个字符串的索引结构)，执行顺序是这样的:</p><ol><li>从index1索引树找到满足索引值是<code>zhangssxyz@xxx.com</code>的这条记录，取得ID2的值</li><li>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集!</li><li>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足email&#x3D;<code>hangssxyz@xxx.com</code>的条件了，循环结束, 这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</li></ol><p>如 index2 (即email(6)索结构) ，执行顺序是这样的:</p><ol><li>从index2索引树找到满足索引值是’zhangs的记录，找到的第一个是ID1;</li><li>到主键上查到主键值是ID1的行，判断出email的值不是<code>zhangssxyz@xxx.com</code>，这行记录丢弃</li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是hangs，取出ID2，再到ID索引上取整行然后判断，这次值对了，将这行记录加入结果集;</li><li>重复上一步，直到在idxe2上取到的值不是zhangs时，循环结束<br>在这个过程中，要回主键索引取4次数据，也就是扫描了4行。<br>通过这个对比，你很容易就可以发现，<strong>使用前缀索引后，可能会导致查询语句读数据的次数变多</strong></li></ol><p>取自<a href="https://blog.csdn.net/m0_37583655/article/details/127945182?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169119750916800211587211%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=169119750916800211587211&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-127945182-null-null.142%5Ev92%5EchatgptT0_1&utm_term=%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B5%81%E7%A8%8B%E4%BB%80%E4%B9%88&spm=1018.2226.3001.4187">CSDN博主（靖节先生）-前缀索引详解</a></p><h3 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引&amp;&amp;联合索引"></a>单列索引&amp;&amp;联合索引</h3><ul><li><p>单列索引：即一个索引只包含单个列。 </p></li><li><p>联合索引：即一个索引包含了多个列。</p></li></ul><blockquote><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引， 而非单列索引。</p></blockquote><p>联合索引的B+Tree图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805093203021.png" alt="联合索引的B+Tree图"></p><h2 id="索引设计原则⭐"><a href="#索引设计原则⭐" class="headerlink" title="索引设计原则⭐"></a>索引设计原则⭐</h2><ol><li>针对于数据量较大，且查询比较频繁的表建立索引。</li></ol><blockquote><p>数据量大指的是超过一百多万……</p></blockquote><ol start="2"><li><p>针对于常作为查询条件 (where)、排序(order by)、分组 (group by) 操作的字段建立索引。</p></li><li><p>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p></li></ol><blockquote><p>区分度高的字段例如用户的手机号，身份证号，区分度低的例如性别，用户的状态等</p></blockquote><ol start="4"><li><p>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p></li><li><p>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p></li><li><p>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p></li><li><p>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p></li></ol><h1 id="SQL优化⭐"><a href="#SQL优化⭐" class="headerlink" title="SQL优化⭐"></a>SQL优化⭐</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>每次insert都要建立sql连接，会浪费时间和性能</p></blockquote><h3 id="手动控制事务"><a href="#手动控制事务" class="headerlink" title="手动控制事务"></a>手动控制事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;Cat&#x27;</span>),(<span class="number">9</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL默认是自动提交事务，所以每次insert都会重复的开启事务，关闭事务，浪费时间</p></blockquote><h3 id="主键顺序插入，性能要高于乱序插入"><a href="#主键顺序插入，性能要高于乱序插入" class="headerlink" title="主键顺序插入，性能要高于乱序插入"></a>主键顺序插入，性能要高于乱序插入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主键乱序插入 : <span class="number">8</span> <span class="number">1</span> <span class="number">9</span> <span class="number">21</span> <span class="number">88</span> <span class="number">2</span> <span class="number">4</span> <span class="number">15</span> <span class="number">89</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line">主键顺序插入 : <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">15</span> <span class="number">21</span> <span class="number">88</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><h3 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h3><blockquote><p>当插入的数据大于几百万条的时候再使用insert效果就不好了</p></blockquote><ul><li><p>客户端连接服务端时，加上参数 –local-infile </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –-local-infile -u root -p </span><br></pre></td></tr></table></figure></li><li><p>设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p>下面这条sql从该<code>tb_sku1.sql</code>文件中加载数据到表<code>tb_sku</code>，以<code>,</code>分隔字段，以换行为一行数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql/tb_sku1.sql&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> `tb_sku` fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><p>SQL文件前几行代码如下：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805155150579.png" alt="image-20230805155150579"></p><h2 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h2><blockquote><p><strong>主键顺序插入，性能要高于乱序插入</strong></p></blockquote><h3 id="页分裂："><a href="#页分裂：" class="headerlink" title="页分裂："></a>页分裂：</h3><p>页分裂是指当一个页面（Page）已经满了，但需要插入新的数据或更新已有数据，MySQL 就会将页面拆分成两个页面，以容纳新的数据。这样做可以保证数据的有序性和唯一性，但页分裂可能会产生一些<strong>影响</strong>，主要包括：</p><ol><li><strong>性能影响：</strong> 页分裂会涉及数据的重新组织和移动，这可能会导致数据库性能的下降，特别是在频繁发生页分裂的表上。页分裂涉及磁盘 I&#x2F;O 操作，而这些操作通常比内存操作慢得多。</li><li><strong>磁盘空间的浪费：</strong> 页分裂后，可能会导致数据页只有一部分被占用，而其他部分为空闲，从而浪费了一些磁盘空间。</li><li><strong>索引碎片化：</strong> 主键通常是索引键，页分裂会导致索引的碎片化。这可能会使索引树更加深度，影响查询性能。</li><li><strong>锁竞争增加：</strong> 页分裂涉及数据的重新组织，这可能会增加锁的竞争。在高并发的环境下，这可能会导致锁等待时间增加，进而影响数据库的响应性能。</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805164745995.png" alt="image-20230805164745995"></p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805164833266.png" alt="image-20230805164833266"></p><h3 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h3><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230805165237518.png" alt="image-20230805165237518"></p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ol><li>满足业务需求的情况下，尽量降低主键的长度。 </li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。 </li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。 </li><li>业务操作时，避免对主键的修改</li></ol><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><blockquote><p>在explain执行计划的extra中尽量不要显示<code>Using filesort</code>，这代表性能相对不好</p></blockquote><p>举例说明：</p><p>有如下这样一个索引，默认的都是asc升序排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_user_age_phone <span class="keyword">on</span> tb_user(age, phone);</span><br></pre></td></tr></table></figure><p>在存在这个索引的情况下，走如下sql语句不会出现Using filesort，只会出现Using index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, age, phone <span class="keyword">from</span> tb_user <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, phone <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>因为创建索引的时候默认就是升序排的索引，所以这样能不出现Using filesort，但要是<strong>其中一个</strong>是倒序查询，那么就会出现Using filesort；但是如果两个都是倒序查询，那么反而不会出现Using filesort，因为在查询B+Tree的时候反向检索了。</p><blockquote><p><strong>特殊情况</strong>：如果排序的时候将age和phone的顺序写反了，那么就不遵循最左前缀法则了，即使两个都是asc查询，那么也不会全部走索引，自然就会出现Using filesort。</p></blockquote><p>🔴🟡🟢总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）⭐</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><blockquote><p>尽量不要出现 Using temporary</p></blockquote><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是需要满足最左前缀法则的</li></ul><p>⭐下面这条sql也是符合最左前缀法则的，profession和age是联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> age , <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> age ;</span><br></pre></td></tr></table></figure><h2 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h2><p>对于大数据量的分页查询，如下，查询效率很低，越往后的数据查询时间越长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_sku limit <span class="number">2000000</span> , <span class="number">10</span></span><br></pre></td></tr></table></figure><p>优化思路: </p><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> tb_sku t , (<span class="keyword">select</span> id <span class="keyword">from</span> tb_sku <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">2000000</span>,<span class="number">10</span>) a <span class="keyword">where</span> t.id <span class="operator">=</span> a.id;</span><br></pre></td></tr></table></figure><h2 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h2><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；</p><p>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。</p><blockquote><p>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis，总的来说没有特别好的优化方式</p></blockquote><p>count各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以<strong>尽量使用 count(*)</strong></p><h2 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h2><blockquote><p>避免行锁升级为表锁</p></blockquote><p>在InnoDB中的行锁是针对索引加的锁。</p><p>举例说明：</p><p>当两个事务同时开启时，如果操作的是不同的行（按照id来区分不同的行，如下SQL），那么是互不影响的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> ; #事务一<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span> ; #事务二<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>但如果操作的虽然是不同的行，但是不是按有索引的字段来区分不同的行，例如按照<code>name</code>这个没有索引的字段来区分不同的行，那么此时的行锁就会升级为表锁，大大降低了性能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;PHP&#x27;</span> ; #事务一<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> course <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;javaEE&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;Spring&#x27;</span> ; #事务二<span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><h1 id="锁⭐⭐"><a href="#锁⭐⭐" class="headerlink" title="锁⭐⭐"></a>锁⭐⭐</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源（CPU、 RAM、I&#x2F;O）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。 </p><blockquote><p>在MySQL中，全局锁是针对整个MySQL实例的锁，而不是仅限于当前正在使用的数据库。</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>其典型的使用场景是<strong>做全库的逻辑备份</strong>，对所有的表进行锁定，从而获取一致性视图，保证数据的完整 性。</p><ol><li>不加锁的情况</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808094927666.png" alt="不加锁的情况"></p><ol start="2"><li>加锁的情况（包含使用锁，备份，释放锁的语句）</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808095133717.png" alt="加锁的情况"></p><blockquote><p>在InnoDB引擎中，我们可以在备份时加上参数 –single-transaction 参数来完成不加锁的一致性数据备份。在InnoDB引擎中，不加锁还能保证一致性其实是通过快照读来实现的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --single-transaction -uroot –p123456 itcast &gt; itcast.sql</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>数据库中加全局锁，是一个比较<strong>重</strong>的操作，存在以下问题： </p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得<strong>停摆</strong>。 </li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导 致主从延迟。</li></ul><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h2><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><p>语法： </p><ul><li>加锁：lock tables 表名… read&#x2F;write。 </li><li>释放锁：unlock tables &#x2F; 客户端断开连接 。</li></ul><hr><p>对于表锁，分为两类： </p><ul><li>表共享读锁（read lock） <code>简称读锁</code></li></ul><blockquote><p>加锁后，所有客户端都能查询，但都不能增删改</p></blockquote><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808152427342.png" alt="image-20230808152427342"></p><ul><li>表独占写锁（write lock）<code>简称写锁</code></li></ul><blockquote><p>加锁后，当前客户端可以增删改查，其他客户端什么都不能做</p></blockquote><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808152449872.png" alt="image-20230808152449872"></p><h3 id="元数据锁（meta-data-lock，MDL）"><a href="#元数据锁（meta-data-lock，MDL）" class="headerlink" title="元数据锁（meta data lock，MDL）"></a>元数据锁（meta data lock，MDL）</h3><p>MDL加锁过程是<strong>系统自动控制，无需显式使用</strong>，在访问一张表的时候会自动加上。</p><blockquote><p>MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与 DDL冲突，保证读写的正确性。</p></blockquote><p>这里的元数据，可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务 时，是不能够修改这张表的表结构的。</p><p>相关原理：</p><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read &#x2F; write</td><td>SHARED_READ_ONLY &#x2F; SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select 、select … lock in share mode</td><td>SHARED_READ</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>insert 、update、 delete、select … for update</td><td>SHARED_WRITE</td><td>与SHARED_READ、 SHARED_WRITE兼容，与 EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLUSIVE</td><td>与其他的MDL都互斥</td></tr></tbody></table><p>当执行SELECT、INSERT、UPDATE、DELETE等语句时，添加的是元数据共享锁（SHARED_READ &#x2F; SHARED_WRITE），之间是兼容的。</p><p>当执行SELECT语句时，添加的是元数据共享锁（SHARED_READ），会阻塞元数据排他锁 （EXCLUSIVE），之间是互斥的。</p><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><blockquote><p>在InnoDB引擎中，意向锁主要解决的问题是行锁和表锁之间冲突的问题</p></blockquote><p>如下图所示</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808213525299.png" alt="image-20230808213525299"></p><p>当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。</p><blockquote><p>补充：在该场景中，事务一开启了一个事务并对ID为3的数据行加上了行锁，这意味着其他事务不能修改这一行数据，保证了事务一对该行数据的独占性。而另一个客户端想要在整张表上加一个表锁，这时就会与事务一的行锁产生冲突，<strong>因为事务一的行锁会阻止其他事务在这一行上加行锁，也会阻止其他事务在整张表上加表锁。</strong></p></blockquote><p>有了意向锁之后：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808213815392.png" alt="image-20230808213815392"></p><p>有了意向锁之后，线程B会通过意向锁来判断是否可以加表锁，大大提升效率</p><p>分类 ：</p><ul><li><code>意向共享锁(IS)</code>: 由语句select … lock in share mode添加 。 与表锁共享锁 (read)兼容，与表锁排他锁(write)互斥。 </li><li><code>意向排他锁(IX)</code>: 由insert、update、delete、select…for update自动添加 。与表锁共享锁(read)及排他锁(write)都互斥，意向锁之间不会互斥。</li></ul><blockquote><p>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</p></blockquote><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。 </p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</p><blockquote><p>解释：当事务对某行数据执行操作（例如UPDATE、DELETE）时，InnoDB会通过对涉及的索引项加锁来实现行锁。这是因为索引项存储了数据行的位置信息，而不需要直接访问实际数据。其他事务想要修改相同数据行时，会尝试在相同的索引项上加锁，从而产生锁竞争。</p></blockquote><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>行锁（Record Lock）：锁定单个行记录的锁，防止其他事务对此行进行update和delete。在 RC、RR隔离级别下都支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808221002435.png" alt="image-20230808221002435"></p><hr><p>InnoDB实现了以下两种类型的行锁： </p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。 </li><li>排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ul><p>两种行锁的兼容性如下图：</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230809111747648.png" alt="image-20230809111747648"></p><p>常见的SQL语句，在执行时，所加的行锁如下：</p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>INSERT …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>UPDATE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>DELETE …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>SELECT（正常）</td><td>不加任何锁</td><td></td></tr><tr><td>SELECT … LOCK IN SHARE MODE</td><td>共享锁</td><td>需要手动在SELECT之后加LOCK IN SHARE MODE</td></tr><tr><td>SELECT … FOR UPDATE</td><td>排他锁</td><td>需要手动在SELECT之后加FOR UPDATE</td></tr></tbody></table><p>⭐⭐</p><ul><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。 </li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时就会升级为表锁。</li></ul><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>间隙锁（Gap Lock）：锁定索引记录间隙（<strong>不含该记录</strong>），确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230808221125796.png" alt="image-20230808221125796"></p><h3 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h3><p>临键锁（Next-Key Lock）：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。 在RR隔离级别下支持。</p><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230809212205666.png" alt="image-20230809212205666"></p><h1 id="InnoDB引擎✏️"><a href="#InnoDB引擎✏️" class="headerlink" title="InnoDB引擎✏️"></a>InnoDB引擎✏️</h1><p>逻辑存储结构</p><p>架构</p><h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>讨论事务的四个特性是如何实现保证的：</p><ol><li>原子性：一致性，持久性：redo log ，undo log</li><li>隔离性：锁，MVCC（多版本并发控制）</li></ol><p><img src="/../assets/MySQL%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86%E5%AD%A6%E4%B9%A0/image-20230824163930519.png" alt="image-20230824163930519"></p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>重做日志：redo log日志记录的是数据页的物理变化，服务宕机可用来同步数据</p><p>redo log保证了事务的<mark>持久性</mark></p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>回滚日志：undo log 不同，它主要记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据，比如我们删除一条数据的时候，就会在undo log日志文件中新增一条delete语句，如果发生回滚就执行逆操作</p><p>undo log保证了事务的<mark>原子性和一致性</mark></p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>事务的<mark>隔离性</mark>是由锁和mvcc实现的。</p><p>其中mvcc的意思是多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，它的底层实现主要是分为了三个部分，第一个是隐藏字段，第二个是undo log日志，第三个是readView读视图</p><p><strong>隐藏字段</strong>是指：在mysql中给每个表都设置了隐藏字段，有一个是trx_id(<mark>事务id</mark>)，记录每一次操作的事务id，是自增的；另一个字段是roll_pointer(<mark>回滚指针</mark>)，指向上一个版本的事务版本记录地址</p><p><strong>undo log</strong>主要的作用是<mark>记录回滚日志</mark>，存储老版本数据，在内部会形成一个版本链，在多个事务并行操作某一行记录，记录不同事务修改数据的版本，通过roll_pointer指针形成一个链表</p><p><strong>readView</strong>解决的是<mark>一个事务查询选择版本的问题</mark>，在内部定义了一些匹配规则和当前的一些事务id判断该访问那个版本的数据，不同的隔离级别快照读是不一样的，最终的访问的结果不一样。如果是rc隔离级别，每一次执行快照读时生成ReadView，如果是rr隔离级别仅在事务中第一次执行快照读时生成ReadView，后续复用</p><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><p>它的步骤是这样的：</p><p>第一：主库在事务提交时，会把数据变更记录在二进制日志文件 <mark>Binlog</mark> 中。</p><p>第二：从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</p><p>第三：从库重做中继日志中的事件，将改变反映它自己的数据</p><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后续优化</title>
      <link href="/2023/01/05/Project-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/"/>
      <url>/2023/01/05/Project-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前完成了瑞吉外卖项目的全部功能，但未对性能进行优化，本次将使用redis等技术实现优化。</p><h2 id="缓存短信验证码"><a href="#缓存短信验证码" class="headerlink" title="缓存短信验证码"></a>缓存短信验证码</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>之前的短信验证码是存在session中的，相较于存在redis而言，它不那么安全，且不能设置短信验证码生效时间，故使用redis进行优化。</p><ul><li><p>在UserController类中注入redisTemplate对象</p></li><li><p>将验证码存入redis中，并设置验证码过期时间</p></li><li><p>从redis中获取验证码，并在登录成功后立即删除验证码</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将验证码存入Session</span></span><br><span class="line"><span class="comment">//session.setAttribute(phone, code);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将验证码存入redis中，并设置验证码过期时间</span></span><br><span class="line">redisTemplate.opsForValue().setIfAbsent(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从session中取出生成的验证码</span></span><br><span class="line"><span class="comment">//Object codeInSession = session.getAttribute(phone);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从redis中取出生成的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功后，删除redis中的数据</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure><hr><h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p>移动端在登录过后，会经常访问展示菜品和套餐的界面，该界面的展示方法对应的是DishController和SetmealController中的两个list方法，故需要对该方法进行缓存优化，使得存在缓存时将缓存数据直接传给前端，而无需再访问数据库。</p><p>其次是要防止产生脏数据，如需要在save，update，status方法执行后将缓存清除，以免数据库的数据已经更改，而移动端页面因为存在缓存而不查询数据库导致数据的错乱。</p><p>此处需注意的是，我们不对delete方法做清除缓存的原因是：我们设计数据库表的时候对于菜品或者套餐的删除是逻辑删除，同时list展示方法也会有起售状态的限制，故无需再在delete方法上对缓存进行清除。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>此处对于key的处理是统一使用分类来进行区分，当我们点击某一个分类时，只需展示当前分类下的菜品，而其他分类的菜品数据并不需要展示。</p><h4 id="list方法"><a href="#list方法" class="headerlink" title="list方法"></a>list方法</h4><ul><li>动态获取key</li><li>判断是否存在缓存</li><li>缓存存在则无需查询数据库，直接返回缓存</li><li>缓存不存在则查询数据库，并将查询结果保存在缓存中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动端展示菜品数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">        <span class="comment">//动态获取一个key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断缓存是否存在</span></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList;</span><br><span class="line">        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存存在，则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (dishDtoList != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果缓存不存在，则查询数据库，并将查询到的集合存入缓存中</span></span><br><span class="line">        dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造查询条件</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">            <span class="comment">//获得菜品分类的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="comment">//根据id查询分类对象</span></span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前菜品的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">            dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">            dishDtoList.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将查询到的集合存入缓存中</span></span><br><span class="line">        redisTemplate.opsForValue().setIfAbsent(key, dishDtoList, <span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save方法"><a href="#save方法" class="headerlink" title="save方法"></a>save方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.saveWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="comment">//精确清理当前分类的缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">    redisTemplate.delete(key);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="status方法"><a href="#status方法" class="headerlink" title="status方法"></a>status方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量起售、停售菜品</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">            dish.setStatus(status);</span><br><span class="line">            dishService.updateById(dish);</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SpringCache技术"><a href="#SpringCache技术" class="headerlink" title="SpringCache技术"></a>SpringCache技术</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SpringCache是一个框架，实现了基本注解的缓存功能，只需要简单的添加一个注解，就能实现缓存功能</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@EnableCaching</td><td align="center">开启缓存注解功能</td></tr><tr><td align="center">@Cacheable</td><td align="center">在方法执行前spring先查看缓存中是否有数据。如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td align="center">@CachePut</td><td align="center">将方法的返回值放到缓存中</td></tr><tr><td align="center">@CacheEvict</td><td align="center">将一条或者多条数据从缓存中删除</td></tr></tbody></table><hr><h2 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p>与菜品的分析基本一致，此处不过是用另一种较为简单的方式进行操作缓存而已</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li>导入maven坐标</li><li>在application.yml文件配置cache</li><li>在启动类上加上<code>@EnableCaching</code>注解</li><li>list方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@Cacheable(value = &quot;setmealCache&quot;, key = &quot;#setmeal.categoryId+&#x27;_&#x27;+#setmeal.status&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="5"><li>save方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="6"><li>update方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br></pre></td></tr></table></figure><ol start="7"><li>status方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br></pre></td></tr></table></figure><hr><h1 id="读写分离优化"><a href="#读写分离优化" class="headerlink" title="读写分离优化"></a>读写分离优化</h1><h2 id="为什么要读写分离"><a href="#为什么要读写分离" class="headerlink" title="为什么要读写分离"></a>为什么要读写分离</h2><p>因为之前对于数据库的增删改查都是对同一台服务器进行操作，不仅这样对单个服务器的压力很大，而且如果该服务器的硬盘损毁，则数据也会丢失，会不安全。而使用读写分离是基于MySQL提供的主从复制功能实现，我们可以对主库进行增删改的操作，对从库进行查找的操作，而对主库的修改会通过日志的形式同步修改到从库中，从而保证数据是正确的。</p><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB.png" alt="读写分离图"></p><hr><h2 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h2><p>MySQL复制过程分成三步:</p><ul><li><p>master将改变记录到二进制日志（binary log)</p></li><li><p>slave将master的binary log拷贝到它的中继日志（relay log)</p></li><li><p>slave重做中继日志中的事件，将改变应用到自己的数据库中</p></li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%BB%AD%E4%BC%98%E5%8C%96/image-20230728162538415.png" alt="image-20230728162538415"></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>后续的MySQL的读写分离优化，nginx，swagger等优化待续……</p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瑞吉外卖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2023/01/04/Study-Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2023/01/04/Study-Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在学习瑞吉外卖项目时使用到的stream流操作，现在回来补一下，看的视频教程依然是<a href="https://www.bilibili.com/video/BV18J411W7cE/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a></p><h2 id="lambda表达式⭐⭐⭐"><a href="#lambda表达式⭐⭐⭐" class="headerlink" title="lambda表达式⭐⭐⭐"></a>lambda表达式⭐⭐⭐</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以理解为是匿名内部类的另一种写法，本质是注重做了什么。</p></blockquote><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><blockquote><ul><li><p>需要有一个接口，该接口中有且仅有一个抽象方法，其实也可以说是函数式接口。</p></li><li><p>必须要有上下文环境，即可以推导</p></li></ul></blockquote><h3 id="具体格式（形式）"><a href="#具体格式（形式）" class="headerlink" title="具体格式（形式）"></a>具体格式（形式）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（调用的参数）-&gt;&#123;</span><br><span class="line">    执行的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，诸如<code>int</code>，<code>String</code>这样的变量类型可以省略，不过要省就全部一起省，只用一个调用参数的话小括号也可以省，只有一条执行语句大括号也可以省略，且此时<code>return</code>关键字也可以省略。</p><hr><h2 id="方法引用⭐⭐"><a href="#方法引用⭐⭐" class="headerlink" title="方法引用⭐⭐"></a>方法引用⭐⭐</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>可以用lambda表达式的地方就可以使用方法引用，可以说他们是孪生兄弟。</p></blockquote><h3 id="具体形式"><a href="#具体形式" class="headerlink" title="具体形式"></a>具体形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out::println</span><br></pre></td></tr></table></figure><p>可以理解为System.out这个对象调用了println这个方法，因为跟lambda类似，是可以推导出来的，（<strong>能推导的就是可以省略的</strong>）</p><h3 id="几种形式"><a href="#几种形式" class="headerlink" title="几种形式"></a>几种形式</h3><ol><li>引用类方法：</li></ol><p>​类名::静态方法（Interger::parseInt）</p><ol start="2"><li>引用对象的实例方法</li></ol><p>​对象::方法</p><ol start="3"><li>引用类的实例方法</li></ol><p>​类名::方法</p><ol start="4"><li>引用构造器</li></ol><p>​类名::new</p><blockquote><p>具体可以参考<a href="https://www.bilibili.com/video/BV12R4y157Be/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">mybatisplus学习</a>中的条件构造器</p></blockquote><hr><h2 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h2><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><p>在方法前可以加一个default代表默认方法，实现该接口的实现类不用必须重写该方法，但有需要也是可以重写的。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>在方法前加一个static就代表是静态方法，同样无须重写，甚至还可以有方法体。</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>加入private关键字就是私有方法了</p><hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个接口有且只有一个抽象方法就是函数式接口，可以加<code>@FunctionalInterface</code>注解表明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInter</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的参数"><a href="#函数式接口作为方法的参数" class="headerlink" title="函数式接口作为方法的参数"></a>函数式接口作为方法的参数</h3><p><strong>意义在于：函数式接口作为方法的参数时，可以把lambda表达式作为参数传递。</strong></p><p>下面例子中<code>Runnable</code>就是一个函数式接口，有且仅有一个run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        useThread(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        useThread(()-&gt; System.out.println(<span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useThread</span><span class="params">(Runnable r)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数式接口作为方法的返回值"><a href="#函数式接口作为方法的返回值" class="headerlink" title="函数式接口作为方法的返回值"></a>函数式接口作为方法的返回值</h3><p>意义在于：函数式接口作为方法的返回值时，可以把lambda表达式写到方法返回值处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        arrayList.sort(getByLong());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title function_">getByLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用匿名内部类</span></span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length() - s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用lambda</span></span><br><span class="line">        <span class="keyword">return</span> (s1, s2) -&gt; s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看起来代码优雅多了~~</p><h3 id="常用的函数式接口"><a href="#常用的函数式接口" class="headerlink" title="常用的函数式接口"></a>常用的函数式接口</h3><ol><li><p>Supplier</p></li><li><p>Consumer</p></li><li><p>Predicate</p></li><li><p>Function</p><p><img src="/../assets/java8%E6%96%B0%E7%89%B9%E6%80%A7/%E5%9B%9B%E5%A4%A7%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png" alt="四大内置函数式接口"></p></li></ol><blockquote><p>其实我觉得没啥用，感觉多此一举了，下面举个例子吧，有需要再去看<a href="https://www.bilibili.com/video/BV18J411W7cE/?p=386&spm_id_from=pageDriver&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员</a>了，感觉也是用不上的，其实就是在这些常用API中使用lambda表达式而已。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>&#125;;</span><br><span class="line">        operateString(strArray, s -&gt; System.out.print(<span class="string">&quot;姓名：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]), s -&gt; System.out.println(<span class="string">&quot;，年龄：&quot;</span> + s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">operateString</span><span class="params">(String[] strArray, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : strArray) &#123;</span><br><span class="line">            con1.andThen(con2).accept(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="stream流⭐⭐⭐⭐⭐"><a href="#stream流⭐⭐⭐⭐⭐" class="headerlink" title="stream流⭐⭐⭐⭐⭐"></a>stream流⭐⭐⭐⭐⭐</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小黄&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小乌龟&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李强&quot;</span>);</span><br><span class="line">        <span class="comment">//要求：对集合进行过滤，要“小”开头且长度为2的字符串，最后打印</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;小&quot;</span>)).filter(s -&gt; s.length() == <span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="流的生成操作"><a href="#流的生成操作" class="headerlink" title="流的生成操作"></a>流的生成操作</h3><ol><li><p>Collection体系的诸如list和set可直接调用stream流生成</p></li><li><p>map集合可以先生成<code>keySet</code>，<code>value</code>，<code>entrySet</code>，再通过stream流生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure></li><li><p>数组可以通过Stream的静态方法生成流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="流的中间操作"><a href="#流的中间操作" class="headerlink" title="流的中间操作"></a>流的中间操作</h3><ol><li><p>filter</p><p>用于过滤，方法中调用的参数是Predicate，该类中有一个test方法用于判断得到boolean值</p><p>例子可见实例处</p></li><li><p>limit</p><p>取前n个元素</p></li><li><p>skip</p><p>取n个元素之后的元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳过前2个元素之后去剩余元素的前2个元素并输出</span></span><br><span class="line">list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>静态方法concat</p><p>合并两个流</p></li><li><p>distinct</p><p>去除流中重复元素</p></li></ol><hr><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建第一个流</span></span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//创建第二个流</span></span><br><span class="line">Stream&lt;String&gt; stream2 = list.stream().skip(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//合并两个流，并要求字符串不能有重复</span></span><br><span class="line">Stream&lt;String&gt; concat = Stream.concat(stream1, stream2);</span><br><span class="line">concat.distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="6"><li><p>sorted</p><p>排序，不加参数按自然排序，加比较器参数（使用lambda表达式）后按指定形式排序</p></li><li><p>map和mapToInt</p><p>将流中的元素由一种类型转换为另一种类型，而mapToInt是直接转换为Int型，拥有独有的sum用于统计总和</p></li><li><p>match</p></li></ol><p>判断数据是否匹配指定的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// .allMatch(e -&gt; e &gt; 0); // allMatch: 元素是否全部满足条件</span></span><br><span class="line"><span class="comment">// .anyMatch(e -&gt; e &gt; 5); // anyMatch: 元素是否任意有一个满足条件</span></span><br><span class="line">.noneMatch(e -&gt; e &lt; <span class="number">0</span>); <span class="comment">// noneMatch: 元素是否全部不满足条件</span></span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>max和min</li></ol><p>获取最大和最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMax_Min</span><span class="params">()</span> &#123;</span><br><span class="line">Optional&lt;Integer&gt; max = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).max((o1, o2) -&gt; o1 - o2);</span><br><span class="line">System.out.println(<span class="string">&quot;first = &quot;</span> + max.get());</span><br><span class="line">Optional&lt;Integer&gt; min = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).min((o1, o2) -&gt; o1 - o2);</span><br><span class="line">System.out.println(<span class="string">&quot;any = &quot;</span> + min.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>reduce</li></ol><p>将所有数据归纳得到一个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReduce</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (a, b) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;, b = &quot;</span> + b);</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// reduce:</span></span><br><span class="line"><span class="comment">// 第一次将默认做赋值给x, 取出第一个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第二次,将第一次的结果赋值给x, 取出二个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第三次,将第二次的结果赋值给x, 取出三个元素赋值给y,进行操作</span></span><br><span class="line"><span class="comment">// 第四次,将第三次的结果赋值给x, 取出四个元素赋值给y,进行操作</span></span><br><span class="line">System.out.println(<span class="string">&quot;reduce = &quot;</span> + reduce);</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce2</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.sum(x, y);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">int</span> <span class="variable">reduce3</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Stream.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">.reduce(<span class="number">0</span>, (x, y) -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;max = &quot;</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>find</li></ol><p>查找满足条件的第一个数据</p><blockquote><p>两个方法的区别：</p><ol><li><code>findFirst</code> 方法： <code>findFirst</code> 方法会在流中按顺序查找元素，并返回第一个满足条件的元素。这通常在需要获取流中的第一个匹配元素时使用。由于流可能是有序或无序的，这个方法在有序流中会返回第一个匹配的元素，而在无序流中会返回其中的任意一个匹配元素。</li><li><code>findAny</code> 方法： <code>findAny</code> 方法则会在流中查找任意满足条件的元素，并返回找到的任意一个匹配元素。这个方法在需要快速找到任意一个匹配元素时比较有用，尤其是在并行流操作时，因为它不需要保证顺序，因此可能会更快地找到匹配元素。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; first = Stream.of(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>).filter(s -&gt; s &gt; <span class="number">3</span>).findFirst();</span><br><span class="line">System.out.println(first.get());</span><br></pre></td></tr></table></figure><hr><h3 id="流的终止操作"><a href="#流的终止操作" class="headerlink" title="流的终止操作"></a>流的终止操作</h3><ol><li><p>forEach</p><p>使用参数进行操作，例如打印输出</p></li><li><p>count</p><p>统计流中个数</p></li></ol><h3 id="流的收集操作"><a href="#流的收集操作" class="headerlink" title="流的收集操作"></a>流的收集操作</h3><p>收集Stream流中的结果 </p><ol><li>到集合中: Collectors.toList()&#x2F;Collectors.toSet()&#x2F;Collectors.toCollection()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToCollection</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">ArrayList&lt;String&gt; arrayList =              stream.collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line">HashSet&lt;String&gt; hashSet = stream.collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>到数组中: toArray()&#x2F;toArray(int[]::new)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToArray</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>);</span><br><span class="line">String[] strings = stream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">for</span> (String str : strings) &#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>聚合计算:</li></ol><blockquote><p>Collectors.maxBy&#x2F;Collectors.minBy&#x2F;Collectors.counting&#x2F;Collectors.summingInt&#x2F;Collectors.averagingInt</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStreamToOther</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">58</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="comment">// 获取最大值</span></span><br><span class="line">Optional&lt;Student&gt; collect = studentStream.collect(Collectors.maxBy((o1, o2) -&gt;</span><br><span class="line">o1.getSocre() - o2.getSocre()));</span><br><span class="line"><span class="comment">// 获取最小值</span></span><br><span class="line">Optional&lt;Student&gt; collect = studentStream.collect(Collectors.minBy((o1, o2) -&gt;</span><br><span class="line">o1.getSocre() - o2.getSocre()));</span><br><span class="line">System.out.println(collect.get());</span><br><span class="line"><span class="comment">// 求总和</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sumAge</span> <span class="operator">=</span> studentStream.collect(Collectors.summingInt(s -&gt; s.getAge()));</span><br><span class="line">System.out.println(<span class="string">&quot;sumAge = &quot;</span> + sumAge);</span><br><span class="line"><span class="comment">// 平均值</span></span><br><span class="line"><span class="type">double</span> <span class="variable">avgScore</span> <span class="operator">=</span> studentStream.collect(Collectors.averagingInt(s -&gt;                                                        s.getSocre()));</span><br><span class="line">System.out.println(<span class="string">&quot;avgScore = &quot;</span> + avgScore);</span><br><span class="line"><span class="comment">// 统计数量</span></span><br><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> studentStream.collect(Collectors.counting());</span><br><span class="line">System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>分组: Collectors.groupingBy</li></ol><blockquote><p>当我们使用Stream流处理数据后，可以根据某个属性将数据分组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGroup</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">55</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">33</span>));</span><br><span class="line"><span class="comment">// Map&lt;Integer, List&lt;Student&gt;&gt; map =</span></span><br><span class="line">studentStream.collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line"><span class="comment">// 将分数大于60的分为一组,小于60分成另一组</span></span><br><span class="line">Map&lt;String, List&lt;Student&gt;&gt; map = studentStream</span><br><span class="line">        .collect(Collectors.groupingBy((s) -&gt;&#123;</span><br><span class="line"><span class="keyword">if</span> (s.getSocre() &gt; <span class="number">60</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot;::&quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不及格::[Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=55&#125;, Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=33&#125;]</span><br><span class="line">及格::[Student&#123;name=&#x27;赵丽颖&#x27;, age=52, socre=95&#125;, Student&#123;name=&#x27;杨颖&#x27;, age=56, socre=88&#125;]</span><br></pre></td></tr></table></figure><blockquote><p>多级分组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomGroup</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line">Map&lt;Integer, Map&lt;String, List&lt;Student&gt;&gt;&gt; map =</span><br><span class="line">studentStream.collect(Collectors.groupingBy(s -&gt; s.getAge(), </span><br><span class="line">                                            Collectors.groupingBy(s -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">80</span> &amp;&amp; s.getSocre() &lt; <span class="number">90</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.getSocre() &gt;= <span class="number">80</span> &amp;&amp; s.getSocre() &lt; <span class="number">80</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot; == &quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">52 == &#123;不及格=[Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=77&#125;], 优秀=[Student&#123;name=&#x27;赵丽颖&#x27;, age=52,</span><br><span class="line">socre=95&#125;]&#125;</span><br><span class="line">56 == &#123;优秀=[Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=99&#125;], 良好=[Student&#123;name=&#x27;杨颖&#x27;, age=56,</span><br><span class="line">socre=88&#125;]&#125;</span><br></pre></td></tr></table></figure><hr><ol start="5"><li>分区: Collectors.partitionBy</li></ol><blockquote><p>Collectors.partitioningBy 会根据值是否为true，把集合分割为两个列表，一个true列表，一个false列表。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPartition</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="comment">// partitioningBy会根据值是否为true，把集合分割为两个列表，一个true列表，一个false列表。</span></span><br><span class="line">Map&lt;Boolean, List&lt;Student&gt;&gt; map = studentStream.collect(Collectors.partitioningBy(s -&gt;s.getSocre() &gt; <span class="number">90</span>));</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">System.out.println(k + <span class="string">&quot; == &quot;</span> + v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">false == [Student&#123;name=&#x27;杨颖&#x27;, age=56, socre=88&#125;, Student&#123;name=&#x27;柳岩&#x27;, age=52, socre=77&#125;]</span><br><span class="line">true == [Student&#123;name=&#x27;赵丽颖&#x27;, age=52, socre=95&#125;, Student&#123;name=&#x27;迪丽热巴&#x27;, age=56, socre=99&#125;]</span><br></pre></td></tr></table></figure><hr><ol start="6"><li>拼接: Collectors.joinging</li></ol><blockquote><p>Collectors.joining 会根据指定的连接符，将所有元素连接成一个字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJoining</span><span class="params">()</span> &#123;</span><br><span class="line">Stream&lt;Student&gt; studentStream = Stream.of(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;赵丽颖&quot;</span>, <span class="number">52</span>, <span class="number">95</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;杨颖&quot;</span>, <span class="number">56</span>, <span class="number">88</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">56</span>, <span class="number">99</span>),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;柳岩&quot;</span>, <span class="number">52</span>, <span class="number">77</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> studentStream</span><br><span class="line">.map(Student::getName)</span><br><span class="line">.collect(Collectors.joining(<span class="string">&quot;&gt;_&lt;&quot;</span>, <span class="string">&quot;^_^&quot;</span>, <span class="string">&quot;^v^&quot;</span>));</span><br><span class="line">System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^_^赵丽颖&gt;_&lt;杨颖&gt;_&lt;迪丽热巴&gt;_&lt;柳岩^v^</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>瑞吉外卖后端代码实现</title>
      <link href="/2022/12/31/Project-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/12/31/Project-%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本人参照<a href="https://www.bilibili.com/video/BV13a411q753/?spm_id_from=333.999.0.0&vd_source=fa7ba4ae353f08f1d08d1bb24528e96c">黑马程序员瑞吉外卖</a>视频进行学习，并完善了剩余功能。</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="主要使用的技术"><a href="#主要使用的技术" class="headerlink" title="主要使用的技术"></a>主要使用的技术</h3><blockquote><ul><li><p>后端：<code>springboot，spring，springmvc，mybatis，mybatis-plus </code></p></li><li><p>前端：<code>html,css,js,vue,elementui</code></p></li></ul></blockquote><h3 id="搭建数据库（reggie）-表"><a href="#搭建数据库（reggie）-表" class="headerlink" title="搭建数据库（reggie）&#x2F;表"></a>搭建数据库（reggie）&#x2F;表</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8.png" alt="数据库表图"></p><p>具体表中的各个字段所代表的意义都已在数据库设计表中的注释提及</p><table><thead><tr><th>表名</th><th>表的描述</th></tr></thead><tbody><tr><td>employee（员工表）</td><td>用于存放后台管理人员的信息</td></tr><tr><td>category（分类表）</td><td>分类表中存放的是菜品的分类和套餐的分类</td></tr><tr><td>dish（菜品表）</td><td>存放的是菜品的信息，一个菜品必属于一个菜品分类，一个菜品分类也可以有不止一种菜品</td></tr><tr><td>dish_flavor（菜品口味表）</td><td>存放的是菜品口味的信息，一个菜品可以有多种口味，对应着就会有多条数据是隶属于一个菜品的，其中已经用菜品的<code>id</code>把对应的菜品和菜品口味关联好</td></tr><tr><td>setmeal（套餐表）</td><td>存放的是套餐的信息，一个套餐必属于一个套餐分类，一个套餐分类也可以有不止一种套餐</td></tr><tr><td>setmeal_dish（套餐菜品对应表）</td><td>存放的是套餐里所包含的菜品的信息（<strong>因为一个套餐是由若干个菜品相组成的</strong>），此处存放的信息就是该套餐下所包含的是哪些菜品</td></tr><tr><td>orders（订单表）</td><td>存放的是用户下单之后的订单的简单信息（包括订单号，订单状态，收货人，联系电话，地址，支付金额，下单时间）</td></tr><tr><td>order_details（订单明细表）</td><td>存放的是用户下单之后的订单的更多信息（包含了用户购买的是哪些菜品或套餐）</td></tr><tr><td>address_book（地址簿表）</td><td>存放的是用户的地址信息，也包含默认地址等</td></tr><tr><td>shoppingcart（购物车表）</td><td>存放的是用户通过移动端点击对应的菜品或套餐所加入的数据，清空购物车自然就是清空<strong>该用户</strong>的购物车数据</td></tr><tr><td>user（用户表）</td><td>存放的是用户的基本信息</td></tr></tbody></table><hr><h3 id="Idea中的基本配置"><a href="#Idea中的基本配置" class="headerlink" title="Idea中的基本配置"></a>Idea中的基本配置</h3><blockquote><p>通过mybatis-plus来逆向创建对应的pojo，mapper，service接口和serviceImpl实体类即可。</p></blockquote><h4 id="创建通用的R类（通用返回结果类）"><a href="#创建通用的R类（通用返回结果类）" class="headerlink" title="创建通用的R类（通用返回结果类）"></a>创建通用的R类（通用返回结果类）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="设置静态资源映射"><a href="#设置静态资源映射" class="headerlink" title="设置静态资源映射"></a>设置静态资源映射</h4><blockquote><p>主要是让Spring可以扫描<code>backend</code>和<code>front</code>下的静态资源（HTML,CSS.JS）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后台员工登录登出功能"><a href="#后台员工登录登出功能" class="headerlink" title="后台员工登录登出功能"></a>后台员工登录登出功能</h2><h3 id="员工登录功能"><a href="#员工登录功能" class="headerlink" title="员工登录功能"></a>员工登录功能</h3><blockquote><p><strong>员工登录功能</strong></p><ol><li><p>将页面提交过来的<code>password</code>进行<code>md5</code>加密</p></li><li><p>根据用户提交的用户名查询数据库</p></li><li><p>如果用户不存在则退出</p></li><li><p>密码比对，如果不成功则退出</p></li><li><p>查看账号是否已被禁用</p></li><li><p>登录成功，将员工的<code>id</code>存入<code>Session</code>(重点)中，（此处获得这个<code>id</code>的作用是让员工管理业面可显示出此时登录者的名字）并返回登录成功结果</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.将页面提交过来的password进行md5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.根据用户提交的用户名查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果用户不存在则退出</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.密码比对，如果不成功则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!password.equals(emp.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.查看账号是否已被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="员工登出功能"><a href="#员工登出功能" class="headerlink" title="员工登出功能"></a>员工登出功能</h3><blockquote><ol><li><p>将登录时存在<code>Session</code>中的<code>id</code>释放出来</p></li><li><p>返回结果（注意：此时业面跳转不显示<strong>退出成功</strong>的原因是：因为显示<code>退出成功</code>的<code>html</code>页面已经关闭，故在登录页看不到<code>退出成功</code>的显示）</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="完善员工登录登出"><a href="#完善员工登录登出" class="headerlink" title="完善员工登录登出"></a>完善员工登录登出</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><blockquote><p>因为可以不通过登录而直接访问员工管理的页面，这显然是不合理的，需要通过设置一个拦截器，去让用户必须先登录才能访问员工管理页面。</p><ol><li><p>获取本次请求的URI</p></li><li><p>定义不需要处理的请求路径（即一个字符串数组）</p></li><li><p>创建一个<code>PATH_MATCHER</code>来比对路径上的通配符</p></li><li><p>判断本次请求是否需要处理</p></li><li><p>如果不需要处理，则直接放行</p></li><li><p>判断登录状态，如果已登录，则直接放行</p></li><li><p>如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="comment">//路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();<span class="comment">// /backend/index.html</span></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,<span class="comment">//登录的请求路径</span></span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,<span class="comment">//登出的请求路径</span></span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,<span class="comment">//后台的静态资源</span></span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span><span class="comment">//移动端的静态资源</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(check)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">//5、如果未登录则返回未登录结果，通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls,String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="踩坑点"><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h4><blockquote><p>若没加<code>.getSession()</code>则会使登录成功后一直重新回到登录页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录成功，将员工的id存入Session中，并返回登录成功结果</span></span><br><span class="line">request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"><span class="keyword">return</span> R.success(emp);</span><br></pre></td></tr></table></figure><blockquote><p>如果还有问题，可以尝试去清除一下浏览器缓存</p></blockquote><hr><h2 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h2><h3 id="新增员工功能"><a href="#新增员工功能" class="headerlink" title="新增员工功能"></a>新增员工功能</h3><hr><blockquote><p><strong>需求分析</strong>：因为前端页面展示的让用户新增员工时所填的信息有限，一部分<code>employee</code>分装对象中的属性，即表中的字段需要<strong>填入默认值</strong>，故该方法用于接收前端页面所传递过来的包装好的<code>employee</code>对象，并将<strong>该对象存进表中</strong>。</p></blockquote><blockquote><p>功能分析：</p><ol><li><p>设置默认密码(使用<code>md5</code>加密处理)</p></li><li><p>获取登录时传入<code>Session</code>中的<code>id</code></p></li><li><p>添加创建人信息（该创建人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加修改人信息（该修改人为<code>Session</code>中存入的<code>id</code>）</p></li><li><p>添加创建时间</p></li><li><p>添加更新时间</p></li><li><p>将该对象的属性存入表中</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置默认密码(使用md5加密处理)</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取登录时传入Session中的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="comment">//添加创建人信息</span></span><br><span class="line">        employee.setCreateUser(empId);</span><br><span class="line">        <span class="comment">//添加修改人信息</span></span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        <span class="comment">//添加创建时间</span></span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//添加更新时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        <span class="comment">//将该对象的属性存入表中</span></span><br><span class="line">        employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="完善新增员工功能"><a href="#完善新增员工功能" class="headerlink" title="完善新增员工功能"></a>完善新增员工功能</h3><blockquote><p><strong>需求分析</strong>：</p><p>因为<code>employee</code>表中的<code>username</code>字段被设置为了唯一的约束，故在前端页面填写时输入相同的<code>username</code>会抛出异常，故需要做出解决，提出错误信息。</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li><p>配置全局异常的一个类，让所有<code>Controller</code>层的类的异常都经过该类处理。</p></li><li><p>解决上述索引唯一的异常，为前端展示错误信息。</p></li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="员工分页查询显示到前端"><a href="#员工分页查询显示到前端" class="headerlink" title="员工分页查询显示到前端"></a>员工分页查询显示到前端</h2><h3 id="分页查询功能"><a href="#分页查询功能" class="headerlink" title="分页查询功能"></a>分页查询功能</h3><blockquote><p><strong>需求分析：</strong></p><p>前端发送<code>get</code>请求，把<code>page</code>当前页,<code>pageSize</code>每页显示条数,<code>name</code>查询名等参数传入<code>controller</code>层，后端进行分页查询和条件查询并把查询对象传回给前端</p></blockquote><blockquote><p><strong>功能实现：</strong></p><ol><li>添加mybatis-plus的分页插件</li><li>构造分页查询器</li><li>构造条件查询器</li><li>添加过滤条件（这里使用<code>like</code>而不是<code>eq</code>）</li><li>添加排序条件</li><li>执行查询，返回结果（结果中返回的<code>pageInfo</code>对象是因为查询完后会将数据封装到该对象中，并且与前端中相响应）</li></ol></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页查询器</span></span><br><span class="line">        Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//构造条件查询器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotBlank(name),Employee::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        employeeService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5%E6%9D%A1.png" alt="前端分页条"></p><blockquote><p>该处可去前端页面修改<code>list.html</code></p></blockquote><hr><h2 id="启用-禁用员工账号"><a href="#启用-禁用员工账号" class="headerlink" title="启用&#x2F;禁用员工账号"></a>启用&#x2F;禁用员工账号</h2><h3 id="启用-禁用员工账号功能实现"><a href="#启用-禁用员工账号功能实现" class="headerlink" title="启用&#x2F;禁用员工账号功能实现"></a>启用&#x2F;禁用员工账号功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>管理员账号<code>admin</code>可以对员工账号进行启用和禁用操作，而其他用户不可进行该操作</p><p><strong>代码实现：</strong></p><p>本质上是一个update操作，<code>status</code>和<code>id</code>已经从前端传入，需要额外更改的是更新人和更新时间。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><blockquote><p><strong>原因分析：</strong></p><p><code>js</code>对<code>Long</code>类型的数据的处理时丢失了精度，导致前端发送过来的<code>id</code>与数据库中的<code>id</code>不一致</p></blockquote><blockquote><p><strong>解决方案：</strong></p><p>将<code>json</code>中的<code>Long</code>型数据转成字符串，在配置中添加对应的方法即可。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展mvc框架的消息转换器（写在WebMVCConfig中）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">        <span class="comment">//创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>,messageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="编辑员工信息功能"><a href="#编辑员工信息功能" class="headerlink" title="编辑员工信息功能"></a>编辑员工信息功能</h2><h3 id="编辑员工信息功能实现"><a href="#编辑员工信息功能实现" class="headerlink" title="编辑员工信息功能实现"></a>编辑员工信息功能实现</h3><blockquote><p><strong>需求分析：</strong></p><p>用户点击编辑时进入编辑界面，此时登录页面时可以看到用户原本的信息，再经过修改信息后保存到数据库。</p></blockquote><hr><h4 id="回显功能实现（进入编辑页面可看到用户原始信息）"><a href="#回显功能实现（进入编辑页面可看到用户原始信息）" class="headerlink" title="回显功能实现（进入编辑页面可看到用户原始信息）"></a>回显功能实现（进入编辑页面可看到用户原始信息）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="编辑功能实现"><a href="#编辑功能实现" class="headerlink" title="编辑功能实现"></a>编辑功能实现</h4><blockquote><p>注意：此处直接调用的是启用&#x2F;禁用员工账号时的方法，因为传入的是一个<code>employee</code>对象，故该方法是一个通用的  更新方法。</p></blockquote><hr><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><h3 id="为什么要对公共字段填充"><a href="#为什么要对公共字段填充" class="headerlink" title="为什么要对公共字段填充"></a>为什么要对公共字段填充</h3><blockquote><p>因为不论是在员工管理处还是菜品或者套餐管理处都需要添加诸如<code>createTime</code>，<code>updateTime</code>，<code>createUser</code>，以及<code>updateUser</code>这四个字段，故可以使用<code>mybatis-plus</code>提供的公共字段自动填充方法，省去手动为用户填写这四个信息。</p></blockquote><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><hr><h4 id="1-在employee表中这四个字段上添加相应属性"><a href="#1-在employee表中这四个字段上添加相应属性" class="headerlink" title="1.在employee表中这四个字段上添加相应属性"></a>1.在<code>employee</code>表中这四个字段上添加相应属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//此处要修改为LocalDateTime，因为数据库中与这里使用的类型不一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;<span class="comment">//与上同理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>updateTime</code>和<code>updateUser</code>需要在创建和更改时都做更改</p></blockquote><hr><h4 id="2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去"><a href="#2-可将原新增员工功能及更改员工信息功能处的相应的方法注释去" class="headerlink" title="2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去"></a>2.可将原新增员工功能及更改员工信息功能处的相应的方法注释去</h4><hr><h4 id="3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"><a href="#3-基于ThreadLocal封装工具类，用户保存和获取当前登录用户id" class="headerlink" title="3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id"></a>3.基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</h4><blockquote><p>创建该工具类，因为在一次Http请求中线程是唯一的，故可以通过该方式得到存入Session中存放的id。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-自定义元数据对象处理器（即公共字段自动填充类）"><a href="#4-自定义元数据对象处理器（即公共字段自动填充类）" class="headerlink" title="4.自定义元数据对象处理器（即公共字段自动填充类）"></a>4.自定义元数据对象处理器（即公共字段自动填充类）</h4><blockquote><p>该类中重写两个方法，分别用于插入操作和更新操作时的自动填充。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjecthandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[update]...&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;线程id为：&#123;&#125;&quot;</span>,id);</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>,LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>,BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-将Session中存放的id存入线程中"><a href="#5-将Session中存放的id存入线程中" class="headerlink" title="5.将Session中存放的id存入线程中"></a>5.将Session中存放的id存入线程中</h4><blockquote><p>在已登录的情况下将Session中存放的id存入线程中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">            BaseContext.setCurrentId(empId);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="小结（逻辑）"><a href="#小结（逻辑）" class="headerlink" title="小结（逻辑）"></a>小结（逻辑）</h3><blockquote><p>在一次Http请求中线程是不会发生改变的，也就是说，在发送请求给后端时，经过过滤器，再经过Controller，最后在MyMetaObjecthandler实现自动填充方法时的线程的id都是不会发生改变的。</p><p>需要使用到线程的原因是因为在自动填充更新人和创建人的时候，需要将用户的id传入，但在MyMetaObjecthandler类中无法直接获得到Session中的id，故需要使用该方法。</p></blockquote><hr><h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="新增分类功能实现"><a href="#新增分类功能实现" class="headerlink" title="新增分类功能实现"></a>新增分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分类分页查询显示数据到页面上"><a href="#分类分页查询显示数据到页面上" class="headerlink" title="分类分页查询显示数据到页面上"></a>分类分页查询显示数据到页面上</h2><h3 id="分类分页查询功能实现"><a href="#分类分页查询功能实现" class="headerlink" title="分类分页查询功能实现"></a>分类分页查询功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort);</span><br><span class="line">        categoryService.page(pageInfo,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p><strong>注意</strong>：因为分类表中包含着菜品分类和套餐分类，而对应的菜品表和套餐表中存在着一些关联，故规定菜品表（套餐表）中存在关联的分类不允许删除。</p></blockquote><h3 id="代码功能实现"><a href="#代码功能实现" class="headerlink" title="代码功能实现"></a>代码功能实现</h3><ul><li><strong>在<code>CategoryController</code>类中调用自定义方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span>&#123;</span><br><span class="line">        categoryService.remove(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>在<code>CategoryService</code>接口中创建自定义方法<code>remove</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>在<code>CategoryServiceImpl</code>实现类中实现方法</strong></p><blockquote><p>通过查询菜品表或商品表中<code>CategoryId</code>与传入的<code>id</code>相等的数量，若大于零则证明存在关联，则不允许删除，则抛出一个自定义的异常</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishService dishService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除，删除前需判断条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">        <span class="comment">//查看是否关联菜品</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        dishLambdaQueryWrapper.eq(Dish::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了菜品，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看是否关联套餐</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, ids);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下关联了套餐，不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//无关联则进行删除</span></span><br><span class="line">        <span class="built_in">super</span>.removeById(ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>自定义异常类<code>CustomException</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将该异常交于之前定义的全局异常处理器处理</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span>&#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="修改分类功能实现"><a href="#修改分类功能实现" class="headerlink" title="修改分类功能实现"></a>修改分类功能实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">        categoryService.updateById(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h2><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p>用于新增菜品时的图片的上传和回显</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">//file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();<span class="comment">//abc.jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;<span class="comment">//dfsdfdfd.jpg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">//判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            <span class="comment">//目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出流，通过输出流将文件写回浏览器</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>点击新建菜品后，页面会立即发送一个请求（获取菜品分类信息列表）</strong></p><p><strong>菜品图片得上传和回显由之前完成</strong></p><p><strong>此处新增菜品所上传得数据不只有菜品表的信息，还有菜品口味表的信息，故接受数据需要一个新的类</strong></p></blockquote><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>菜品分类展示为下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">        queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">        List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新建一个类用于接受前端发送的数据</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//菜品口味列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;<span class="comment">//分类名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>新添加一个方法用于一次修改两张表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="comment">//新增菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>实现该方法</strong></p><blockquote><p><strong>注意：此处需要开始事务，并且由前端传入的菜品口味数据中没有与之对应的菜品<code>id</code>，故需要拿到菜品口味的列表集合进行<code>id</code>的赋值。</strong></p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DishFlavorService dishFlavorService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息保存到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.save(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将菜品口味存入菜品口味表</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品分页展示"><a href="#菜品分页展示" class="headerlink" title="菜品分页展示"></a>菜品分页展示</h2><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><blockquote><p><strong>与员工和分类的查询的不同之处在于：<code>Dish</code>表中所有的只是分类的<code>id</code>而不是分类的名称，但前端页面需要展示的是分类的名称而不是<code>id</code>。</strong></p></blockquote><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>在基础上加以改变</p><ul><li>将分页对象pageInfo拷贝给dishDtoPage，但不拷贝records这个集合（该集合存储的是前端传入的数据）</li><li>将List<Dish>传给List<DishDto>的同时，将分类的名称也传入List<DishDto></li><li>实现方式为用列表存储多个DishDto对象，通过分类id得到分类对象，再通过分类对象得到分类名称，将分类名称放入DishDto对象中，并将Dish中的其他属性拷贝至DishDto中，最后统一由list收集DishDto对象。</li><li>将list对象传入分页对象的recodes属性中。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>,Dish::getName,name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        dishService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo,dishDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish record : records) &#123;</span><br><span class="line">   <span class="comment">//每轮循环创造一个新的disDto对象</span></span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record,dishDto);</span><br><span class="line"></span><br><span class="line">            list.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;DishDto&gt; list = records.stream().map((item) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            DishDto dishDto = new DishDto();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            BeanUtils.copyProperties(item,dishDto);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            Long categoryId = item.getCategoryId();//分类id</span></span><br><span class="line"><span class="comment">//            //根据id查询分类对象</span></span><br><span class="line"><span class="comment">//            Category category = categoryService.getById(categoryId);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            if(category != null)&#123;</span></span><br><span class="line"><span class="comment">//                String categoryName = category.getName();</span></span><br><span class="line"><span class="comment">//                dishDto.setCategoryName(categoryName);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return dishDto;</span></span><br><span class="line"><span class="comment">//        &#125;).collect(Collectors.toList());</span></span><br><span class="line"></span><br><span class="line">        dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量起售和停售"><a href="#菜品的批量起售和停售" class="headerlink" title="菜品的批量起售和停售"></a>菜品的批量起售和停售</h2><blockquote><p>需要修改：若菜品关联了套餐，则不允许停售</p></blockquote><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h3><p><img src="/../assets/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84.png" alt="请求路径"></p><blockquote><h6 id="注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"><a href="#注意点：-PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入" class="headerlink" title="注意点：@PathVariable的使用，在有多个参数时需加上占位符的值才能让值传入"></a><strong>注意点：<code>@PathVariable</code>的使用，在有多个参数时需加上占位符的值才能让值传入</strong></h6></blockquote><hr><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish != <span class="literal">null</span>) &#123;</span><br><span class="line">                dish.setStatus(status);</span><br><span class="line">                dishService.updateById(dish);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;菜品售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改菜品信息"><a href="#修改菜品信息" class="headerlink" title="修改菜品信息"></a>修改菜品信息</h2><h3 id="菜品信息回显功能"><a href="#菜品信息回显功能" class="headerlink" title="菜品信息回显功能"></a>菜品信息回显功能</h3><ul><li><strong>功能分析</strong></li></ul><blockquote><p><strong>将已有的菜品信息和菜品口味信息查询出来传回前端。</strong></p></blockquote><ul><li><strong>代码实现</strong></li><li><strong>在<code>DishService</code>接口中创建一个方法用于一次查两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询两张表</span></span><br><span class="line">    DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>实现该方法</strong></p><blockquote><p>将两张表的数据分别查出，再存入同一个dishDto对象中</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, id);</span><br><span class="line">        List&lt;DishFlavor&gt; list = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        dishDto.setFlavors(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>controller层调用该方法</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">        <span class="keyword">if</span> (dishDto != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到菜品信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改菜品功能"><a href="#修改菜品功能" class="headerlink" title="修改菜品功能"></a>修改菜品功能</h3><ul><li><strong>在<code>DishService</code>接口中创建一个方法用于一次修改两张表。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改菜品，需要同时操作两张表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>实现该方法</strong></li></ul><blockquote><ol><li><p>更新菜品基本信息</p></li><li><p>删除菜品口味原有信息</p></li><li><p>新增菜品口味信息</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">        <span class="comment">//将菜品信息更新到菜品表中</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先将口味表的数据清空</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, dishDto.getId());</span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再将菜品口味存入菜品口味表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">        <span class="keyword">for</span> (DishFlavor flavor : flavors) &#123;</span><br><span class="line">            flavor.setDishId(dishId);</span><br><span class="line">        &#125;</span><br><span class="line">        dishFlavorService.updateBatchById(flavors);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="菜品的批量删除（逻辑删除）"><a href="#菜品的批量删除（逻辑删除）" class="headerlink" title="菜品的批量删除（逻辑删除）"></a>菜品的批量删除（逻辑删除）</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</strong></p></blockquote><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>主要代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithFlavor</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="comment">//需注意：若该菜品正处于起售状态不能删除，若该菜品关联了其他套餐不能删除</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品正处于起售状态不能删除(抛异常)</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish.getStatus().equals(<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品正处于起售状态不能删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//若该菜品关联了其他套餐不能删除（抛异常）</span></span><br><span class="line">            List&lt;SetmealDish&gt; list = setmealDishService.list();</span><br><span class="line">            <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id.equals(setmealDish.getDishId()))&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;该菜品关联了其他套餐不能删除&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            queryWrapper.eq(id != <span class="literal">null</span>, Dish::getId, id);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除菜品口味</span></span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            queryWrapper1.eq(DishFlavor::getDishId, id);</span><br><span class="line">            dishFlavorService.remove(queryWrapper1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>要获得一个套餐分类的下拉列表</p></li><li><p>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</p></li><li><p>将套餐信息保存至数据库中（保存套餐的基本信息，保存套餐所包含的菜品的信息）</p></li></ol></blockquote><hr><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><strong>获得一个套餐分类的下拉列表</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增菜品(套餐)时下拉菜品（套餐）分类列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(category.getType()!=<span class="literal">null</span>,Category::getType,category.getType());</span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将菜品分类的id将菜品组查询出来（注意只查询出起售状态的菜品）</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>&#123;</span><br><span class="line">    <span class="comment">//构造条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queryWrapper.eq(dish.getCategoryId()!=<span class="literal">null</span>,Dish::getCategoryId,dish.getCategoryId());</span><br><span class="line">    <span class="comment">//只查询起售的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><strong>将套餐信息保存至数据库中</strong>（主要代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">//保存套餐基本信息</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存套餐包含的菜品</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐分页展示"><a href="#套餐分页展示" class="headerlink" title="套餐分页展示"></a>套餐分页展示</h2><h3 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的分页展示逻辑相同，都需要特别注意前端需要的是套餐的名称而不是<code>id</code></strong></p></blockquote><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page,<span class="type">int</span> pageSize,String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页构造器对象</span></span><br><span class="line">        Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page,pageSize);</span><br><span class="line">        Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">        <span class="comment">//添加排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行分页查询</span></span><br><span class="line">        setmealService.page(pageInfo,queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(pageInfo, setmealDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Setmeal record : records) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> record.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id得到对应的分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//根据该对象得到分类的名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                <span class="comment">//将分类名称存入dishDto对象中</span></span><br><span class="line">                setmealDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将其余属性拷贝到该对象中</span></span><br><span class="line">            BeanUtils.copyProperties(record, setmealDto);</span><br><span class="line"></span><br><span class="line">            list.add(setmealDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setmealDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="套餐的批量起售和停售"><a href="#套餐的批量起售和停售" class="headerlink" title="套餐的批量起售和停售"></a>套餐的批量起售和停售</h2><h3 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>与菜品的批量起售和停售功能逻辑相同</strong></p></blockquote><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealService.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (setmeal != <span class="literal">null</span>) &#123;</span><br><span class="line">                setmeal.setStatus(status);</span><br><span class="line">                setmealService.updateById(setmeal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;套餐售卖状态修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改套餐功能"><a href="#修改套餐功能" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h2><h3 id="套餐信息回显功能"><a href="#套餐信息回显功能" class="headerlink" title="套餐信息回显功能"></a>套餐信息回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="comment">//（套餐回显功能）</span></span><br><span class="line"><span class="keyword">public</span> SetmealDto <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line"></span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealDto);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(id != <span class="literal">null</span>, SetmealDish::getSetmealId, id);</span><br><span class="line">    List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    setmealDto.setSetmealDishes(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setmealDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改套餐功能-1"><a href="#修改套餐功能-1" class="headerlink" title="修改套餐功能"></a>修改套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将套餐信息更新到菜品表中</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(setmealDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先将套餐菜品关系表的数据清空</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(SetmealDish::getSetmealId, setmealDto.getId());</span><br><span class="line">    setmealDishService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//再将套餐菜品关系填入表中</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> String.valueOf(setmealDto.getId());</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    <span class="keyword">for</span> (SetmealDish setmealDish : setmealDishes) &#123;</span><br><span class="line">        setmealDish.setSetmealId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="套餐的批量删除"><a href="#套餐的批量删除" class="headerlink" title="套餐的批量删除"></a>套餐的批量删除</h2><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><strong>处于起售状态的套餐不能删除，与菜品删除不同的是，删除套餐可不用删除菜品</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeByIdWithDish</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (setmeal.getStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;存在套餐正处于起售状态不能删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="订单明细"><a href="#订单明细" class="headerlink" title="订单明细"></a>订单明细</h2><blockquote><p>见39.后台按条件查看订单</p></blockquote><h2 id="移动端短信验证登录（登出）"><a href="#移动端短信验证登录（登出）" class="headerlink" title="移动端短信验证登录（登出）"></a>移动端短信验证登录（登出）</h2><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><ul><li>导入maven坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--阿里云短信服务--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.5</span><span class="number">.16</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><hr><ul><li>修改<code>LoginCheckFilter</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求路径</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4-2、判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>获取验证码</li></ul><blockquote><p><strong>注意：此处因为没有阿里云短信服务的签名，所以真实发送短信的步骤就注释了，但生成的验证码可在控制台通过日志的形式查看。</strong></p><ol><li><p>获取手机号</p></li><li><p>生成随机的四位验证码</p></li><li><p>调用阿里云的短信服务API发送短信（已注释）</p></li><li><p>将验证码存入Session</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span> (phone != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//生成随机的四位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> String.valueOf(ValidateCodeUtils.generateValidateCode(<span class="number">4</span>));</span><br><span class="line">        log.info(<span class="string">&quot;code=&#123;&#125;&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用阿里云的短信服务API发送短信</span></span><br><span class="line">        <span class="comment">//SMSUtils.sendMessage(&quot;瑞吉外卖&quot;,&quot;&quot;,phone,code);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将验证码存入Session</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;短信验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;短信验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登录移动端"><a href="#登录移动端" class="headerlink" title="登录移动端"></a>登录移动端</h3><ul><li><strong>具体流程</strong></li></ul><blockquote><ol><li><p>获取前端发送过来的手机号</p></li><li><p>获取前端发送过来的验证码</p></li><li><p>从session中取出生成的验证码</p></li><li><p>如果能比对成功，证明登录成功</p></li><li><p>根据手机号判断是否为新用户，若是新用户则自动注册</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//从session中取出生成的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">    <span class="comment">//比对验证码是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code)) &#123;</span><br><span class="line">        <span class="comment">//如果能比对成功，证明登录成功</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(phone != <span class="literal">null</span>, User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//根据手机号判断是否为新用户，若是新用户则自动注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="登出移动端"><a href="#登出移动端" class="headerlink" title="登出移动端"></a>登出移动端</h3><blockquote><p>注意要释放session</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">loginout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">//释放session</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="新增地址"><a href="#新增地址" class="headerlink" title="新增地址"></a>新增地址</h2><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span>&#123;</span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    addressBookService.save(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="地址列表显示"><a href="#地址列表显示" class="headerlink" title="地址列表显示"></a>地址列表显示</h2><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>将当前登录用户的所有地址显示为列表展示到移动端页面</p><p><strong>注意：要设置地址对应的用户<code>id</code></strong></p></blockquote><hr><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">    <span class="comment">//设置地址对应的用户id</span></span><br><span class="line">    addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(addressBook.getUserId() != <span class="literal">null</span>, AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">    queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line">    List&lt;AddressBook&gt; list = addressBookService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h2><h3 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>先把该用户的所有地址都不设置为默认地址（故把所有该用户的<code>is_default</code>字段都设置为0）</p></li><li><p>设置该用户所选择的地址为默认地址</p></li></ol></blockquote><hr><h3 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@PutMapping(&quot;/default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="comment">//将该用户的所有地址都不设置为默认地址</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.eq(userId != <span class="literal">null</span>, AddressBook::getUserId, userId);</span><br><span class="line">        updateWrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        addressBookService.update(updateWrapper);</span><br><span class="line">        <span class="comment">//将选择的该用户的地址设置为默认值</span></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查询用户的默认地址"><a href="#查询用户的默认地址" class="headerlink" title="查询用户的默认地址"></a>查询用户的默认地址</h2><h3 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/default&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改地址（需修改）"><a href="#修改地址（需修改）" class="headerlink" title="修改地址（需修改）"></a>修改地址（需修改）</h2><h3 id="地址的回显功能"><a href="#地址的回显功能" class="headerlink" title="地址的回显功能"></a>地址的回显功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到该用户地址&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改地址功能"><a href="#修改地址功能" class="headerlink" title="修改地址功能"></a>修改地址功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">    addressBookService.updateById(addressBook);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h2><h3 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处无过多的逻辑分析，即使是默认地址也可以进行删除。</p></blockquote><hr><h3 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long ids)</span> &#123;</span><br><span class="line">    addressBookService.removeById(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除收货地址成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端主页展示（菜品、套餐）"><a href="#移动端主页展示（菜品、套餐）" class="headerlink" title="移动端主页展示（菜品、套餐）"></a>移动端主页展示（菜品、套餐）</h2><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a><strong>注意点</strong></h3><blockquote><ol><li><p>菜品，套餐的分类功能在前面已经写过了。移动端展示主页面需要该分类功能和购物车展示功能同时成功才能展示出来。</p></li><li><p>点击对应的菜品分类可查询出该分类下的所有菜品，注意该方法已经在之前新增套餐时的功能2中编写，但是当时只是让<code>DishDto</code>对象中新保存了菜品的名称，没有保存菜品的口味，故需要对该方法进行加强。</p></li><li><p>点击对应的套餐分类可查询出该分类下的所有套餐，需要添加该方法。</p></li></ol></blockquote><hr><h3 id="重新编写查询当前分类下的所有菜品功能"><a href="#重新编写查询当前分类下的所有菜品功能" class="headerlink" title="重新编写查询当前分类下的所有菜品功能"></a>重新编写查询当前分类下的所有菜品功能</h3><blockquote><p><strong>注意：只是新增了菜品口味的功能，不影响前面使用的功能（仅仅是对功能加强）</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">//构造查询条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    <span class="comment">//添加条件，查询状态为1（起售状态）的菜品</span></span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;DishDto&gt; dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Dish dish1 : list) &#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(dish1, dishDto);</span><br><span class="line">        <span class="comment">//获得菜品分类的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> dish1.getCategoryId();</span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="comment">//根据id查询分类对象</span></span><br><span class="line">        <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            dishDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前菜品的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish1.getId();</span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper1.eq(DishFlavor::getDishId,dishId);</span><br><span class="line">        List&lt;DishFlavor&gt; list1 = dishFlavorService.list(queryWrapper1);</span><br><span class="line">        dishDto.setFlavors(list1);</span><br><span class="line"></span><br><span class="line">        dishDtoList.add(dishDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="编写查询当前分类下的所有套餐功能"><a href="#编写查询当前分类下的所有套餐功能" class="headerlink" title="编写查询当前分类下的所有套餐功能"></a>编写查询当前分类下的所有套餐功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h2><h3 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断添加的是菜品还是套餐</p></li><li><p>如果能查找出来对应的符合该用户且符合该菜品（套餐）这两个条件的购物车对象，则在数量上加一</p></li><li><p>如果查询不出来，则新增该购物车对象，并设置数量为1,且设置创建时间</p></li></ol></blockquote><hr><h3 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断添加的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//添加的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shoppingCartOne != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果存在该对象，则数量加一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">        shoppingCartOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不存在该对象，则新增该购物车对象，并设置数量为1,且设置创建时间</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        shoppingCartOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(shoppingCartOne);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h2><h3 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>根据每个用户的<code>id</code>来查，每个用户只能看到自己的购物车</p></blockquote><hr><h3 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h2><h3 id="需求分析-12"><a href="#需求分析-12" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>注意：仅删除该用户的所有购物车数据</p></blockquote><hr><h3 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="删减购物车"><a href="#删减购物车" class="headerlink" title="删减购物车"></a>删减购物车</h2><h3 id="需求分析-13"><a href="#需求分析-13" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>设置当前购物车是哪个用户的</p></li><li><p>判断删减的是菜品还是套餐（因为前端发送过来的数据要么为<code>DishId</code>，要么为<code>SetmealId</code>）</p></li><li><p>判断要删减的该对象的数量是否为1</p></li><li><p>若为1，则删除该数据</p></li><li><p>若不为1，则将数量减一</p></li></ol></blockquote><hr><h3 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line">    <span class="comment">//设置当前购物车是哪个用户的</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断删减的是菜品还是套餐</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//删减的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//删减的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCartOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> shoppingCartOne.getNumber();</span><br><span class="line">    <span class="comment">//判断数量是否为1或大于1</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//数量为1则删除该该菜品（套餐）信息</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shoppingCartOne.getId();</span><br><span class="line">        shoppingCartService.removeById(id);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//数量不为1则该菜品（套餐）数量减1</span></span><br><span class="line">        shoppingCartOne.setNumber(number - <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(shoppingCartOne);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删减商品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="下单"><a href="#下单" class="headerlink" title="下单"></a>下单</h2><h3 id="需求分析-14"><a href="#需求分析-14" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p><strong>前提</strong>：点击去支付后</p><ol><li><p>前端页面自动访问查询默认地址功能（前面已写好）</p></li><li><p>前端页面自动访问查询购物车信息功能（前面已写好）</p></li></ol></blockquote><blockquote><p><strong>具体步骤</strong>：</p><ol><li><p>获得当前用户id</p></li><li><p>查询当前用户的购物车数据</p></li><li><p>若购物车为空，则抛出异常</p></li><li><p>查询用户数据</p></li><li><p>查询地址数据</p></li><li><p>封装订单表数据（1条）</p></li><li><p>封装订单明细表数据（多条：原购物车有几条数据这里就有几条）</p></li><li><p>向订单表插入数据，一条数据</p></li><li><p>向订单明细表插入数据，多条数据</p></li><li><p>清空购物车数据</p></li></ol></blockquote><hr><h3 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">//获得当前用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(ShoppingCart::getUserId,userId);</span><br><span class="line">    List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询地址数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">    <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">    <span class="keyword">if</span>(addressBook == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">        orderDetail.setOrderId(orderId);</span><br><span class="line">        orderDetail.setNumber(item.getNumber());</span><br><span class="line">        orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">        orderDetail.setDishId(item.getDishId());</span><br><span class="line">        orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">        orderDetail.setName(item.getName());</span><br><span class="line">        orderDetail.setImage(item.getImage());</span><br><span class="line">        orderDetail.setAmount(item.getAmount());</span><br><span class="line">        amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">        <span class="keyword">return</span> orderDetail;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    orders.setId(orderId);</span><br><span class="line">    orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    orders.setStatus(<span class="number">2</span>);</span><br><span class="line">    orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//总金额</span></span><br><span class="line">    orders.setUserId(userId);</span><br><span class="line">    orders.setNumber(String.valueOf(orderId));</span><br><span class="line">    orders.setUserName(user.getName());</span><br><span class="line">    orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">    orders.setPhone(addressBook.getPhone());</span><br><span class="line">    orders.setAddress((addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getProvinceName())</span><br><span class="line">            + (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getCityName())</span><br><span class="line">            + (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDistrictName())</span><br><span class="line">            + (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : addressBook.getDetail()));</span><br><span class="line">    <span class="comment">//向订单表插入数据，一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向订单明细表插入数据，多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空购物车数据</span></span><br><span class="line">    shoppingCartService.remove(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="用户查看自己的订单"><a href="#用户查看自己的订单" class="headerlink" title="用户查看自己的订单"></a>用户查看自己的订单</h2><h3 id="需求分析-15"><a href="#需求分析-15" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>需将订单明细表中的数据也查询出来，故这里需要使用<code>OrderDto</code></p><p>需注意：在遍历的时候直接使用构造条件来查询导致<code>eq</code>叠加，从而导致后面查询的数据都是null，所有该处选择将方法方法外面进行调用</p></blockquote><hr><h3 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//避免在遍历的时候直接使用构造条件来查询导致eq叠加，从而导致后面查询的数据都是null</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;OrderDetail&gt; <span class="title function_">getOrderDetailListByOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">       List&lt;OrderDetail&gt; orderDetailList = orderDetailService.list(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> orderDetailList;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//移动端分页展示订单</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">       Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">       Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.orderByAsc(Orders::getOrderTime);</span><br><span class="line">       queryWrapper.eq(Orders::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       ordersService.page(ordersPage, queryWrapper);</span><br><span class="line"></span><br><span class="line">       List&lt;Orders&gt; records = ordersPage.getRecords();</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;OrdersDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Orders record : records) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">           <span class="comment">//获取订单id</span></span><br><span class="line">           <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> record.getId();</span><br><span class="line"></span><br><span class="line">           List&lt;OrderDetail&gt; list1 = <span class="built_in">this</span>.getOrderDetailListByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">           BeanUtils.copyProperties(record, ordersDto);</span><br><span class="line">           ordersDto.setOrderDetails(list1);</span><br><span class="line"></span><br><span class="line">           list.add(ordersDto);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ordersDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台按条件查看订单"><a href="#后台按条件查看订单" class="headerlink" title="后台按条件查看订单"></a>后台按条件查看订单</h2><h3 id="需求分析-16"><a href="#需求分析-16" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>此处需要添加三个条件：</p><ol><li><p>订单号模糊查询</p></li><li><p>大于某时间</p></li><li><p>小于某时间</p></li></ol></blockquote><hr><h3 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    Page&lt;Orders&gt; ordersPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByAsc(Orders::getOrderTime)</span><br><span class="line">            .like(number != <span class="literal">null</span>, Orders::getId, number)</span><br><span class="line">            .ge(beginTime != <span class="literal">null</span>, Orders::getOrderTime, beginTime)</span><br><span class="line">            .le(endTime != <span class="literal">null</span>, Orders::getOrderTime, endTime);</span><br><span class="line"></span><br><span class="line">    ordersService.page(ordersPage, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="后台修改订单状态"><a href="#后台修改订单状态" class="headerlink" title="后台修改订单状态"></a>后台修改订单状态</h2><h3 id="需求分析-17"><a href="#需求分析-17" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>前端发送过来的数据包含需改变的<code>status</code>和订单<code>id</code>，故可直接更改订单状态。</p></blockquote><hr><h3 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">changeStatus</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    ordersService.updateById(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改订单状态成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="移动端点击套餐图片查看套餐具体菜品"><a href="#移动端点击套餐图片查看套餐具体菜品" class="headerlink" title="移动端点击套餐图片查看套餐具体菜品"></a>移动端点击套餐图片查看套餐具体菜品</h2><h3 id="需求分析-18"><a href="#需求分析-18" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><ol><li><p>通过前端传入的套餐id在套餐菜品关系表中查询出该套餐下的所有菜品</p></li><li><p>将dish对象拷贝给<code>dishDto</code>对象</p></li><li><p>将存<code>dishDto</code>对象的集合传回前端</p></li></ol></blockquote><hr><h3 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">dish</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(SetmealDish::getSetmealId, id);</span><br><span class="line">        <span class="comment">//获取该套餐下的所有菜品</span></span><br><span class="line">        List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishDtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (SetmealDish setmealDish : list) &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">dishId</span> <span class="operator">=</span> setmealDish.getDishId();</span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line">            BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">            dishDtos.add(dishDto);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="再来一单功能"><a href="#再来一单功能" class="headerlink" title="再来一单功能"></a>再来一单功能</h2><h3 id="需求分析-19"><a href="#需求分析-19" class="headerlink" title="需求分析"></a>需求分析</h3><blockquote><p>只有订单表中的status为4 的时候才能有再来一单的功能</p><p>点击再来一单按钮前端页面会直接跳转到购物车页面</p><p>根据<code>userId</code>，删除该用户此时所剩的购物车数据（清空购物车）</p><p>需要将原来购物车数据复制到购物车中</p></blockquote><hr><h3 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/again&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">again</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">    <span class="comment">//前端页面会直接跳转到购物车页面</span></span><br><span class="line">    <span class="comment">//故需要先将购物车中数据清除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据userId，删除该用户此时所剩的购物车数据(清空购物车)</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要将原来购物车数据复制到购物车中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> map.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper1.eq(OrderDetail::getOrderId,id);</span><br><span class="line">    List&lt;OrderDetail&gt; list = orderDetailService.list(queryWrapper1);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ShoppingCart&gt; shoppingCartsLists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (OrderDetail orderDetail : list) &#123;</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        shoppingCart.setImage(orderDetail.getImage());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> orderDetail.getDishId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> orderDetail.getSetmealId();</span><br><span class="line">        <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果是菜品那就添加菜品的查询条件</span></span><br><span class="line">            shoppingCart.setDishId(dishId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//添加到购物车的是套餐</span></span><br><span class="line">            shoppingCart.setSetmealId(setmealId);</span><br><span class="line">        &#125;</span><br><span class="line">        shoppingCart.setName(orderDetail.getName());</span><br><span class="line">        shoppingCart.setDishFlavor(orderDetail.getDishFlavor());</span><br><span class="line">        shoppingCart.setNumber(orderDetail.getNumber());</span><br><span class="line">        shoppingCart.setAmount(orderDetail.getAmount());</span><br><span class="line">        shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        shoppingCartsLists.add(shoppingCart);</span><br><span class="line">    &#125;</span><br><span class="line">    shoppingCartService.saveBatch(shoppingCartsLists);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><blockquote><p>该项目后续可用<code>redis</code>，<code>mysql</code>主从复制，<code>nginx</code>等技术优化，还需后续完善…….</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瑞吉外卖 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
